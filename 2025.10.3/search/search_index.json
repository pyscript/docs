{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"PyScript is an open source platform for Python in the browser."},{"location":"#pyscript-is","title":"PyScript is...","text":"<ul> <li>Easy: your apps run in the browser with no complicated installation   required.</li> <li>Expressive: create apps with a powerful, popular and easy to learn   language like Python.</li> <li>Scalable: no need for expensive infrastructure ~ your code runs in   your user's browser.</li> <li>Shareable: applications are just a URL on the web. That's it!</li> <li>Universal: your code runs anywhere a browser runs... which is   everywhere!</li> <li>Secure: PyScript runs in the world's most battle-tested computing    platform, the browser!</li> <li>Powerful: the best of the web and Python, together at last.</li> </ul>"},{"location":"#whats-next","title":"What's next?","text":"I'm a beginner... Welcome! PyScript is designed to be friendly for beginner coders. The   best way to start is to read our   beginning PyScript guide   and then use   pyscript.com   to create your first apps. Problems? Check out our   frequently asked questions. I'm already technical... The beginner docs will set you up with a simple coding environment. For   more in-depth technical coverage of PyScript, consult the   user guide. The   example applications demonstrate many of the features   of PyScript. The API docs and FAQ   contain lots of technical detail. I want to contribute... <p>Welcome, friend!     PyScript is an open source project, we expect     participants to act in the spirit of our     code of conduct and we have many      ways in which you can contribute.     Our developer guide explains how to set     up a working development environment for PyScript.</p> Just show me... That's easy! Just take a look around   pyscript.com - our   platform for developing and hosting PyScript applications. By using   using this service you help to support and sustain the development and growth   of the open-source PyScript project. I want support... <p>Join the conversation on our     discord server,     for realtime chat with core maintainers and fellow users of PyScript.     Check out our YouTube     channel, full of community calls and show and tells.     Explore     educational     and     commercial     support provided by our open source sponsor      Anaconda Inc (this     helps pay for and sustain PyScript!).</p>"},{"location":"api/","title":"Built-in APIs","text":"<p>PyScript makes available convenience objects, functions and attributes.</p> <p>In Python this is done via the builtin <code>pyscript</code> module:</p> Accessing the document object via the pyscript module<pre><code>from pyscript import document\n</code></pre> <p>In HTML this is done via <code>py-*</code> and <code>mpy-*</code> attributes (depending on the interpreter you're using):</p> An example of a py-click handler<pre><code>&lt;button id=\"foo\" py-click=\"handler_defined_in_python\"&gt;Click me&lt;/button&gt;\n</code></pre> <p>These APIs will work with both Pyodide and Micropython in exactly the same way.</p> <p>Info</p> <p>Both Pyodide and MicroPython provide access to two further lower-level APIs:</p> <ul> <li>Access to   JavaScript's <code>globalThis</code>   via importing the <code>js</code> module: <code>import js</code> (now <code>js</code> is a proxy for    <code>globalThis</code> in which all native JavaScript based browser APIs are   found).</li> <li>Access to interpreter specific versions of utilities and the foreign   function interface. Since these are different for each interpreter, and   beyond the scope of PyScript's own documentation, please check each   project's documentation   (Pyodide /    MicroPython) for details of   these lower-level APIs.</li> </ul> <p>PyScript can run in two contexts: the main browser thread, or on a web worker. The following three categories of API functionality explain features that are common for both main thread and worker, main thread only, and worker only. Most features work in both contexts in exactly the same manner, but please be aware that some are specific to either the main thread or a worker context.</p>"},{"location":"api/#common-features","title":"Common features","text":"<p>These Python objects / functions are available in both the main thread and in code running on a web worker:</p>"},{"location":"api/#pyscriptconfig","title":"<code>pyscript.config</code>","text":"<p>A Python dictionary representing the configuration for the interpreter.</p> Reading the current configuration.<pre><code>from pyscript import config\n# It's just a dict.\nprint(config.get(\"files\"))\n# This will be either \"mpy\" or \"py\" depending on the current interpreter.\nprint(config[\"type\"])\n</code></pre> <p>Info</p> <p>The <code>config</code> object will always include a <code>type</code> attribute set to either <code>mpy</code> or <code>py</code>, to indicate which version of Python your code is currently running in.</p> <p>Warning</p> <p>Changing the <code>config</code> dictionary at runtime has no effect on the actual configuration.</p> <p>It's just a convenience to read the configuration at run time.</p>"},{"location":"api/#pyscriptcurrent_target","title":"<code>pyscript.current_target</code>","text":"<p>A utility function to retrieve the unique identifier of the element used to display content. If the element is not a <code>&lt;script&gt;</code> and it already has an <code>id</code>, that <code>id</code> will be returned.</p> The current_target utility<pre><code>&lt;!-- current_target(): explicit-id --&gt;\n&lt;mpy-script id=\"explicit-id\"&gt;\n    from pyscript import display, current_target\n    display(f\"current_target(): {current_target()}\")\n&lt;/mpy-script&gt;\n&lt;!-- current_target(): mpy-0 --&gt;\n&lt;mpy-script&gt;\n    from pyscript import display, current_target\n    display(f\"current_target(): {current_target()}\")\n&lt;/mpy-script&gt;\n&lt;!-- current_target(): mpy-1 --&gt;\n&lt;!-- creates right after the &lt;script&gt;:\n    &lt;script-py id=\"mpy-1\"&gt;\n        &lt;div&gt;current_target(): mpy-1&lt;/div&gt;\n    &lt;/script-py&gt;\n--&gt;\n&lt;script type=\"mpy\"&gt;\nfrom pyscript import display, current_target\ndisplay(f\"current_target(): {current_target()}\")\n&lt;/script&gt;\n</code></pre> <p>Note</p> <p>The return value of <code>current_target()</code> always references a visible element on the page, not at the current <code>&lt;script&gt;</code> that is executing the code.</p> <p>To reference the <code>&lt;script&gt;</code> element executing the code, assign it an <code>id</code>:</p> <pre><code>&lt;script type=\"mpy\" id=\"unique-id\"&gt;...&lt;/script&gt;\n</code></pre> <p>Then use the standard <code>document.getElementById(script_id)</code> function to return a reference to it in your code.</p>"},{"location":"api/#pyscriptdisplay","title":"<code>pyscript.display</code>","text":"<p>A function used to display content. The function is intelligent enough to introspect the object[s] it is passed and work out how to correctly display the object[s] in the web page based on the following mime types:</p> <ul> <li><code>text/plain</code> to show the content as text</li> <li><code>text/html</code> to show the content as HTML</li> <li><code>image/png</code> to show the content as <code>&lt;img&gt;</code></li> <li><code>image/jpeg</code> to show the content as <code>&lt;img&gt;</code></li> <li><code>image/svg+xml</code> to show the content as <code>&lt;svg&gt;</code></li> <li><code>application/json</code> to show the content as JSON</li> <li><code>application/javascript</code> to put the content in <code>&lt;script&gt;</code> (discouraged)</li> </ul> <p>The <code>display</code> function takes a list of <code>*values</code> as its first argument, and has two optional named arguments:</p> <ul> <li><code>target=None</code> - the DOM element into which the content should be placed.   If not specified, the <code>target</code> will use the <code>current_script()</code> returned id   and populate the related dedicated node to show the content.</li> <li><code>append=True</code> - a flag to indicate if the output is going to be appended to   the <code>target</code>.</li> </ul> <p>There are some caveats:</p> <ul> <li>When used in the main thread, the <code>display</code> function automatically uses   the current <code>&lt;py-script&gt;</code> or <code>&lt;mpy-script&gt;</code> tag as the <code>target</code> into which   the content will be displayed.</li> <li>If the <code>&lt;script&gt;</code> tag has the <code>target</code> attribute, and is not a worker,   the element on the page with that ID (or which matches that selector)   will be used to display the content instead.</li> <li>When used in a worker, the <code>display</code> function needs an explicit   <code>target=\"dom-id\"</code> argument to identify where the content will be   displayed.</li> <li>In both the main thread and worker, <code>append=True</code> is the default   behaviour.</li> </ul> Various display examples<pre><code>&lt;!-- will produce\n    &lt;py-script&gt;PyScript&lt;/py-script&gt;\n--&gt;\n&lt;py-script worker&gt;\n    from pyscript import display\n    display(\"PyScript\", append=False)\n&lt;/py-script&gt;\n&lt;!-- will produce\n    &lt;script type=\"py\"&gt;...&lt;/script&gt;\n    &lt;script-py&gt;PyScript&lt;/script-py&gt;\n--&gt;\n&lt;script type=\"py\"&gt;\nfrom pyscript import display\ndisplay(\"PyScript\", append=False)\n&lt;/script&gt;\n&lt;!-- will populate &lt;h1&gt;PyScript&lt;/h1&gt; --&gt;\n&lt;script type=\"py\" target=\"my-h1\"&gt;\nfrom pyscript import display\ndisplay(\"PyScript\", append=False)\n&lt;/script&gt;\n&lt;h1 id=\"my-h1\"&gt;&lt;/h1&gt;\n&lt;!-- will populate &lt;h2&gt;PyScript&lt;/h2&gt; --&gt;\n&lt;script type=\"py\" worker&gt;\nfrom pyscript import display\ndisplay(\"PyScript\", target=\"my-h2\", append=False)\n&lt;/script&gt;\n&lt;h2 id=\"my-h2\"&gt;&lt;/h2&gt;\n</code></pre>"},{"location":"api/#pyscriptdocument","title":"<code>pyscript.document</code>","text":"<p>On both main and worker threads, this object is a proxy for the web page's document object. The <code>document</code> is a representation of the DOM and can be used to read or manipulate the content of the web page.</p>"},{"location":"api/#pyscriptfetch","title":"<code>pyscript.fetch</code>","text":"<p>A common task is to <code>fetch</code> data from the web via HTTP requests. The <code>pyscript.fetch</code> function provides a uniform way to achieve this in both Pyodide and MicroPython. It is closely modelled on the Fetch API found in browsers with some important Pythonic differences.</p> <p>The simple use case is to pass in a URL and <code>await</code> the response. If this request is in a function, that function should also be defined as <code>async</code>.</p> A simple HTTP GET with pyscript.fetch<pre><code>from pyscript import fetch\nresponse = await fetch(\"https://example.com\")\nif response.ok:\ndata = await response.text()\nelse:\nprint(response.status)\n</code></pre> <p>The object returned from an <code>await fetch</code> call will have attributes that correspond to the JavaScript response object. This is useful for getting response codes, headers and other metadata before processing the response's data.</p> <p>Alternatively, rather than using a double <code>await</code> (one to get the response, the other to grab the data), it's possible to chain the calls into a single <code>await</code> like this:</p> A simple HTTP GET as a single await<pre><code>from pyscript import fetch\ndata = await fetch(\"https://example.com\").text()\n</code></pre> <p>The following awaitable methods are available to you to access the data returned from the server:</p> <ul> <li><code>arrayBuffer()</code> returns a Python   memoryview of   the response. This is equivalent to the   <code>arrayBuffer()</code> method   in the browser based <code>fetch</code> API.</li> <li><code>blob()</code> returns a JavaScript   <code>blob</code>   version of the response. This is equivalent to the   <code>blob()</code> method   in the browser based <code>fetch</code> API.</li> <li><code>bytearray()</code> returns a Python   <code>bytearray</code>   version of the response.</li> <li><code>json()</code> returns a Python datastructure representing a JSON serialised   payload in the response.</li> <li><code>text()</code> returns a Python string version of the response.</li> </ul> <p>The underlying browser <code>fetch</code> API has many request options that you should simply pass in as keyword arguments like this:</p> Supplying request options.<pre><code>from pyscript import fetch\nresult = await fetch(\"https://example.com\", method=\"POST\", body=\"HELLO\").text()\n</code></pre> <p>Danger</p> <p>You may encounter CORS errors (especially with reference to a missing Access-Control-Allow-Origin header.</p> <p>This is a security feature of modern browsers where the site to which you are making a request will not process a request from a site hosted at another domain.</p> <p>For example, if your PyScript app is hosted under <code>example.com</code> and you make a request to <code>bbc.co.uk</code> (who don't allow requests from other domains) then you'll encounter this sort of CORS related error.</p> <p>There is nothing PyScript can do about this problem (it's a feature, not a bug). However, you could use a pass-through proxy service to get around this limitation (i.e. the proxy service makes the call on your behalf).</p>"},{"location":"api/#pyscriptffi","title":"<code>pyscript.ffi</code>","text":"<p>The <code>pyscript.ffi</code> namespace contains foreign function interface (FFI) methods that work in both Pyodide and MicroPython.</p>"},{"location":"api/#pyscriptfficreate_proxy","title":"<code>pyscript.ffi.create_proxy</code>","text":"<p>A utility function explicitly for when a callback function is added via an event listener. It ensures the function still exists beyond the assignment of the function to an event. Should you not <code>create_proxy</code> around the callback function, it will be immediately garbage collected after being bound to the event.</p> <p>Warning</p> <p>There is some technical complexity to this situation, and we have attempted to create a mechanism where <code>create_proxy</code> is never needed.</p> <p>Pyodide expects the created proxy to be explicitly destroyed when it's not needed / used anymore. However, the underlying <code>proxy.destroy()</code> method has not been implemented in MicroPython (yet).</p> <p>To simplify this situation and automatically destroy proxies based on JavaScript memory management (garbage collection) heuristics, we have introduced an experimental flag:</p> <pre><code>experimental_create_proxy = \"auto\"\n</code></pre> <p>This flag ensures the proxy creation and destruction process is managed for you. When using this flag you should never need to explicitly call <code>create_proxy</code>.</p> <p>The technical details of how this works are described here.</p>"},{"location":"api/#pyscriptffito_js","title":"<code>pyscript.ffi.to_js</code>","text":"<p>A utility function to convert Python references into their JavaScript equivalents. For example, a Python dictionary is converted into a JavaScript object literal (rather than a JavaScript <code>Map</code>), unless a <code>dict_converter</code> is explicitly specified and the runtime is Pyodide.</p> <p>The technical details of how this works are described here.</p>"},{"location":"api/#pyscriptfs","title":"<code>pyscript.fs</code>","text":"<p>Danger</p> <p>This API only works in Chromium based browsers.</p> <p>An API for mounting the user's local filesystem to a designated directory in the browser's virtual filesystem. Please see the filesystem section of the user-guide for more information.</p>"},{"location":"api/#pyscriptfsmount","title":"<code>pyscript.fs.mount</code>","text":"<p>Mount a directory on the user's local filesystem into the browser's virtual filesystem. If no previous transient user activation has taken place, this function will result in a minimalist dialog to provide the required transient user activation.</p> <p>This asynchronous function takes four arguments:</p> <ul> <li><code>path</code> (required) - indicating the location on the in-browser filesystem to   which the user selected directory from the local filesystem will be mounted.</li> <li><code>mode</code> (default: <code>\"readwrite\"</code>) - indicates how the code may interact with   the mounted filesystem. May also be just <code>\"read\"</code> for read-only access.</li> <li><code>id</code> (default: <code>\"pyscript\"</code>) - indicate a unique name for the handler   associated with a directory on the user's local filesystem. This allows users   to select different folders and mount them at the same path in the   virtual filesystem.</li> <li><code>root</code> (default: <code>\"\"</code>) - a hint to the browser for where to start picking the   path that should be mounted in Python. Valid values are: <code>desktop</code>,   <code>documents</code>, <code>downloads</code>, <code>music</code>, <code>pictures</code> or <code>videos</code> as per   web standards.</li> </ul> Mount a local directory to the '/local' directory in the browser's virtual filesystem<pre><code>from pyscript import fs\n# May ask for permission from the user, and select the local target.\nawait fs.mount(\"/local\")\n</code></pre> <p>If the call to <code>fs.mount</code> happens after a click or other transient event, the confirmation dialog will not be shown.</p> Mounting without a transient event dialog.<pre><code>from pyscript import fs\nasync def handler(event):\n\"\"\"\n    The click event that calls this handler is already a transient event.\n    \"\"\"\nawait fs.mount(\"/local\")\nmy_button.onclick = handler\n</code></pre>"},{"location":"api/#pyscriptfssync","title":"<code>pyscript.fs.sync</code>","text":"<p>Given a named <code>path</code> for a mount point on the browser's virtual filesystem, asynchronously ensure the virtual and local directories are synchronised (i.e. all changes made in the browser's mounted filesystem, are propagated to the user's local filesystem).</p> Synchronise the virtual and local filesystems.<pre><code>await fs.sync(\"/local\")\n</code></pre>"},{"location":"api/#pyscriptfsunmount","title":"<code>pyscript.fs.unmount</code>","text":"<p>Asynchronously unmount the named <code>path</code> from the browser's virtual filesystem after ensuring content is synchronized. This will free up memory and allow you to re-use the path to mount a different directory.</p> Unmount from the virtual filesystem.<pre><code>await fs.unmount(\"/local\")\n</code></pre>"},{"location":"api/#pyscriptjs_modules","title":"<code>pyscript.js_modules</code>","text":"<p>It is possible to define JavaScript modules to use within your Python code.</p> <p>Such named modules will always then be available under the <code>pyscript.js_modules</code> namespace.</p> <p>Warning</p> <p>Please see the documentation (linked above) about restrictions and gotchas when configuring how JavaScript modules are made available to PyScript.</p>"},{"location":"api/#pyscriptmedia","title":"<code>pyscript.media</code>","text":"<p>The <code>pyscript.media</code> namespace provides classes and functions for interacting with media devices and streams in a web browser. This module enables you to work with cameras, microphones, and other media input/output devices directly from Python code.</p>"},{"location":"api/#pyscriptmediadevice","title":"<code>pyscript.media.Device</code>","text":"<p>A class that represents a media input or output device, such as a microphone, camera, or headset.</p> Creating a Device object<pre><code>from pyscript.media import Device, list_devices\n# List all available media devices\ndevices = await list_devices()\n# Get the first available device\nmy_device = devices[0]\n</code></pre> <p>The <code>Device</code> class has the following properties:</p> <ul> <li><code>id</code> - a unique string identifier for the represented device.</li> <li><code>group</code> - a string group identifier for devices belonging to the same physical device.</li> <li><code>kind</code> - an enumerated value: \"videoinput\", \"audioinput\", or \"audiooutput\".</li> <li><code>label</code> - a string describing the device (e.g., \"External USB Webcam\").</li> </ul> <p>The <code>Device</code> class also provides the following methods:</p>"},{"location":"api/#deviceloadaudiofalse-videotrue","title":"<code>Device.load(audio=False, video=True)</code>","text":"<p>A class method that loads a media stream with the specified options.</p> Loading a media stream<pre><code># Load a video stream (default)\nstream = await Device.load()\n# Load an audio stream only\nstream = await Device.load(audio=True, video=False)\n# Load with specific video constraints\nstream = await Device.load(video={\"width\": 1280, \"height\": 720})\n</code></pre> <p>Parameters: * <code>audio</code> (bool, default: False) - Whether to include audio in the stream. * <code>video</code> (bool or dict, default: True) - Whether to include video in the   stream. Can also be a dictionary of video constraints.</p> <p>Returns: * A media stream object that can be used with HTML media elements.</p>"},{"location":"api/#get_stream","title":"<code>get_stream()</code>","text":"<p>An instance method that gets a media stream from this specific device.</p> Getting a stream from a specific device<pre><code># Find a video input device\nvideo_devices = [d for d in devices if d.kind == \"videoinput\"]\nif video_devices:\n# Get a stream from the first video device\nstream = await video_devices[0].get_stream()\n</code></pre> <p>Returns: * A media stream object from the specific device.</p>"},{"location":"api/#pyscriptmedialist_devices","title":"<code>pyscript.media.list_devices()</code>","text":"<p>An async function that returns a list of all currently available media input and output devices.</p> Listing all media devices<pre><code>from pyscript.media import list_devices\ndevices = await list_devices()\nfor device in devices:\nprint(f\"Device: {device.label}, Kind: {device.kind}\")\n</code></pre> <p>Returns: * A list of <code>Device</code> objects representing the available media devices.</p> <p>Note</p> <p>The returned list will omit any devices that are blocked by the document Permission Policy or for which the user has not granted permission.</p>"},{"location":"api/#simple-example","title":"Simple Example","text":"Basic camera access<pre><code>from pyscript import document\nfrom pyscript.media import Device\nasync def init_camera():\n# Get a video stream\nstream = await Device.load(video=True)\n# Set the stream as the source for a video element\nvideo_el = document.getElementById(\"camera\")\nvideo_el.srcObject = stream\n# Initialize the camera\ninit_camera()\n</code></pre> <p>Warning</p> <p>Using media devices requires appropriate permissions from the user. Browsers will typically show a permission dialog when <code>list_devices()</code> or <code>Device.load()</code> is called.</p>"},{"location":"api/#pyscriptstorage","title":"<code>pyscript.storage</code>","text":"<p>The <code>pyscript.storage</code> API wraps the browser's built-in IndexDB persistent storage in a synchronous Pythonic API.</p> <p>Info</p> <p>The storage API is persistent per user tab, page, or domain, in the same way IndexedDB persists.</p> <p>This API is not saving files in the interpreter's virtual file system nor onto the user's hard drive.</p> <pre><code>from pyscript import storage\n# Each store must have a meaningful name.\nstore = await storage(\"my-storage-name\")\n# store is a dictionary and can now be used as such.\n</code></pre> <p>The returned dictionary automatically loads the current state of the referenced IndexDB. All changes are automatically queued in the background.</p> <pre><code># This is a write operation.\nstore[\"key\"] = value\n# This is also a write operation (it changes the stored data).\ndel store[\"key\"]\n</code></pre> <p>Should you wish to be certain changes have been synchronized to the underlying IndexDB, just <code>await store.sync()</code>.</p> <p>Common types of value can be stored via this API: <code>bool</code>, <code>float</code>, <code>int</code>, <code>str</code> and <code>None</code>. In addition, data structures like <code>list</code>, <code>dict</code> and <code>tuple</code> can be stored.</p> <p>Warning</p> <p>Because of the way the underlying data structure are stored in IndexDB, a Python <code>tuple</code> will always be returned as a Python <code>list</code>.</p> <p>It is even possible to store arbitrary data via a <code>bytearray</code> or <code>memoryview</code> object. However, there is a limitation that such values must be stored as a single key/value pair, and not as part of a nested data structure.</p> <p>Sometimes you may need to modify the behaviour of the <code>dict</code> like object returned by <code>pyscript.storage</code>. To do this, create a new class that inherits from <code>pyscript.Storage</code>, then pass in your class to <code>pyscript.storage</code> as the <code>storage_class</code> argument:</p> <pre><code>from pyscript import window, storage, Storage\nclass MyStorage(Storage):\ndef __setitem__(self, key, value):\nsuper().__setitem__(key, value)\nwindow.console.log(key, value)\n...\nstore = await storage(\"my-data-store\", storage_class=MyStorage)\n# The store object is now an instance of MyStorage.\n</code></pre>"},{"location":"api/#pyscriptcoredonkey","title":"<code>@pyscript/core/donkey</code>","text":"<p>Sometimes you need an asynchronous Python worker ready and waiting to evaluate any code on your behalf. This is the concept behind the JavaScript \"donkey\". We couldn't think of a better way than \"donkey\" to describe something that is easy to understand and shoulders the burden without complaint. This feature means you're able to use PyScript without resorting to specialised <code>&lt;script type=\"py\"&gt;</code> style tags. It's just vanilla JavaScript.</p> <p>Simply <code>import { donkey } from '@pyscript/core/dist/core.js'</code> and automatically have both a pyscript module running on your page and a utility to bootstrap a terminal based worker to asynchronously evaluate any Python code as and when needed in the future.</p> A donkey worker<pre><code>import { donkey } from '@pyscript/core/dist/core.js';\nconst {\nprocess,              // process(code) code (visible in the terminal)\nexecute,              // execute(statement) in Python exec way\nevaluate,             // evaluate(expression) in Python eval way\nclear,                // clear() the terminal\nreset,                // reset() the terminal (including colors)\nkill,                 // kill() the worker forever\n} = await donkey({\ntype: 'py' || 'mpy',  // the Python interpreter to run\npersistent: false,    // use `true` to track globals and locals\nterminal: '',         // optionally set a target terminal container\nconfig: {},           // the worker config (packages, files, etc.)\n});\n</code></pre> <p>By default PyScript creates a target terminal. If you don't want a terminal to appear on your page, use the <code>terminal</code> option to point to a CSS addressable container that is not visible (i.e. the target has <code>display: none</code>).</p>"},{"location":"api/#pyscriptcorediststoragejs","title":"<code>@pyscript/core/dist/storage.js</code>","text":"<p>The equivalent functionality based on the JS module can be found through our module.</p> <p>The goal is to be able to share the same database across different worlds (interpreters) and the functionality is nearly identical except there is no class to provide because the storage in JS is just a dictionary proxy that synchronizes behind the scene all read, write or delete operations.</p>"},{"location":"api/#pyscriptweb","title":"<code>pyscript.web</code>","text":"<p>The classes and references in this namespace provide a Pythonic way to interact with the DOM. An explanation for how to idiomatically use this API can be found in the user guide</p>"},{"location":"api/#pyscriptwebpage","title":"<code>pyscript.web.page</code>","text":"<p>This object represents a web page. It has four attributes and two methods:</p> <ul> <li><code>html</code> - a reference to a Python object representing the document's html root element.</li> <li><code>head</code> - a reference to a Python object representing the document's head.</li> <li><code>body</code> - a reference to a Python object representing the document's body.</li> <li><code>title</code> - the page's title (usually displayed in the browser's title bar or a page's tab.</li> <li><code>find</code> - a method that takes a single selector   argument and returns a collection of Python objects representing the matching   elements.</li> <li><code>append</code> - a shortcut for <code>page.body.append</code> (to add new elements to the   page).</li> </ul> <p>You may also shortcut the <code>find</code> method by enclosing a CSS selector in square brackets: <code>page[\"#my-thing\"]</code>.</p> <p>These are provided as a convenience so you have several simple and obvious options for accessing and changing the content of the page.</p> <p>All the Python objects returned by these attributes and method are instances of classes relating to HTML elements defined in the <code>pyscript.web</code> namespace.</p>"},{"location":"api/#pyscriptweb_1","title":"<code>pyscript.web.*</code>","text":"<p>There are many classes in this namespace. Each is a one-to-one mapping of any HTML element name to a Python class representing the HTML element of that name. Each Python class ensures only valid properties and attributes can be assigned, according to web standards.</p> <p>Usage of these classes is explained in the user guide.</p> <p>Info</p> <p>The full list of supported element/class names is:</p> <pre><code>grid\na, abbr, address, area, article, aside, audio\nb, base, blockquote, body, br, button\ncanvas, caption, cite, code, col, colgroup\ndata, datalist, dd, del_, details, dialog, div, dl, dt\nem, embed\nfieldset, figcaption, figure, footer, form\nh1, h2, h3, h4, h5, h6, head, header, hgroup, hr, html\ni, iframe, img, input_, ins\nkbd\nlabel, legend, li, link\nmain, map_, mark, menu, meta, meter\nnav\nobject_, ol, optgroup, option, output\np, param, picture, pre, progress\nq\ns, script, section, select, small, source, span, strong, style, sub, summary, sup\ntable, tbody, td, template, textarea, tfoot, th, thead, time, title, tr, track\nu, ul\nvar, video\nwbr\n</code></pre> <p>These correspond to the standard HTML elements with the caveat that <code>del_</code> and <code>input_</code> have the trailing underscore (<code>_</code>) because they are also keywords in Python, and the <code>grid</code> is a custom class for a <code>div</code> with a <code>grid</code> style <code>display</code> property.</p> <p>All these classes ultimately derive from the <code>pyscript.web.elements.Element</code> base class.</p> <p>In addition to properties defined by the HTML standard for each type of HTML element (e.g. <code>title</code>, <code>src</code> or <code>href</code>), all elements have the following properties and methods (in alphabetical order):</p> <ul> <li><code>append(child)</code> - add the <code>child</code> element to the element's children.</li> <li><code>children</code> - a collection containing the element's child elements (that it   contains).</li> <li><code>classes</code> - a set of CSS classes associated with the element.</li> <li><code>clone(clone_id=None)</code> - Make a clone of the element (and the underlying DOM   object), and assign it the optional <code>clone_id</code>.</li> <li><code>find(selector)</code> - use a CSS selector to find matching child elements.</li> <li><code>parent</code> - the element's parent element (that contains it).</li> <li><code>show_me</code> - scroll the element into view.</li> <li><code>style</code> - a dictionary of CSS style properties associated with the element.</li> <li><code>update(classes=None, style=None, **kwargs)</code> - update the element with the   specified classes (set), style (dict) and DOM properties (kwargs).</li> <li><code>_dom_element</code> - a reference to the proxy object that represents the   underlying native HTML element.</li> </ul> <p>Info</p> <p>All elements, by virtue of inheriting from the base <code>Element</code> class, may have the following properties:</p> <pre><code>accesskey, autofocus, autocapitalize,\nclassName, contenteditable,\ndraggable,\nenterkeyhint,\nhidden,\ninnerHTML, id,\nlang,\nnonce,\npart, popover,\nslot, spellcheck,\ntabindex, text, title, translate,\nvirtualkeyboardpolicy\n</code></pre> <p>The <code>classes</code> set-like object has the following convenience functions:</p> <ul> <li><code>add(*class_names)</code> - add the class(es) to the element.</li> <li><code>contains(class_name)</code> - indicate if <code>class_name</code> is associated with the   element.</li> <li><code>remove(*class_names)</code> - remove the class(es) from the element.</li> <li><code>replace(old_class, new_class)</code> - replace the <code>old_class</code> with <code>new_class</code>.</li> <li><code>toggle(class_name)</code> - add a class if it is absent, or remove a class if it   is present.</li> </ul> <p>Elements that require options (such as the <code>datalist</code>, <code>optgroup</code> and <code>select</code> elements), can have options passed in when they are created:</p> <pre><code>my_select = select_(option(\"apple\", value=1), option(\"pear\"))\n</code></pre> <p>Notice how options can be a tuple of two values (the name and associated value) or just the single name (whose associated value will default to the given name).</p> <p>It's possible to access and manipulate the <code>options</code> of the resulting elements:</p> <pre><code>selected_option = my_select.options.selected\nmy_select.options.remove(0)  # Remove the first option (in position 0).\nmy_select.clear()\nmy_select.options.add(html=\"Orange\")\n</code></pre> <p>Finally, the collection of elements returned by <code>find</code> and <code>children</code> is iterable, indexable and sliceable:</p> <pre><code>for child in my_element.children[10:]:\nprint(child.html)\n</code></pre> <p>Furthermore, four attributes related to all elements contained in the collection can be read (as a list) or set (applied to all contained elements):</p> <ul> <li><code>classes</code> - the list of classes associated with the elements.</li> <li><code>innerHTML</code> - the innerHTML of each element.</li> <li><code>style</code> - a dictionary like object for interacting with CSS style rules.</li> <li><code>value</code> - the <code>value</code> attribute associated with each element.</li> </ul>"},{"location":"api/#pyscriptwhen","title":"<code>pyscript.when</code>","text":"<p>A Python decorator to indicate the decorated function should handle the specified events for selected elements.</p> <p>The decorator takes two parameters:</p> <ul> <li>The <code>event_type</code> should be the name of the   browser event to handle   as a string (e.g. <code>\"click\"</code>).</li> <li>The <code>selector</code> should be a string containing a   valid selector   to indicate the target elements in the DOM whose events of <code>event_type</code> are   of interest.</li> </ul> <p>The following example has a button with an id of <code>my_button</code> and a decorated function that handles <code>click</code> events dispatched by the button.</p> The HTML button<pre><code>&lt;button id=\"my_button\"&gt;Click me!&lt;/button&gt;\n</code></pre> The decorated Python function to handle click events<pre><code>from pyscript import when, display\n@when(\"click\", \"#my_button\")\ndef click_handler(event):\n\"\"\"\n    Event handlers get an event object representing the activity that raised\n    them.\n    \"\"\"\ndisplay(\"I've been clicked!\")\n### Or manually setting handler without a decorator\nwhen(\"click\", \"#my-button\", handler=click_handler)\n</code></pre> <p>This functionality is related to the <code>py-*</code> or <code>mpy-*</code> HTML attributes.</p>"},{"location":"api/#pyscriptwindow","title":"<code>pyscript.window</code>","text":"<p>On the main thread, this object is exactly the same as <code>import js</code> which, in turn, is a proxy of JavaScript's globalThis object.</p> <p>On a worker thread, this object is a proxy for the web page's global window context.</p> <p>Warning</p> <p>The reference for <code>pyscript.window</code> is always a reference to the main thread's global window context.</p> <p>If you're running code in a worker this is not the worker's own global context. A worker's global context is always reachable via <code>import js</code> (the <code>js</code> object being a proxy for the worker's <code>globalThis</code>).</p>"},{"location":"api/#pyscripthtml","title":"<code>pyscript.HTML</code>","text":"<p>A class to wrap generic content and display it as un-escaped HTML on the page.</p> The HTML class<pre><code>&lt;script type=\"mpy\"&gt;\nfrom pyscript import display, HTML\n# Escaped by default:\ndisplay(\"&lt;em&gt;em&lt;/em&gt;\")  # &amp;lt;em&amp;gt;em&amp;lt;/em&amp;gt;\n&lt;/script&gt;\n&lt;script type=\"mpy\"&gt;\nfrom pyscript import display, HTML\n# Un-escaped raw content inserted into the page:\ndisplay(HTML(\"&lt;em&gt;em&lt;/em&gt;\"))  # &lt;em&gt;em&lt;/em&gt;\n&lt;/script&gt;\n</code></pre>"},{"location":"api/#pyscriptrunning_in_worker","title":"<code>pyscript.RUNNING_IN_WORKER</code>","text":"<p>This constant flag is <code>True</code> when the current code is running within a worker. It is <code>False</code> when the code is running within the main thread.</p>"},{"location":"api/#pyscriptwebsocket","title":"<code>pyscript.WebSocket</code>","text":"<p>If a <code>pyscript.fetch</code> results in a call and response HTTP interaction with a web server, the <code>pyscript.Websocket</code> class provides a way to use websockets for two-way sending and receiving of data via a long term connection with a web server.</p> <p>PyScript's implementation, available in both the main thread and a web worker, closely follows the browser's own  WebSocket class.</p> <p>This class accepts the following named arguments:</p> <ul> <li>A <code>url</code> pointing at the ws or wss address. E.g.:   <code>WebSocket(url=\"ws://localhost:5037/\")</code></li> <li>Some <code>protocols</code>, an optional string or a list of strings as   described here.</li> </ul> <p>The <code>WebSocket</code> class also provides these convenient static constants:</p> <ul> <li><code>WebSocket.CONNECTING</code> (<code>0</code>) - the <code>ws.readyState</code> value when a web socket   has just been created.</li> <li><code>WebSocket.OPEN</code> (<code>1</code>) - the <code>ws.readyState</code> value once the socket is open.</li> <li><code>WebSocket.CLOSING</code> (<code>2</code>) - the <code>ws.readyState</code> after <code>ws.close()</code> is   explicitly invoked to stop the connection.</li> <li><code>WebSocket.CLOSED</code> (<code>3</code>) - the <code>ws.readyState</code> once closed.</li> </ul> <p>A <code>WebSocket</code> instance has only 2 methods:</p> <ul> <li><code>ws.send(data)</code> - where <code>data</code> is either a string or a Python buffer,   automatically converted into a JavaScript typed array. This sends data via   the socket to the connected web server.</li> <li><code>ws.close(code=0, reason=\"because\")</code> - which optionally accepts <code>code</code> and   <code>reason</code> as named arguments to signal some specific status or cause for   closing the web socket. Otherwise <code>ws.close()</code> works with the default   standard values.</li> </ul> <p>A <code>WebSocket</code> instance also has the fields that the JavaScript <code>WebSocket</code> instance will have:</p> <ul> <li>binaryType -   the type of binary data being received over the WebSocket connection.</li> <li>bufferedAmount -   a read-only property that returns the number of bytes of data that have been   queued using calls to <code>send()</code> but not yet transmitted to the network.</li> <li>extensions -   a read-only property that returns the extensions selected by the server.</li> <li>protocol -   a read-only property that returns the name of the sub-protocol the server   selected.</li> <li>readyState -   a read-only property that returns the current state of the WebSocket   connection as one of the <code>WebSocket</code> static constants (<code>CONNECTING</code>, <code>OPEN</code>,   etc...).</li> <li>url -   a read-only property that returns the absolute URL of the <code>WebSocket</code>   instance.</li> </ul> <p>A <code>WebSocket</code> instance can have the following listeners. Directly attach handler functions to them. Such functions will always receive a single <code>event</code> object.</p> <ul> <li>onclose -   fired when the <code>WebSocket</code>'s connection is closed.</li> <li>onerror -   fired when the connection is closed due to an error.</li> <li>onmessage -   fired when data is received via the <code>WebSocket</code>. If the <code>event.data</code> is a   JavaScript typed array instead of a string, the reference it will point   directly to a memoryview of the underlying <code>bytearray</code> data.</li> <li>onopen -   fired when the connection is opened.</li> </ul> <p>The following code demonstrates a <code>pyscript.WebSocket</code> in action.</p> <pre><code>&lt;script type=\"mpy\" worker&gt;\nfrom pyscript import WebSocket\ndef onopen(event):\nprint(event.type)\nws.send(\"hello\")\ndef onmessage(event):\nprint(event.type, event.data)\nws.close()\ndef onclose(event):\nprint(event.type)\nws = WebSocket(url=\"ws://localhost:5037/\")\nws.onopen = onopen\nws.onmessage = onmessage\nws.onclose = onclose\n&lt;/script&gt;\n</code></pre> <p>Info</p> <p>It's also possible to pass in any handler functions as named arguments when you instantiate the <code>pyscript.WebSocket</code> class:</p> <pre><code>from pyscript import WebSocket\ndef onmessage(event):\nprint(event.type, event.data)\nws.close()\nws = WebSocket(url=\"ws://example.com/socket\", onmessage=onmessage)\n</code></pre>"},{"location":"api/#pyscriptjs_import","title":"<code>pyscript.js_import</code>","text":"<p>If a JavaScript module is only needed under certain circumstances, we provide an asynchronous way to import packages that were not originally referenced in your configuration.</p> A pyscript.js_import example.<pre><code>&lt;script type=\"py\"&gt;\nfrom pyscript import js_import, window\nescaper, = await js_import(\"https://esm.run/html-escaper\")\n\nwindow.console.log(escaper)\n</code></pre> <p>The <code>js_import</code> call returns an asynchronous tuple containing the JavaScript modules referenced as string arguments.</p>"},{"location":"api/#pyscriptpy_import","title":"<code>pyscript.py_import</code>","text":"<p>Warning</p> <p>This is an experimental feature.</p> <p>Feedback and bug reports are welcome!</p> <p>If you have a lot of Python packages referenced in your configuration, startup performance may be degraded as these are downloaded.</p> <p>If a Python package is only needed under certain circumstances, we provide an asynchronous way to import packages that were not originally referenced in your configuration.</p> A pyscript.py_import example.<pre><code>&lt;script type=\"py\"&gt;\nfrom pyscript import py_import\nmatplotlib, regex, = await py_import(\"matplotlib\", \"regex\")\nprint(matplotlib, regex)\n&lt;/script&gt;\n</code></pre> <p>The <code>py_import</code> call returns an asynchronous tuple containing the Python modules provided by the packages referenced as string arguments.</p>"},{"location":"api/#main-thread-only-features","title":"Main-thread only features","text":""},{"location":"api/#pyscriptpyworker","title":"<code>pyscript.PyWorker</code>","text":"<p>A class used to instantiate a new worker from within Python.</p> <p>Note</p> <p>Sometimes we disambiguate between interpreters through naming conventions (e.g. <code>py</code> or <code>mpy</code>).</p> <p>However, this class is always <code>PyWorker</code> and the desired interpreter  MUST be specified via a <code>type</code> option. Valid values for the type of interpreter are either <code>micropython</code> or <code>pyodide</code>.</p> <p>The following fragments demonstrate how to evaluate the file <code>worker.py</code> on a new worker from within Python.</p> worker.py - the file to run in the worker.<pre><code>from pyscript import RUNNING_IN_WORKER, display, sync\ndisplay(\"Hello World\", target=\"output\", append=True)\n# will log into devtools console\nprint(RUNNING_IN_WORKER)  # True\nprint(\"sleeping\")\nsync.sleep(1)\nprint(\"awake\")\n</code></pre> main.py - starts a new worker in Python.<pre><code>from pyscript import PyWorker\n# type MUST be either `micropython` or `pyodide`\nPyWorker(\"worker.py\", type=\"micropython\")\n</code></pre> The HTML context for the worker.<pre><code>&lt;script type=\"mpy\" src=\"./main.py\"&gt;\n&lt;div id=\"output\"&gt;&lt;/div&gt;  &lt;!-- The display target --&gt;\n</code></pre>"},{"location":"api/#pyscriptworkers","title":"<code>pyscript.workers</code>","text":"<p>The <code>pyscript.workers</code> reference allows Python code in the main thread to easily access named workers (and their exported functionality).</p> <p>For example, the following Pyodide code may be running on a named worker (see the <code>name</code> attribute of the <code>script</code> tag):</p> <pre><code>&lt;script type=\"py\" worker name=\"py-version\"&gt;\nimport sys\ndef version():\nreturn sys.version\n# define what to export to main consumers\n__export__ = [\"version\"]\n&lt;/script&gt;\n</code></pre> <p>While over on the main thread, this fragment of MicroPython will be able to access the worker's <code>version</code> function via the <code>workers</code> reference:</p> <pre><code>&lt;script type=\"mpy\"&gt;\nfrom pyscript import workers\npyworker = await workers[\"py-version\"]\n# print the pyodide version\nprint(await pyworker.version())\n&lt;/script&gt;\n</code></pre> <p>Importantly, the <code>workers</code> reference will NOT provide a list of known workers, but will only <code>await</code> for a reference to a named worker (resolving when the worker is ready). This is because the timing of worker startup is not deterministic.</p> <p>Should you wish to await for all workers on the page at load time, it's possible to loop over matching elements in the document like this:</p> <pre><code>&lt;script type=\"mpy\"&gt;\nfrom pyscript import document, workers\nfor el in document.querySelectorAll(\"[type='py'][worker][name]\"):\nawait workers[el.getAttribute('name')]\n# ... rest of the code\n&lt;/script&gt;\n</code></pre>"},{"location":"api/#worker-only-features","title":"Worker only features","text":""},{"location":"api/#pyscriptsync","title":"<code>pyscript.sync</code>","text":"<p>A function used to pass serializable data from workers to the main thread. </p> <p>Imagine you have this code on the main thread:</p> Python code on the main thread<pre><code>from pyscript import PyWorker\ndef hello(name=\"world\"):\ndisplay(f\"Hello, {name}\")\nworker = PyWorker(\"./worker.py\")\nworker.sync.hello = hello\n</code></pre> <p>In the code on the worker, you can pass data back to handler functions like this:</p> Pass data back to the main thread from a worker<pre><code>from pyscript import sync\nsync.hello(\"PyScript\")\n</code></pre>"},{"location":"api/#html-attributes","title":"HTML attributes","text":"<p>As a convenience, and to ensure backwards compatibility, PyScript allows the use of inline event handlers via custom HTML attributes.</p> <p>Warning</p> <p>This classic pattern of coding (inline event handlers) is no longer considered good practice in web development circles.</p> <p>We include this behaviour for historic reasons, but the folks at Mozilla have a good explanation of why this is currently considered bad practice.</p> <p>These attributes, expressed as <code>py-*</code> or <code>mpy-*</code> attributes of an HTML element, reference the name of a Python function to run when the event is fired. You should replace the <code>*</code> with the actual name of an event (e.g. <code>py-click</code> or <code>mpy-click</code>). This is similar to how all event handlers on elements start with <code>on</code> in standard HTML (e.g. <code>onclick</code>). The rule of thumb is to simply replace <code>on</code> with <code>py-</code> or <code>mpy-</code> and then reference the name of a Python function.</p> A py-click event on an HTML button element.<pre><code>&lt;button py-click=\"handle_click\" id=\"my_button\"&gt;Click me!&lt;/button&gt;\n</code></pre> The related Python function.<pre><code>from pyscript import window\ndef handle_click(event):\n\"\"\"\n    Simply log the click event to the browser's console.\n    \"\"\"\nwindow.console.log(event)    \n</code></pre> <p>Under the hood, the <code>pyscript.when</code> decorator is used to enable this behaviour.</p> <p>Note</p> <p>In earlier versions of PyScript, the value associated with the attribute was simply evaluated by the Python interpreter. This was unsafe: manipulation of the attribute's value could have resulted in the evaluation of arbitrary code.</p> <p>This is why we changed to the current behaviour: just supply the name of the Python function to be evaluated, and PyScript will do this safely.</p>"},{"location":"beginning-pyscript/","title":"Beginning PyScript","text":"<p>PyScript is a platform for running Python in modern web browsers.</p> <p>Create apps with a PyScript development environment: write code, curate the project's assets, and test your application.</p> <p>To distribute a PyScript application, host it on the web, then click on the link to your application. PyScript and the browser do the rest.</p> <p>This page covers these core aspects of PyScript in a beginner friendly manner. We only assume you know how to use a browser and edit text.</p> <p>Note</p> <p>The easiest way to get a PyScript development environment and hosting, is to use pyscript.com in your browser.</p> <p>It is a free service that helps you create new projects from templates, and then edit, preview and deploy your apps with a unique link.</p> <p>While the core features of pyscript.com will always be free, additional paid-for capabilities directly support and sustain the PyScript open source project. Commercial and educational support is also available.</p>"},{"location":"beginning-pyscript/#an-application","title":"An application","text":"<p>All PyScript applications need three things:</p> <ol> <li>An <code>index.html</code> file that is served to your browser.</li> <li>A description of the Python environment in which your application will run.    This is usually specified by a <code>pyscript.json</code> or <code>pyscript.toml</code> file.</li> <li>Python code (usually in a file called something like <code>main.py</code>) that defines    how your application works.</li> </ol> <p>Create these files with your favourite code editor on your local file system. Alternatively, pyscript.com will take away all the pain of organising, previewing and deploying your application.</p> <p>If you're using your local file system, you'll need a way to view your application in your browser. If you already have Python installed on your local machine, serve your files with the following command run from your terminal and in the same directory as your files:</p> <pre><code>python3 -m http.server\n</code></pre> <p>Point your browser at http://localhost:8000. Remember to refresh the page (<code>CTRL-R</code>) to see any updates you may have made.</p> <p>Note</p> <p>If you're using VSCode as your editor, the Live Server extension can be used to reload the page as you edit your files.</p> <p>Alternatively, if you have an account on GitHub you could use VSCode in your browser as a PyScript aware \"CodeSpace\" (just follow the instructions in the README file).</p> <p>If you decide to use pyscript.com (recommended for first steps), once signed in, create a new project by pressing the \"+\" button on the left hand side below the site's logo. You'll be presented with a page containing three columns (listing your files, showing your code and previewing the app). The \"save\" and \"run\" buttons do exactly what you'd expect.</p> <p></p> <p>Let's build a simple PyScript application that translates English \ud83c\uddec\ud83c\udde7 into Pirate \ud83c\udff4\u200d\u2620\ufe0f  speak. In order to do this we'll make use of the arrr library. By building this app you'll be introduced to all the core concepts of PyScript at an introductory level.</p> <p>You can see this application embedded into the page below (try it out!):</p> <p>Let's explore each of the three files that make this app work.</p>"},{"location":"beginning-pyscript/#pyscriptjson","title":"pyscript.json","text":"<p>This file tells PyScript and your browser about various configurable aspects of your application. Put simply, it tells PyScript what it needs in order to run your application. The only thing we need to show is that we require the third party <code>arrr</code> module to do the actual translation.</p> <p>We do this by putting <code>arrr</code> as the single entry in a list of required <code>packages</code>, so the content of <code>pyscript.json</code> looks like this:</p> pyscript.json<pre><code>{\n\"packages\": [\"arrr\"]\n}\n</code></pre>"},{"location":"beginning-pyscript/#indexhtml","title":"index.html","text":"<p>Next we come to the <code>index.html</code> file that is first served to your browser.</p> <p>To start out, we need to tell the browser that this HTML document uses PyScript, and so we create a <code>&lt;script&gt;</code> tag that references the PyScript module in the document's <code>&lt;head&gt;</code> tag:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" /&gt;\n&lt;title&gt;\ud83e\udd9c Polyglot - Piratical PyScript&lt;/title&gt;\n&lt;link rel=\"stylesheet\" href=\"https://pyscript.net/releases/2025.10.3/core.css\"&gt;\n&lt;script type=\"module\" src=\"https://pyscript.net/releases/2025.10.3/core.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;!-- TODO: Fill in our custom application code here... --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Notice that the <code>&lt;body&gt;</code> of the document is empty except for the TODO comment. It's in here that we put standard HTML content to define our user interface, so the <code>&lt;body&gt;</code> now looks like:</p> <pre><code>&lt;body&gt;\n&lt;h1&gt;Polyglot \ud83e\udd9c \ud83d\udcac \ud83c\uddec\ud83c\udde7 \u27a1\ufe0f \ud83c\udff4\u200d\u2620\ufe0f&lt;/h1&gt;\n&lt;p&gt;Translate English into Pirate speak...&lt;/p&gt;\n&lt;input type=\"text\" name=\"english\" id=\"english\" placeholder=\"Type English here...\" /&gt;\n&lt;button py-click=\"translate_english\"&gt;Translate&lt;/button&gt;\n&lt;div id=\"output\"&gt;&lt;/div&gt;\n&lt;script type=\"py\" src=\"./main.py\" config=\"./pyscript.json\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n</code></pre> <p>This fragment of HTML contains the application's header (<code>&lt;h1&gt;</code>), some instructions between the <code>&lt;p&gt;</code> tags, an <code>&lt;input&gt;</code> box for the English text, and a <code>&lt;button&gt;</code> to click to generate the translation. Towards the end there's a <code>&lt;div id=\"output\"&gt;</code> which will contain the resulting pirate speak as the application's output.</p> <p>There's something strange about the <code>&lt;button&gt;</code> tag: it has a <code>py-click</code> attribute with the value <code>translate_english</code>. This is, in fact, the name of a Python function we'll run whenever the button is clicked. Such <code>py-*</code> style attributes are built into PyScript.</p> <p>We put all this together in the <code>script</code> tag at the end of the <code>&lt;body&gt;</code>. This tells the browser we're using PyScript (<code>type=\"py\"</code>), and where PyScript should find the Python source code (<code>src=\"./main.py\"</code>). Finally, we indicate where PyScript should find the configuration (<code>config=\"./pyscript.json\"</code>).</p> <p>In the end, our HTML should look like this:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" /&gt;\n&lt;title&gt;\ud83e\udd9c Polyglot - Piratical PyScript&lt;/title&gt;\n&lt;link rel=\"stylesheet\" href=\"https://pyscript.net/releases/2025.10.3/core.css\"&gt;\n&lt;script type=\"module\" src=\"https://pyscript.net/releases/2025.10.3/core.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Polyglot \ud83e\udd9c \ud83d\udcac \ud83c\uddec\ud83c\udde7 \u27a1\ufe0f \ud83c\udff4\u200d\u2620\ufe0f&lt;/h1&gt;\n&lt;p&gt;Translate English into Pirate speak...&lt;/p&gt;\n&lt;input type=\"text\" id=\"english\" placeholder=\"Type English here...\" /&gt;\n&lt;button py-click=\"translate_english\"&gt;Translate&lt;/button&gt;\n&lt;div id=\"output\"&gt;&lt;/div&gt;\n&lt;script type=\"py\" src=\"./main.py\" config=\"./pyscript.json\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>But this only defines how the user interface should look. To define its behaviour we need to write some Python. Specifically, we need to define the <code>translate_english</code> function, used when the button is clicked.</p>"},{"location":"beginning-pyscript/#mainpy","title":"main.py","text":"<p>The behaviour of the application is defined in <code>main.py</code>. It looks like this:</p> main.py<pre><code>import arrr\nfrom pyscript import document\ndef translate_english(event):\ninput_text = document.querySelector(\"#english\")\nenglish = input_text.value\noutput_div = document.querySelector(\"#output\")\noutput_div.innerText = arrr.translate(english)\n</code></pre> <p>It's not very complicated Python code.</p> <p>On line 1 the <code>arrr</code> module is imported so we can do the actual English to Pirate translation. If we hadn't told PyScript to download the <code>arrr</code> module in our <code>pyscript.json</code> configuration file, this line would cause an error. PyScript has ensured our environment is set up with the expected <code>arrr</code> module.</p> <p>Line 2 imports the <code>document</code> object. The <code>document</code> allows us to reach into the things on the web page defined in <code>index.html</code>.</p> <p>Finally, on line 5 the <code>translate_english</code> function is defined.</p> <p>The <code>translate_english</code> function takes a single parameter called <code>event</code>. This represents the user's click of the button (but which we don't actually use).</p> <p>Inside the body of the function we first get a reference to the <code>input</code> element with the <code>document.querySelector</code> function that takes <code>#english</code> as its parameter (indicating we want the element with the id \"english\"). We assign the result to <code>input_text</code>, then extract the user's <code>english</code> from the <code>input_text</code>'s <code>value</code>. Next, we get a reference called <code>output_div</code> that points to the <code>div</code> element with the id \"output\". Finally, we assign the <code>innerText</code> of the <code>output_div</code> to the result of calling <code>arrr.translate</code> (to actually translate the <code>english</code> to something piratical).</p> <p>That's it!</p>"},{"location":"beginning-pyscript/#sharing-your-app","title":"Sharing your app","text":""},{"location":"beginning-pyscript/#pyscriptcom","title":"PyScript.com","text":"<p>If you're using pyscript.com, you should save all your files and click the \"run\" button. Assuming you've copied the code properly, you should have a fine old time using \"Polyglot \ud83e\udd9c\" to translate English to Pirate-ish.</p> <p>Alternatively, click here to see a working example of this app. Notice that the bottom right hand corner contains a link to view the code on pyscript.com. Why not explore the code, copy it to your own account and change it to your satisfaction?</p>"},{"location":"beginning-pyscript/#from-a-web-server","title":"From a web server","text":"<p>Just host the three files (<code>pyscript.json</code>, <code>index.html</code> and <code>main.py</code>) in the same directory on a static web server somewhere.</p> <p>Clearly, we recommend you use pyscript.com for this, but any static web host will do (for example, GitHub Pages, Amazon's S3, Google Cloud or Microsoft's Azure).</p>"},{"location":"beginning-pyscript/#run-pyscript-offline","title":"Run PyScript Offline","text":"<p>To run PyScript offline, without the need of a CDN or internet connection, read the Run PyScript Offline section of the user guide.</p>"},{"location":"beginning-pyscript/#conclusion","title":"Conclusion","text":"<p>Congratulations!</p> <p>You have just created your first PyScript app. We've explored the core concepts needed to build yet more interesting things of your own.</p> <p>PyScript is extremely powerful, and these beginner steps only just scratch the surface. To learn about PyScript in more depth, check out our user guide or explore our example applications.</p>"},{"location":"conduct/","title":"Code of Conduct","text":"<p>Our code of conduct is based on the Contributor Covenant code of conduct.</p>"},{"location":"conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement as set forth in the repository's Notice.md file. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the project community.</p>"},{"location":"conduct/#reporting-a-violation","title":"Reporting a violation","text":"<p>To report a violation of the Code of Conduct, e-mail conduct@pyscript.net</p>"},{"location":"conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for wanting to contribute to the PyScript project!</p>"},{"location":"contributing/#code-of-conduct","title":"Code of conduct","text":"<p>The PyScript Code of Conduct governs the project and everyone participating in it. By participating, you are expected to uphold this code. Please report unacceptable behavior to the maintainers or administrators as described in that document.</p>"},{"location":"contributing/#ways-to-contribute","title":"Ways to contribute","text":""},{"location":"contributing/#report-bugs","title":"Report bugs","text":"<p>Bugs are tracked on the project issues page.</p> <p>Check first</p> <p>Please check your bug has not already been reported by someone else by searching the existing issues before filing a new one. Once your issue is filed, it will be triaged by another contributor or maintainer. If there are questions raised about your issue, please respond promptly.</p> <ul> <li>Use a clear and descriptive title.</li> <li>Describe the starting context and specific steps needed to reproduce the   problem you have observed. Some of these steps may not be obvious, so please   as much detail as possible.</li> <li>Explain the behaviour you observed, the behaviour you expected, and why this   difference is problematic.</li> <li>Include screenshots if they help make the bug clearer.</li> <li>Include commented example code if that will help recreate the bug.</li> </ul>"},{"location":"contributing/#report-security-issues","title":"Report security issues","text":"<p>If it is not appropriate to submit a security issue using the above process, please e-mail us at security@pyscript.net.</p>"},{"location":"contributing/#ask-questions","title":"Ask questions","text":"<p>If you have questions about the project, using PyScript, or anything else, please ask in the project's discord server.</p>"},{"location":"contributing/#create-resources","title":"Create resources","text":"<p>Folks make all sorts of wonderful things with PyScript.</p> <p>If you have an interesting project, a cool hack, or an innovative way to implement a new capability or feature, please share your work and tell us about it so we can celebrate and amplify your contribution.</p> <ul> <li>Show off your creation at our fortnightly   PyScript FUN   community call on discord.</li> <li>Write up your creation in a blog post.</li> <li>Share it on social media.</li> <li>Create a demo video.</li> <li>Propose a talk about it at a community event.</li> <li>Demonstrate it as a lightning talk at a conference.</li> </ul> <p>Please reach out to us if you'd like advice and feedback.</p>"},{"location":"contributing/#participate","title":"Participate","text":"<p>As an open source project, PyScript has community at its core. In addition to the ways to engage already outlined, you could join our live community calls.</p> <ul> <li>PyScript Community Call</li> <li>weekly on Tuesdays. A coordination call for anyone participating in the   PyScript project.</li> <li>Community Engagement Call</li> <li>weekly on Wednesdays. A non-technical meeting where we coordinate how the   PyScript project engages with, nourishes and grows our wonderful community.</li> <li>PyScript FUN</li> <li>held every two weeks on a Thursday, this call is an informal,   supportive and often humorous \"show and tell\" of community created projects,   hacks, feedback and plugins.</li> </ul> <p>Announcement of connection details is made via the PyScript discord server.</p>"},{"location":"contributing/#technical-contributions","title":"Technical contributions","text":"<p>In addition to working with PyScript, if you would like to contribute to PyScript itself, the following advice should be followed.</p>"},{"location":"contributing/#places-to-start","title":"Places to start","text":"<p>If you're not sure where to begin, we have some suggestions:</p> <ul> <li>Read over our documentation. Are there things missing, or could they be   clearer? Make edits/changes/additions to those documents.</li> <li>Review the open issues. Are they clear? Can you reproduce them? You can   add comments, clarifications, or additions to those issues. If you think you   have an idea of how to address the issue, submit a fix!</li> <li>Look over the open pull requests. Do you have comments or suggestions for   the proposed changes? Add them.</li> <li>Check out the examples. Is there a use case that would be good to have   sample code for? Create an example for it.</li> </ul>"},{"location":"contributing/#set-up-your-development-environment","title":"Set up your development environment","text":"<p>We assume you are familiar with core development practices such as using a code editor, writing Python and/or JavaScript and working with tools and services such as GIT and GitHub.</p> <ul> <li>Create your own fork of the main    PyScript github repository.</li> <li>Clone your fork of PyScript onto your local machine.</li> </ul> <pre><code>git clone https://github.com/&lt;your username&gt;/pyscript\n</code></pre> <ul> <li>Add our original PyScript repository as your <code>upstream</code>.</li> </ul> <pre><code>git remote add upstream https://github.com/pyscript/pyscript.git\n</code></pre> <ul> <li>This allows you to pull the latest changes from the main project.</li> </ul> <pre><code>git pull upstream main\n</code></pre> <ul> <li>Contribute changes using the   GitHub flow   model of coding collaboration.</li> </ul>"},{"location":"contributing/#license-terms-for-contributions","title":"License terms for contributions","text":"<p>PyScrcipt welcomes contributions, suggestions, and feedback. All contributions, suggestions, and feedback you submitted are accepted under the Apache 2.0 license. You represent that if you do not own copyright in the code that you have the authority to submit it under the Apache 2.0 license. All feedback, suggestions, or contributions are not confidential.</p>"},{"location":"contributing/#becoming-a-maintainer","title":"Becoming a maintainer","text":"<p>Contributors are invited to be maintainers of the project by demonstrating good decision making in their contributions, a commitment to the goals of the project, and consistent adherence to the code of conduct. New maintainers are invited by a 3/4 vote of the existing maintainers.</p>"},{"location":"contributing/#trademarks","title":"Trademarks","text":"<p>The Project abides by the Organization's trademark policy.</p>"},{"location":"developers/","title":"Developer Guide","text":"<p>This page explains the technical and practical requirements and processes needed to contribute to PyScript.</p> <p>Info</p> <p>In the following instructions, we assume familiarity with <code>git</code>, GitHub, the command line and other common development concepts, tools and practices.</p> <p>For those who come from a non-Pythonic technical background (for example, you're a JavaScript developer), we will explain Python-isms as we go along so you're contributing with confidence.</p> <p>If you're unsure, or encounter problems, please ask for help on our discord server.</p>"},{"location":"developers/#welcome","title":"Welcome","text":"<p>We are a diverse, inclusive coding community and welcome contributions from anyone irrespective of their background. If you're thinking, \"but they don't mean me\", then we especially mean YOU. Our diversity means you will meet folks in our community who are different to yourself. Therefore, thoughtful contributions made in good faith, and engagement with respect, care and compassion wins every time.</p> <ul> <li>If you're from a background which isn't well-represented in most geeky   groups, get involved - we want to help you make a difference.</li> <li>If you're from a background which is well-represented in most geeky   groups, get involved - we want your help making a difference.</li> <li>If you're worried about not being technical enough, get involved - your   fresh perspective will be invaluable.</li> <li>If you need help with anything, get involved - we welcome questions asked   in good faith, and will move mountains to help.</li> <li>If you're unsure where to start, get involved - we have many ways to   contribute.</li> </ul> <p>All contributors are expected to follow our code of conduct.</p>"},{"location":"developers/#setup","title":"Setup","text":"<p>The following steps create a working development environment for PyScript. It is through this environment that you contribute to PyScript. You can choose between two options for setting up your environment.</p> <p>Danger</p> <p>The following commands work on Unix like operating systems (like MacOS or Linux). If you are a Microsoft Windows user please use the Windows Subsystem for Linux with the following instructions.</p>"},{"location":"developers/#create-a-virtual-environment","title":"Create a virtual environment","text":"<ul> <li> <p>A Python virtual environment    is a computing \"sandbox\" that safely isolates your work. PyScript's   development makes use of various Python based tools, so both   Python and a virtual environment is needed. There are   many tools to help manage these environments, but the standard way to create   a virtual environment is to use this command in your terminal:</p> <pre><code>python3 -m venv my_pyscript_dev_venv\n</code></pre> <p>Warning</p> <p>Replace <code>my_pyscript_dev_venv</code> with a meaningful name for the virtual environment, that works for you.</p> </li> <li> <p>A <code>my_pyscript_dev_venv</code> directory containing the virtual environment's   \"stuff\" is created as a subdirectory of your current directory. Next,   activate the virtual environment to ensure your development activities happen   within the context of the sandbox:</p> <pre><code>source my_pyscript_dev_venv/bin/activate\n</code></pre> </li> <li> <p>The prompt in your terminal will change to include the name of your virtual   environment indicating the sandbox is active. To deactivate the virtual   environment just type the following into your terminal:</p> <pre><code>deactivate\n</code></pre> </li> </ul>"},{"location":"developers/#option-2-create-a-conda-environment","title":"Option 2: Create a conda environment","text":"<p>This option will install Python and NodeJS for you, so you don't need to have them pre-installed on your system.</p> <ul> <li>If you prefer using conda for environment management, you can create a conda environment that includes both Python and NodeJS:</li> <li> <pre><code>conda create --name pyscript python nodejs\nconda activate pyscript\n</code></pre> </li> </ul> <p>!!! warning</p> <p>Replace <code>pyscript</code> with a meaningful name for the conda environment, that works for you.</p> <ul> <li>This creates a new environment with both Python and NodeJS installed. The prompt in your terminal will change to include the name of your conda environment indicating the sandbox is active.</li> <li> <p>To deactivate the conda environment just type the following into your terminal:</p> <pre><code>conda deactivate\n</code></pre> </li> <li> <p>If you don't have conda installed, you can download and install Miniconda, Miniforge, or Anaconda.</p> </li> </ul> <p>Info</p> <p>The rest of the instructions on this page assume you are working in an activated virtual environment for developing PyScript.</p>"},{"location":"developers/#prepare-your-repository","title":"Prepare your repository","text":"<ul> <li>Create a fork   of the   PyScript github repository to   your own GitHub account.</li> <li> <p>Clone   your newly forked version of the PyScript repository onto your   local development machine. For example, use this command in your terminal:</p> <pre><code>git clone https://github.com/&lt;YOUR USERNAME&gt;/pyscript\n</code></pre> <p>Warning</p> <p>In the URL for the forked PyScript repository, remember to replace <code>&lt;YOUR USERNAME&gt;</code> with your actual GitHub username.</p> <p>Tip</p> <p>To help explain steps, we will use <code>git</code> commands to be typed into your terminal / command line.</p> <p>The equivalent of these commands could be achieved through other means (such as GitHub's desktop client). How these alternatives work is beyond the scope of this document.</p> </li> <li> <p>Change into the root directory of your newly cloned <code>pyscript</code> repository:</p> <pre><code>cd pyscript\n</code></pre> </li> <li> <p>Add the original PyScript repository as your <code>upstream</code> to allow you to keep   your own fork up-to-date with the latest changes:</p> <pre><code>git remote add upstream https://github.com/pyscript/pyscript.git\n</code></pre> </li> <li> <p>If the above fails, try this alternative:</p> <pre><code>git remote remove upstream\ngit remote add upstream git@github.com:pyscript/pyscript.git\n</code></pre> </li> <li> <p>Pull in the latest changes from the main <code>upstream</code> PyScript repository:</p> <pre><code>git pull upstream main\n</code></pre> </li> <li> <p>Pyscript uses a <code>Makefile</code> to automate the most common development tasks. In   your terminal, type <code>make</code> to see what it can do. You should see something   like this:</p> <pre><code>There is no default Makefile target right now. Try:\n\nmake setup - check your environment and install the dependencies.\nmake clean - clean up auto-generated assets.\nmake build - build PyScript.\nmake precommit-check - run the precommit checks (run eslint).\nmake test-integration - run all integration tests sequentially.\nmake fmt - format the code.\nmake fmt-check - check the code formatting.\n</code></pre> </li> </ul>"},{"location":"developers/#install-dependencies","title":"Install dependencies","text":"<ul> <li> <p>To install the required software dependencies for working on PyScript, in   your terminal type:</p> <pre><code>make setup\n</code></pre> </li> <li> <p>Updates from <code>npm</code> and then <code>pip</code> will scroll past telling you about   their progress installing the required packages.</p> <p>Warning</p> <p>The <code>setup</code> process checks the versions of Python, node and npm. If you encounter a failure at this point, it's probably because one of these pre-requisits is out of date on your system. Please update!</p> </li> </ul>"},{"location":"developers/#check-code","title":"Check code","text":"<ul> <li> <p>To ensure consistency of code layout we use tools to both reformat and check   the code.</p> </li> <li> <p>To ensure your code is formatted correctly:</p> <pre><code>make fmt\n</code></pre> </li> <li> <p>To check your code is formatted correctly:</p> <pre><code>make fmt-check\n</code></pre> </li> <li> <p>Finally, as part of the automated workflow for contributing   pull requests   pre-commit checks the source code. If this fails revise your PR. To run   pre-commit checks locally (before creating the PR):</p> <pre><code>make precommit-check\n</code></pre> <p>This may also revise your code formatting. Re-run <code>make precommit-check</code> to ensure this is the case.</p> </li> </ul>"},{"location":"developers/#build-pyscript","title":"Build PyScript","text":"<ul> <li> <p>To turn the JavaScript source code found in the <code>pyscript.core</code> directory   into a bundled up module ready for the browser, type:</p> <pre><code>make build\n</code></pre> <p>The resulting assets will be in the <code>pyscript.core/dist</code> directory.</p> </li> </ul>"},{"location":"developers/#run-the-tests","title":"Run the tests","text":"<ul> <li> <p>The integration tests for PyScript are started with:</p> <pre><code>make test\n</code></pre> <p>(This essentially runs the <code>npm run test:integration</code> command in the right place. This is defined in PyScript's <code>package.json</code> file.)</p> <p>Tests are found in the <code>core/tests</code> directory. These are organised into three locations:</p> <ol> <li><code>python</code> - the Python based test suite to exercise Python code    within PyScript.</li> <li><code>javascript</code> - JavaScript tests to exercise PyScript itself, in the    browser.</li> <li><code>manual</code> - containing tests to run manually in a browser, due to the    complex nature of the tests.</li> </ol> <p>We use Playwright to automate the running of the Python and JavaScript test suites. We use uPyTest as a test framework for the Python test suite. uPyTest is a \"PyTest inspired\" framework for running tests in the browser on both MicroPython and Pyodide.</p> <p>The automated (Playwright) tests are specified in the <code>tests/integration.spec.js</code> file.</p> </li> </ul>"},{"location":"developers/#documentation","title":"Documentation","text":"<ul> <li> <p>Documentation for PyScript (i.e. what you're reading right now), is found   in a separate repository:   https://github.com/pyscript/docs</p> </li> <li> <p>The documentation's <code>README</code> file contains instructions for setting up a   development environment and contributing.</p> </li> </ul>"},{"location":"developers/#contributing","title":"Contributing","text":"<ul> <li> <p>We have suggestions for how to contribute to PyScript. Take   a read and dive in.</p> </li> <li> <p>Please make sure you discuss potential contributions before you put in   work. We don#t want folks to waste their time or re-invent the wheel.</p> </li> <li> <p>Technical discussions happen on our discord server   and in the   discussions section of   our GitHub repository.</p> </li> <li> <p>Every Tuesday is a technical community video call,   the details of which are posted onto   the discord server. Face to face technical discussions happen here.</p> </li> <li> <p>Every Wednesday is a non-technical community engagement call,   in which we organise how to engage with, grow and nourish our community.</p> </li> <li> <p>Every two weeks, on a Thursday, is a   PyScript FUN call,   the details of which   are also posted to discord. Project show-and-tells, cool hacks, new features   and a generally humorous and creative time is had by all.</p> </li> </ul>"},{"location":"examples/","title":"Example applications","text":"<p>A curated list of example applications that demonstrate various features of PyScript can be found on PyScript.com.</p> <p>The examples are (links take you to the code):</p>"},{"location":"examples/#simple","title":"Simple:","text":"<ul> <li>Hello world<ul> <li>uses included datetime module. No additional packages.</li> </ul> </li> <li>WebGL Icosahedron<ul> <li>uses three.js imported as a module in toml)</li> </ul> </li> <li>Pandas dataframe fun<ul> <li>uses pandas from pypi</li> </ul> </li> <li>Matplotlib example<ul> <li>uses matplotlib</li> </ul> </li> <li>Todo<ul> <li>uses pyweb. No additional packages.</li> </ul> </li> <li>Tic Tac Toe<ul> <li>uses pyweb. No additional packages.</li> </ul> </li> <li>Pyscript Jokes<ul> <li>uses pyweb and pyjokes</li> </ul> </li> <li>D3 visualization<ul> <li>uses d3</li> <li>mixes javascript code with python code. imports d3 from javascript.</li> </ul> </li> <li>Import antigravity<ul> <li>uses svg simply</li> </ul> </li> <li>API proxy tutorial<ul> <li>uses fetch</li> </ul> </li> <li>API proxy and secrets tutorial<ul> <li>uses fetch</li> </ul> </li> </ul>"},{"location":"examples/#more-complex","title":"More complex:","text":"<ul> <li>Numpy fractals<ul> <li>uses numpy, sympy from pypi</li> </ul> </li> <li>Simple slider panel<ul> <li>uses Panel and Bokeh from pypi and loads in index.html</li> </ul> </li> <li>Streaming data panel<ul> <li>uses  Panel, Bokeh numpy, pandas from pypi</li> <li>loads bokeh, panel, tabulator in index.html</li> </ul> </li> <li>KMeans in a panel</li> <li>uses Bokeh, altair, numpy, pandas, scikit-learn, Panel from pypi<ul> <li>loads panel, bootstrap, vega, tabulator, bokeh in index.html</li> </ul> </li> <li>New York Taxi panel (WebGL)<ul> <li>uses a mixture of pypi and direct load packages in index.html</li> <li>Bokeh, numpy, pandas, Panel, deck-gl</li> <li>deckGL, bokeh are loaded directly in index.html</li> </ul> </li> <li>Folium geographical data<ul> <li>uses folium, pandas  from pypi</li> </ul> </li> <li>Bokeh data plotting<ul> <li>uses pandas, Bokeh, xyzservices from pypi</li> </ul> </li> <li>Altair data plotting<ul> <li>uses altair, pandas, vega_datasets from pypi</li> </ul> </li> <li>Panel and hyplot<ul> <li>uses Bokeh, Panel, markdown-it-py, numpy, pandas, hvplot, pyodide-http a fetch library.</li> <li>bokeh and panel are loaded in the index.html</li> </ul> </li> </ul> <p>Notes:  - No micropython examples - all are pyodide  - No worker examples</p>"},{"location":"faq/","title":"FAQ","text":"<p>This page contains the most common questions and \"gotchas\" asked on our Discord server, in our community calls, or within our community.</p> <p>There are two major areas we'd like to explore: common errors and helpful hints.</p>"},{"location":"faq/#common-errors","title":"Common errors","text":""},{"location":"faq/#reading-errors","title":"Reading errors","text":"<p>If your application doesn't run, and you don't see any error messages on the page, you should check your browser's console.</p> <p>When reading an error message, the easy way to find out what's going on, most of the time, is to read the last line of the error.</p> A Pyodide error.<pre><code>Traceback (most recent call last):\n  File \"/lib/python311.zip/_pyodide/_base.py\", line 501, in eval_code\n    .run(globals, locals)\n     ^^^^^^^^^^^^^^^^^^^^\n  File \"/lib/python311.zip/_pyodide/_base.py\", line 339, in run\n    coroutine = eval(self.code, globals, locals)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"&lt;exec&gt;\", line 1, in &lt;module&gt;\nNameError: name 'failure' is not defined\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n</code></pre> A MicroPython error.<pre><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'failure' isn't defined\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n</code></pre> <p>In both examples, the code created a <code>NameError</code> because the object with the name <code>failure</code> did not exist. Everything above the error message is potentially useful technical detail.</p> <p>With this context in mind, these are the most common errors users of PyScript encounter.</p>"},{"location":"faq/#sharedarraybuffer","title":"SharedArrayBuffer","text":"<p>This is the first and most common error users may encounter with PyScript:</p> <p>Failure</p> <p>Your application doesn't run and in your browser's console you see this message:</p> <pre><code>Unable to use `window` or `document` -&gt; https://docs.pyscript.net/latest/faq/#sharedarraybuffer\n</code></pre>"},{"location":"faq/#when","title":"When","text":"<p>This happens when you're unable to access objects in the main thread (<code>window</code> and <code>document</code>) from code running in a web worker.</p> <p>This error happens because the server delivering your PyScript application is incorrectly configured or a <code>service-worker</code> attribute has not been used in your <code>script</code> element.</p> <p>Specifically, one of the following three problem situations applies to your code:</p> <ul> <li>Because of the way your web server is configured, the browser limits the use   of a technology called \"Atomics\" (you don't need to know how it works, just   that it may be limited by the browser). If there is a <code>worker</code> attribute in   your <code>script</code> element, and your Python code uses the <code>window</code> or <code>document</code>   objects (that actually exist on the main thread), then the browser limitation   on Atomics will cause the failure, unless you reconfigure your server.</li> <li>There is a <code>&lt;script type=\"py-editor\"&gt;</code> (that must always use a worker behind   the scenes) and no fallback has been provided via a <code>service-worker</code>   attribute on that element.</li> <li>There is an explicit <code>PyWorker</code> or <code>MPWorker</code> instance bootstrapping   somewhere in your code and no <code>service_worker</code> fallback has been provided.</li> </ul> <p>All these cases have been documented with code examples and possible solutions in our section on web workers.</p>"},{"location":"faq/#why","title":"Why","text":"<p>The only way for <code>document.getElementById('some-id').value</code> to work in a worker is to use these two JavaScript primitives:</p> <ul> <li>SharedArrayBuffer,     to allow multiple threads to read and / or write into a chunk of shared     memory.</li> <li>Atomics,     to both <code>wait(sab, index)</code> (<code>sab</code> is a <code>SharedArrayBuffer</code>) and     <code>notify(sab, index)</code> to unlock the awaiting thread.</li> </ul> <p>While a worker waits for an operation on main to happen, it is not using the CPU. It idles until the referenced index of the shared buffer changes, effectively never blocking the main thread while still pausing its own execution until the buffer's index is changed.</p> <p>As overwhelming or complicated as this might sound, these two fundamental primitives make main \u2194 worker interoperability an absolute wonder in term of developer experience. Therefore, we encourage folks to prefer using workers over running Python in the main thread. This is especially so when using Pyodide related projects, because of its heavier bootstrap or computation requirements. Using workers ensures the main thread (and thus, the user interface) remains unblocked.</p> <p>Unfortunately, we can patch, polyfill, or workaround, these primitives but we cannot change their intrinsic nature and limitations defined by web standards. However, there are various solutions for working around such limitations. Please read our web workers section to learn more.</p>"},{"location":"faq/#borrowed-proxy","title":"Borrowed proxy","text":"<p>This is another common error that happens with listeners, timers or in any other situation where a Python callback is lazily invoked from JavaScript:</p> <p>Failure</p> <p>Your application doesn't run and in your browser's console you see this message:</p> <pre><code>Uncaught Error: This borrowed proxy was automatically destroyed at the end of a function call.\nTry using create_proxy or create_once_callable.\nFor more information about the cause of this error, use `pyodide.setDebug(true)`\n</code></pre>"},{"location":"faq/#when_1","title":"When","text":"<p>This error happens when using Pyodide as the interpreter on the main thread, and when a bare Python callable/function has been passed into JavaScript as a callback handler:</p> An expired borrowed proxy example, with Pyodide on the main thread.<pre><code>import js\n# will throw the error\njs.setTimeout(lambda msg: print(msg), 1000, \"FAIL\")\n</code></pre> <p>The garbage collector immediately cleans up the Python function once it is passed into the JavaScript context. Clearly, for the Python function to work as a callback at some time in the future, it should NOT be garbage collected and hence the error message.</p> <p>Info</p> <p>This error does not happen if the code is executed in a worker and the  JavaScript reference comes from the main thread:</p> Code running on Pyodide in a worker has no borrowed proxy issue.<pre><code>from pyscript import window\nwindow.setTimeout(lambda x: print(x), 1000, \"OK\")\n</code></pre> <p>Proxy objects (i.e. how Python objects appear to JavaScript, and vice versa) cannot be communicated between a worker and the main thread.</p> <p>Behind the scenes, PyScript ensures references are maintained between workers and the main thread. It means Python functions in a worker are actually represented by JavaScript proxy objects in the main thread.</p> <p>As a result, such worker based Python functions are therefore not bare Python functions, but already wrapped in a managed JavaScript proxy, thus avoiding the borrowed proxy problem.</p> <p>If you encounter this problem you have two possible solutions:</p> <ol> <li>Manually wrap such functions with a call to    <code>pyscript.ffi.create_proxy</code>.</li> <li>Set the    <code>experimental_create_proxy = \"auto\"</code>    flag in your application's settings. This flag intercepts Python objects    passed into a JavaScript callback and ensures an automatic and sensible    memory management operation via the JavaScript garbage collector.</li> </ol> <p>Note</p> <p>The FinalizationRegistry is the browser feature used to make this so.</p> <p>By default, it is not observable and it is not possible to predict when it will free, and hence destroy, retained Python proxy objects. As a result, memory consumption might be slightly higher than when manually using <code>create_proxy</code>. However, the JavaScript engine is responsible for memory consumption, and will cause the finalization registry to free all retained proxies, should memory consumption become too high.</p>"},{"location":"faq/#why_1","title":"Why","text":"<p>PyScript's interpreters (Pyodide and MicroPython) both have their own garbage collector for automatic memory management. When references to Python objects are passed to JavaScript via the FFI, the Python interpreters cannot guarantee such references will ever be freed by JavaScript's own garbage collector. They may even lose control over the reference since there's no infallible way to know when such objects won't be needed by JavaScript.</p> <p>One solution is to expect users to explicitly create and destroy such proxy objects themselves. But this manual memory management makes automatic memory management pointless while raising the possibility of dead references (where the user explicitly destroys a Python object that's still alive in the JavaScript context). Put simply, this is a difficult situation.</p> <p>Pyodide provides ffi.wrappers to help with many of the common cases, and PyScript, through the <code>experimental_create_proxy = \"auto\"</code> configuration option, automates memory management via the <code>FinalizationRegistry</code> described above.</p>"},{"location":"faq/#python-packages","title":"Python packages","text":"<p>Sometimes Python packages, specified via the <code>packages</code> configuration setting don't work with PyScript's Python interpreter.</p> <p>Failure</p> <p>You are using Pyodide.</p> <p>Your application doesn't run and in your browser's console you see this message:</p> <pre><code>ValueError: Can't find a pure Python 3 wheel for: 'package_name'\n</code></pre> <p>Failure</p> <p>You are using MicroPython.</p> <p>Your application doesn't run and in your browser's console you see this message:</p> <pre><code>Cross-Origin Request Blocked: The Same Origin Policy disallows reading the\nremote resource at https://micropython.org/pi/v2/package/py/package_name/latest.json.\n(Reason: CORS header \u2018Access-Control-Allow-Origin\u2019 missing).\nStatus code: 404.\n</code></pre>"},{"location":"faq/#when_2","title":"When","text":"<p>This is a complicated problem, but the summary is:</p> <ul> <li>Check you have used the correct name for the package you want to use.   This is a remarkably common mistake to make: let's just check. :-)</li> <li>In Pyodide, the error indicates that the package you are trying to   install has some part of it written in C, C++ or Rust. These languages are   compiled, and the package has not yet been compiled for web assembly. Our   friends in the Pyodide project and the   Python packaging authority are working   together to ensure web assembly is a default target for compilation. Until   such time, we suggest you follow   Pyodide's own guidance   to overcome this situation.</li> <li>In MicroPython, the package you want to use has not been ported into the   <code>micropython-lib</code> package repository.   If you want to use a pure Python package with MicroPython, use the   files configuration option to manually   copy the package onto the file system, or use a URL to reference the package.</li> </ul> <p>For hints and tips about packaging related aspects of PyScript read the packaging pointers section of this FAQ.</p>"},{"location":"faq/#why_2","title":"Why","text":"<p>Put simply, Pyodide and MicroPython are different Python interpreters, and both are running in a web assembly environment. Packages built for Pyodide may not work for MicroPython, and vice versa. Furthermore, if a package contains compiled code, it may not yet have been natively compiled for web assembly.</p> <p>If the package you want to use is written in a version of Python that both Pyodide and MicroPython support (there are subtle differences between the interpreters), then you should be able to use the package so long as you are able to get it into the Python path via configuration (see above).</p> <p>Currently, MicroPython cannot expose modules that require native compilation, but PyScript is working with the MicroPython team to provide different builds of MicroPython that include commonly requested packages (e.g. MicroPython's version of <code>numpy</code> or <code>sqlite</code>).</p> <p>Warning</p> <p>Depending on the complexity of the project, it may be hard to seamlessly make a 1:1 port from a Pyodide code base to MicroPython.</p> <p>MicroPython has comprehensive documentation to explain the differences between itself and \"regular\" CPython (i.e. the version of Python Pyodide provides).</p>"},{"location":"faq/#javascript-modules","title":"JavaScript modules","text":"<p>When using JavaScript modules with PyScript you may encounter the following errors:</p> <p>Failure</p> <p>Uncaught SyntaxError: The requested module './library.js' does not provide an export named 'default'</p> <p>Failure</p> <p>Uncaught SyntaxError: The requested module './library.js' does not provide an export named 'util'</p>"},{"location":"faq/#when_3","title":"When","text":"<p>These errors happen because the JavaScript module you are trying to use is not written as a standards-compliant JavaScript module.</p> <p>Happily, to solve this issue various content delivery networks (CDNs) provide a way to automatically deliver standard ESM (aka: ECMAScript Modules). The one we recommend is esm.run.</p> An example of esm.run<pre><code>&lt;mpy-config&gt;\n[js_modules.main]\n\"https://esm.run/d3\" = \"d3\"\n&lt;/mpy-config&gt;\n&lt;script type=\"mpy\"&gt;\nfrom pyscript.js_modules import d3\n&lt;/script&gt;\n</code></pre> <p>Alternatively, ensure any JavaScript code you reference uses <code>export ...</code> or ask for an <code>.mjs</code> version of the code. All the various options and technical considerations surrounding the use of JavaScript modules in PyScript are covered in our user guide.</p>"},{"location":"faq/#why_3","title":"Why","text":"<p>Even though the standard for JavaScript modules has existed since 2015, many old and new libraries still produce files that are incompatible with such modern and idiomatic standards.</p> <p>This isn't so much a technical problem, as a human problem as folks learn to use the new standard and migrate old code away from previous and now obsolete standards.</p> <p>While such legacy code exists, be aware that JavaScript code may require special care.</p>"},{"location":"faq/#possible-deadlock","title":"Possible deadlock","text":"<p>Users may encounter an error message similar to the following:</p> <p>Failure</p> <pre><code>\ud83d\udc80\ud83d\udd12 - Possible deadlock if proxy.xyz(...args) is awaited\n</code></pre>"},{"location":"faq/#when_4","title":"When","text":"<p>This error happens when your code on a worker and in the main thread are in a deadlock. Put simply, neither fragment of code can proceed without waiting for the other.</p>"},{"location":"faq/#why_4","title":"Why","text":"<p>Let's assume a worker script contains the following Python code:</p> worker: a deadlock example<pre><code>from pyscript import sync\nsync.worker_task = lambda: print('\ud83d\udd25 this is fine \ud83d\udd25')\n# deadlock \ud83d\udc80\ud83d\udd12\nsync.main_task()\n</code></pre> <p>On the main thread, let's instead assume this code:</p> main: a deadlock example<pre><code>&lt;script type=\"mpy\"&gt;\nfrom pyscript import PyWorker\ndef async main_task():\n# deadlock \ud83d\udc80\ud83d\udd12\nawait pw.sync.worker_task()\npw = PyWorker(\"./worker.py\", {\"type\": \"pyodide\"})\npw.sync.main_task = main_task\n&lt;/script&gt;\n</code></pre> <p>When the worker bootstraps and calls <code>sync.main_task()</code> on the main thread, it blocks until the result of this call is returned. Hence it cannot respond to anything at all. However, in the code on the main thread, the <code>sync.worker_task()</code> in the worker is called, but the worker is blocked! Now the code on both the main thread and worker are mutually blocked and waiting on each other. We are in a classic  deadlock situation.</p> <p>The moral of the story? Don't create such circular deadlocks!</p> <p>How?</p> <p>The mutually blocking calls cause the deadlock, so simply don't block.</p> <p>For example, on the main thread, let's instead assume this code:</p> main: avoiding deadlocks<pre><code>&lt;script type=\"mpy\"&gt;\nfrom pyscript import window, PyWorker\nasync def main_task():\n# do not await the worker,\n# just schedule it for later (as resolved)\nwindow.Promise.resolve(pw.sync.worker_task())\npw = PyWorker(\"./worker.py\", {\"type\": \"pyodide\"})\npw.sync.main_task = main_task\n&lt;/script&gt;\n</code></pre> <p>By scheduling the call to the worker (rather than awaiting it), it's possible for the main thread to call functions defined in the worker in a non-blocking manner, thus allowing the worker to also work in an unblocked manner and react to such calls. We have resolved the mutual deadlock.</p>"},{"location":"faq/#typeerror-cryptorandomuuid-is-not-a-function","title":"TypeError: crypto.randomUUID is not a function","text":"<p>If PyScript fails to start and you look in the browser console, you may find the following error:</p> <p>Failure</p> <pre><code>main.js:43 Uncaught TypeError: crypto.randomUUID is not a function\n    at main.js:43:26\n</code></pre>"},{"location":"faq/#when_5","title":"When","text":"<p>This happens because PyScript uses the <code>crypto.randomUUID</code> function, and the web page isn't served correctly.</p>"},{"location":"faq/#why_5","title":"Why","text":"<p>This error is created by the browser because <code>crypto.randomUUID</code> requires a secure context or localhost to use the latest web standards that are part of PyScript's core (such as <code>crypto.randomUUID</code>).</p> <p>Put simply, your code should be served from a domain secured with TLS (i.e. the domain name starts with <code>https</code> - use a service like let's encrypt to address this) or from <code>localhost</code> if developing and viewing your site on your development machine.</p> <p>This is something PyScript can't fix. Rather, it's how the web works and you should always ensure your code is served in a secure manner.</p>"},{"location":"faq/#helpful-hints","title":"Helpful hints","text":"<p>This section contains common hacks or hints to make using PyScript easier.</p> <p>Note</p> <p>We have an absolutely lovely PyScript contributor called Jeff Glass who maintains an exceptional blog full of PyScript recipes with even more use cases, hints, tips and solutions. Jeff also has a wonderful YouTube channel full of very engaging PyScript related content.</p> <p>If you cannot find what you are looking for here, please check Jeff's blog as it's likely he's probably covered something close to the situation in which you find yourself.</p> <p>Of course, if ever you meet Jeff in person, please buy him a beer and remember to say a big \"thank you\". \ud83c\udf7b</p>"},{"location":"faq/#pyscript-latest","title":"PyScript <code>latest</code>","text":"<p>PyScript follows the CalVer convention for version numbering.</p> <p>Put simply, it means each version is numbered according to when, in the calendar, it was released. For instance, version <code>2024.4.2</code> was the second release in the month of April in the year 2024 (not the release on the 2nd of April but the second release in April).</p> <p>It used to be possible to reference PyScript via a version called <code>latest</code>, which would guarantee you always got the latest release.</p> <p>However, at the end of 2023, we decided to stop supporting <code>latest</code> as a way to reference PyScript. We did this for two broad reasons:</p> <ol> <li>In the autumn of 2023, we release a completely updated version of PyScript    with some breaking changes. Folks who wrote for the old version, yet still    referenced <code>latest</code>, found their applications broke. We want to avoid this    at all costs.</li> <li>Our release cadence is more regular, with around two or three releases a    month. Having transitioned to the new version of PyScript, we aim to avoid    breaking changes. However, we are refining and adding features as we adapt    to our users' invaluable feedback.</li> </ol> <p>Therefore, pinning your app's version of PyScript to a specific release (rather than <code>latest</code>) ensures you get exactly the version of PyScript you used when writing your code.</p> <p>However, as we continue to develop PyScript it is possible to get our latest development version of PyScript via <code>npm</code> and we could (should there be enough interest) deliver our work-in-progress via a CDN's \"canary\" or \"development\" channel. We do not guarantee the stability of such versions of PyScript, so never use them in production, and our documentation may not reflect the development version.</p> <p>If you require the development version of PyScript, these are the URLs to use:</p> PyScript development. \u26a0\ufe0f\u26a0\ufe0f\u26a0\ufe0f WARNING: HANDLE WITH CARE! \u26a0\ufe0f\u26a0\ufe0f\u26a0\ufe0f<pre><code>&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@pyscript/core/dist/core.css\"&gt;\n&lt;script type=\"module\" src=\"https://cdn.jsdelivr.net/npm/@pyscript/core/dist/core.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Warning</p> <p>Do not use shorter urls or other CDNs.</p> <p>PyScript needs both the correct headers to use workers and to find its own assets at runtime. Other CDN links might result into a broken experience.</p>"},{"location":"faq/#workers-via-javascript","title":"Workers via JavaScript","text":"<p>Sometimes you want to start a Pyodide or MicroPython web worker from JavaScript.</p> <p>Here's how:</p> Starting a PyScript worker from JavaScript.<pre><code>&lt;script type=\"module\"&gt;\n// use sourceMap for @pyscript/core or change to a CDN\nimport {\nPyWorker, // Pyodide Worker\nMPWorker  // MicroPython Worker\n} from '@pyscript/core';\nconst worker = await MPWorker(\n// Python code to execute\n'./micro.py',\n// optional details or config with flags\n{ config: { sync_main_only: true } }\n//          ^ just as example ^\n);\n// \"heavy computation\"\nawait worker.sync.doStuff();\n// kill the worker when/if needed\nworker.terminate();\n&lt;/script&gt;\n</code></pre> micro.py<pre><code>from pyscript import sync\ndef do_stuff():\nprint(\"heavy computation\")\n# Note: this reference is awaited in the JavaScript code.\nsync.doStuff = do_stuff\n</code></pre>"},{"location":"faq/#javascript-classnew","title":"JavaScript <code>Class.new()</code>","text":"<p>When using Python to instantiate a class defined in JavaScript, one needs to use the class's <code>new()</code> method, rather than just using <code>Class()</code> (as in Python).</p> <p>Why?</p> <p>The reason is technical, related to JavaScript's history and its relatively poor introspection capabilities:</p> <ul> <li>In JavaScript, <code>typeof function () {}</code> and <code>typeof class {}</code> produce the   same outcome: <code>function</code>. This makes it very hard to disambiguate the   intent of the caller as both are valid, JavaScript used to use   <code>function</code> (rather than <code>class</code>) to instantiate objects, and the class you're   using may not use the modern, <code>class</code> based, idiom.</li> <li>In the FFI, the JavaScript proxy has traps to intercept the use of the   <code>apply</code> and <code>construct</code> methods used during instantiation. However, because   of the previous point, it's not possible to be sure that <code>apply</code> is meant to   <code>construct</code> an instance or call a function.</li> <li>Unlike Python, just invoking a <code>Class()</code> in JavaScript (without   the <code>new</code> operator)   throws an error.</li> <li>Using <code>new Class()</code> is invalid syntax in Python. So there is still a need to   somehow disambiguate the intent to call a function or instantiate a class.</li> <li>Making use of the capitalized-name-for-classes convention is brittle because   when JavaScript code is minified the class name can sometimes change.</li> <li>This leaves our convention of <code>Class.new()</code> to explicitly signal the intent   to instantiate a JavaScript class. While not ideal it is clear and   unambiguous.</li> </ul>"},{"location":"faq/#pyscript-events","title":"PyScript events","text":"<p>PyScript uses hooks during the lifecycle of the application to facilitate the creation of plugins.</p> <p>Beside hooks, PyScript also dispatches events at specific moments in the lifecycle of the app, so users can react to changes in state:</p>"},{"location":"faq/#mpyready","title":"m/py:ready","text":"<p>Both the <code>mpy:ready</code> and <code>py:ready</code> events are dispatched for every PyScript related element found on the page. This includes <code>&lt;script type=\"py\"&gt;</code>, <code>&lt;py-script&gt;</code> or any MicroPython/<code>mpy</code> counterpart.</p> <p>The <code>m/py:ready</code> events dispatch immediately before the code is executed, but after the interpreter is bootstrapped.</p> A py:ready example.<pre><code>&lt;script&gt;\naddEventListener(\"py:ready\", () =&gt; {\n// show running for an instance\nconst status = document.getElementById(\"status\");\nstatus.textContent = 'running';\n});\n&lt;/script&gt;\n&lt;!-- show bootstrapping right away --&gt;\n&lt;div id=\"status\"&gt;bootstrapping&lt;/div&gt;\n&lt;script type=\"py\" worker&gt;\nfrom pyscript import document\n# show done after running\nstatus = document.getElementById(\"status\")\nstatus.textContent = \"done\"\n&lt;/script&gt;\n</code></pre> <p>A classic use case for this event is to recreate the \"starting up\" spinner that used to be displayed when PyScript bootstrapped. Just show the spinner first, then close it once <code>py:ready</code> is triggered!</p> <p>Warning</p> <p>If using Pyodide on the main thread, the UI will block until Pyodide has finished bootstrapping. The \"starting up\" spinner won't work unless Pyodide is started on a worker instead.</p>"},{"location":"faq/#mpydone","title":"m/py:done","text":"<p>The <code>mpy:done</code> and <code>py:done</code> events dispatch after the either the synchronous or asynchronous code has finished execution.</p> A py:done example.<pre><code>&lt;script&gt;\naddEventListener(\"py:ready\", () =&gt; {\n// show running for an instance\nconst status = document.getElementById(\"status\");\nstatus.textContent = 'running';\n});\naddEventListener(\"py:done\", () =&gt; {\n// show done after logging \"Hello \ud83d\udc4b\"\nconst status = document.getElementById(\"status\");\nstatus.textContent = 'done';\n});\n&lt;/script&gt;\n&lt;!-- show bootstrapping right away --&gt;\n&lt;div id=\"status\"&gt;bootstrapping&lt;/div&gt;\n&lt;script type=\"py\" worker&gt;\nprint(\"Hello \ud83d\udc4b\")\n&lt;/script&gt;\n</code></pre> <p>Warning</p> <p>If <code>async</code> code contains an infinite loop or some orchestration that keeps it running forever, then these events may never trigger because the code never really finishes.</p>"},{"location":"faq/#pyall-done","title":"py:all-done","text":"<p>The <code>py:all-done</code> event dispatches when all code is finished executing.</p> <p>This event is special because it depends upon all the MicroPython and Pyodide scripts found on the page, no matter the interpreter.</p> <p>In this example, MicroPython waves before Pyodide before the <code>\"everything is done\"</code> message is written to the browser's console. </p> A py:all-done example.<pre><code>&lt;script&gt;\naddEventListener(\"py:all-done\", () =&gt; {\nconsole.log(\"everything is done\");\n});\n&lt;/script&gt;\n&lt;script type=\"mpy\" worker&gt;\nprint(\"MicroPython \ud83d\udc4b\")\n&lt;/script&gt;\n&lt;script type=\"py\" worker&gt;\nprint(\"Pyodide \ud83d\udc4b\")\n&lt;/script&gt;\n</code></pre>"},{"location":"faq/#mpyprogress","title":"m/py:progress","text":"<p>The <code>py:progress</code> or <code>mpy:progress</code> event triggers on the main thread during interpreter bootstrap (no matter if your code is running on main or in a worker).</p> <p>The received <code>event.detail</code> is a string that indicates operations between <code>Loading {what}</code> and <code>Loaded {what}</code>. So, the first event would be, for example, <code>Loading Pyodide</code> and the last one per each bootstrap would be <code>Loaded Pyodide</code>.</p> <p>In between all operations are <code>event.detail</code>s, such as:</p> <ul> <li><code>Loading files</code> and <code>Loaded files</code>, when <code>[files]</code> is found in the optional     config</li> <li><code>Loading fetch</code> and <code>Loaded fetch</code>, when <code>[fetch]</code> is found in the optional      config</li> <li><code>Loading JS modules</code> and <code>Loaded JS modules</code>, when <code>[js_modules.main]</code> or     <code>[js_modules.worker]</code> is found in the optional config</li> <li>finally, all optional packages handled via micropip or mip will also     trigger various <code>Loading ...</code> and <code>Loaded ...</code> events so that users can see     what is going on while PyScript is bootstrapping</li> </ul> <p>An example of this listener applied to a dialog can be found in here.</p>"},{"location":"faq/#packaging-pointers","title":"Packaging pointers","text":"<p>Applications need third party packages and PyScript can be configured to automatically install packages for you. Yet packaging can be a complicated beast, so here are some hints for a painless packaging experience with PyScript.</p> <p>There are essentially five ways in which a third party package can become available in PyScript.</p> <ol> <li>The module is already part of either the Pyodide or MicroPython    distribution. For instance, Pyodide includes numpy, pandas, scipy,    matplotlib and scikit-learn as pre-built packages you need only activate    via the <code>packages</code> setting in    PyScript. There are plans for MicroPython to offer different builds for    PyScript, some to include MicroPython's version of numpy or the API for    sqlite.</li> <li>Host a standard Python package somewhere (such as    PyScript.com or in a GitHub repository) so it can    be fetched as a package via a URL at runtime.</li> <li>Reference hosted Python source files, to be included on the file    system, via the <code>files</code> setting.</li> <li>Create a folder containing the package's files and sub folders, and create    a hosted <code>.zip</code> or <code>.tgz</code>/<code>.tar.gz</code>/<code>.whl</code> archive to be decompressed into    the file system (again, via the    <code>files</code> setting).</li> <li>Provide your own <code>.whl</code> package and reference it via a URL in the    <code>packages = [...]</code> list.</li> </ol>"},{"location":"faq/#host-a-package","title":"Host a package","text":"<p>Just put the package you need somewhere it can be served (like PyScript.com) and reference the URL in the <code>packages</code> setting. So long as the server at which you are hosting the package allows CORS (fetching files from other domains) everything should just work.</p> <p>It is even possible to install such packages at runtime, as this example using MicroPython's <code>mip</code> tool demonstrates (the equivalent can be achieved with Pyodide via <code>micropip</code>).</p> MicroPython mip example.<pre><code># Install default version from micropython-lib\nmip.install(\"keyword\")\n# Install from raw URL\nmip.install(\"https://raw.githubusercontent.com/micropython/micropython-lib/master/python-stdlib/bisect/bisect.py\")\n# Install from GitHub shortcut\nmip.install(\"github:jeffersglass/some-project/foo.py\")\n</code></pre>"},{"location":"faq/#provide-your-own-file","title":"Provide your own file","text":"<p>One can use the <code>files</code> setting to copy packages onto the Python path:</p> A file copied into the Python path.<pre><code>&lt;mpy-config&gt;\n[files]\n\"./modules/bisect.py\" = \"./bisect.py\"\n&lt;/mpy-config&gt;\n&lt;script type=\"mpy\"&gt;\nimport bisect\n&lt;/script&gt;\n</code></pre>"},{"location":"faq/#code-archive-ziptgzwhl","title":"Code archive (<code>zip</code>/<code>tgz</code>/<code>whl</code>)","text":"<p>Compress all the code you want into an archive (using either either <code>zip</code> or <code>tgz</code>/<code>tar.gz</code>). Host the resulting archive and use the <code>files</code> setting to decompress it onto the Python interpreter's file system.</p> <p>Consider the following file structure:</p> <pre><code>my_module/__init__.py\nmy_module/util.py\nmy_module/sub/sub_util.py\n</code></pre> <p>Host it somewhere, and decompress it into the home directory of the Python interpreter:</p> A code archive.<pre><code>&lt;mpy-config&gt;\n[files]\n\"./my_module.zip\" = \"./*\"\n&lt;/mpy-config&gt;\n&lt;script type=\"mpy\"&gt;\nfrom my_module import util\nfrom my_module.sub import sub_util\n&lt;/script&gt;\n</code></pre> <p>Please note, the target folder must end with a star (<code>*</code>), and will contain everything in the archive. For example, <code>\"./*\"</code> refers to the home folder for the interpreter.</p>"},{"location":"faq/#file-system","title":"File System","text":"<p>Python expects a file system. In PyScript each interpreter provides its own in-memory virtual file system. This is not the same as the filesystem on the user's device, but is simply a block of memory in the browser.</p> <p>Warning</p> <p>The file system is not persistent nor shareable (yet).</p> <p>Every time a user loads or stores files, it is done in ephemeral memory associated with the current browser session. Beyond the life of the session, nothing is shared, nothing is stored, nothing persists!</p>"},{"location":"faq/#readwrite","title":"Read/Write","text":"<p>The easiest way to add content to the virtual file system is by using native Python file operations:</p> Writing to a text file.<pre><code>with open(\"./test.txt\", \"w\") as dest:\ndest.write(\"hello vFS\")\ndest.close()\n# Read and print the written content.\nwith open(\"./test.txt\", \"r\") as f:\ncontent = f.read()\nprint(content)\n</code></pre> <p>Combined with our <code>pyscript.fetch</code> utility, it's also possible to store more complex data from the web.</p> Writing a binary file.<pre><code># Assume async execution.\nfrom pyscript import fetch, window\nhref = window.location.href\nwith open(\"./page.html\", \"wb\") as dest:\ndest.write(await fetch(href).bytearray())\n# Read and print the current HTML page.\nwith open(\"./page.html\", \"r\") as source:\nprint(source.read())\n</code></pre>"},{"location":"faq/#upload","title":"Upload","text":"<p>It's possible to upload a file onto the virtual file system from the browser (<code>&lt;input type=\"file\"&gt;</code>), and using the DOM API.</p> <p>The following fragment is just one way to achieve this. It's very simple and builds on the file system examples already seen.</p> Upload files onto the virtual file system via the browser.<pre><code>&lt;!-- Creates a file upload element on the web page. --&gt;\n&lt;input type=\"file\"&gt;\n&lt;!-- Python code to handle file uploads via the HTML input element. --&gt;\n&lt;script type=\"mpy\"&gt;\nfrom pyscript import document, fetch, window\nasync def on_change(event):\n# For each file the user has selected to upload...\nfor file in input.files:\n# create a temporary URL,\ntmp = window.URL.createObjectURL(file)\n# fetch and save its content somewhere,\nwith open(f\"./{file.name}\", \"wb\") as dest:\ndest.write(await fetch(tmp).bytearray())\n# then revoke the tmp URL.\nwindow.URL.revokeObjectURL(tmp)\n# Grab a reference to the file upload input element and add\n# the on_change handler (defined above) to process the files.\ninput = document.querySelector(\"input[type=file]\")\ninput.onchange = on_change\n&lt;/script&gt;\n</code></pre>"},{"location":"faq/#download","title":"Download","text":"<p>It is also possible to create a temporary link through which you can download files present on the interpreter's virtual file system.</p> Download file from the virtual file system.<pre><code>from pyscript import document, ffi, window\nimport os\ndef download_file(path, mime_type):\nname = os.path.basename(path)\nwith open(path, \"rb\") as source:\ndata = source.read()\n# Populate the buffer.\nbuffer = window.Uint8Array.new(len(data))\nfor pos, b in enumerate(data):\nbuffer[pos] = b\ndetails = ffi.to_js({\"type\": mime_type})\n# This is JS specific\nfile = window.File.new([buffer], name, details)\ntmp = window.URL.createObjectURL(file)\ndest = document.createElement(\"a\")\ndest.setAttribute(\"download\", name)\ndest.setAttribute(\"href\", tmp)\ndest.click()\n# here a timeout to window.URL.revokeObjectURL(tmp)\n# should keep the memory clear for the session\n</code></pre>"},{"location":"faq/#create_proxy","title":"create_proxy","text":"<p>The <code>create_proxy</code> function is described in great detail on the FFI page, but it's also useful to explain when <code>create_proxy</code> is needed and the subtle differences between Pyodide and MicroPython.</p>"},{"location":"faq/#background","title":"Background","text":"<p>To call a Python function from JavaScript, the native Python function needs to be wrapped in a JavaScript object that JavaScript can use. This JavaScript object converts and normalises arguments passed into the function before handing off to the native Python function. It also reverses this process with any results from the Python function, and so converts and normalises values before returning the result to JavaScript.</p> <p>The JavaScript primitive used for this purpose is the Proxy. It enables \"traps\", such as apply, so the extra work required to call the Python function can happen.</p> <p>Once the <code>apply(target, self, args)</code> trap is invoked:</p> <ul> <li>JavaScript must find the correct Python interpreter to evaluate the code.</li> <li>In JavaScript, the <code>self</code> argument for <code>apply</code> is probably ignored for most   common cases.</li> <li>All the <code>args</code> must be resolved and converted into their Python primitive   representations or associated Python objects.</li> </ul> <p>Ultimately, the targets referenced in the <code>apply</code> must exist in the Python context so they are ready when the JavaScript <code>apply</code> method calls into the Python context.</p> <p>Here's the important caveat: locally scoped Python functions, or functions created at run time cannot be retained forever.</p> A basic Python to JavaScript callback.<pre><code>import js\njs.addEventListener(\n\"custom:event\",\nlambda e: print(e.type)\n)\n</code></pre> <p>In this example, the anonymous <code>lambda</code> function has no reference in the Python context. It's just delegated to the JavaScript runtime via <code>addEventListener</code>, and then Python immediately garbage collects it. However, as previously mentioned, such a Python object must exist for when the <code>custom:event</code> is dispatched.</p> <p>Furthermore, there is no way to define how long the <code>lambda</code> should be kept alive in the Python environment, nor any way to discover if the <code>custom:event</code> callback will ever dispatch (so the <code>lambda</code> is forever pending). PyScript, the browser and the Python interpreters can only work within a finite amount of memory, so memory management and the \"aliveness\" of objects is important.</p> <p>Therefore, <code>create_proxy</code> is provided to delegate responsibility for the lifecycle of an object to the author of the code. In other words, wrapping the <code>lambda</code> in a call to <code>create_proxy</code> would ensure the Python interpreter retains a reference to the anonymous function for future use.</p> <p>Info</p> <p>This probably feels strange! An implementation detail of how the Python and JavaScript worlds interact with each other is bleeding into your code via <code>create_proxy</code>. Surely, if we always just need to create a proxy, a more elegant solution would be to do this automatically?</p> <p>As you'll see, this is a complicated situation with inevitable tradeoffs, but ultimately, through the <code>experimental_create_proxy = \"auto\"</code> flag, you probably never need to use <code>create_proxy</code>. This section of our docs gives you the context you need to make an informed decision.</p> <p>However, this isn't the end of the story.</p> <p>When a Python callback is attached to a specific JavaScript instance (rather than passed as argument into an event listener), it is easy for the Python interpreter to know when the function could be freed from the memory.</p> A sticky lambda.<pre><code>from pyscript import document\n# logs \"click\" if nothing else stopped propagation\ndocument.onclick = lambda e: print(e.type)\n</code></pre> <p>\"Wait, wat? This doesn't make sense at all!?!?\", is a valid question/response to this situation.</p> <p>In this case there's no need to use <code>create_proxy</code> because the JavaScript reference to which the function is attached isn't going away and the interpreter can use the <code>FinalizationRegistry</code> to destroy the <code>lambda</code> (or decrease its reference count) when the underlying JavaScript reference to which it is attached is itself destroyed.</p>"},{"location":"faq/#in-pyodide","title":"In Pyodide","text":"<p>The <code>create_proxy</code> utility was created (among others) to smooth out and circumvent the afore mentioned memory issues when using Python callables with JavaScript event handlers.</p> <p>Using it requires special care. The coder must invoke the <code>destroy()</code> method when the Python callback is no longer needed. It means coders must track the callback's lifecycle. But this is not always possible:</p> <ul> <li>If the callback is passed into opaque third party libraries, the reference is   \"lost in a limbo\" where who-knows-when the reference should be freed.</li> <li>If the callback is passed to listeners, timers or promises it's hard to   predict when the callback is no longer needed.</li> </ul> <p>Luckily the <code>Promise</code> use case is automatically handled by Pyodide, but we're still left with the other cases:</p> Different Pyodide create_proxy contexts.<pre><code>from pyscript import ffi, window\n# The create_proxy is needed when a Python\n# function isn't attached to an object reference\n# (but is, rather, an argument passed into\n# the JavaScript context).\n# This is needed so a proxy is created for\n# future use, even if `print` won't ever need\n# to be freed from the Python runtime.\nwindow.setTimeout(\nffi.create_proxy(print),\n100,\n\"print\"\n)\n# This is needed because the lambda is\n# immediately garbage collected.\nwindow.setTimeout(\nffi.create_proxy(\nlambda x: print(x)\n),\n100,\n\"lambda\"\n)\ndef print_type(event):\nprint(event.type)\n# This is needed even if `print_type`\n# is not a scoped / local function.\nwindow.addEventListener(\n\"some:event\",\nffi.create_proxy(print_type),\n# despite this intent, the proxy\n# will be trapped forever if not destroyed\nffi.to_js({\"once\": True})\n)\n# This does NOT need create_function as it is\n# attached to an object reference, hence observed to free.\nwindow.Object().no_create_function = lambda: print(\"ok\")\n</code></pre> <p>To simplify this complicated situation PyScript has an <code>experimental_create_proxy = \"auto\"</code> flag. When set, PyScript intercepts JavaScript callback invocations, such as those in the example code above, and automatically proxies and destroys any references that are garbage collected in the JavaScript environment.</p> <p>When this flag is set to <code>auto</code> in your configuration, you should never need to use <code>create_proxy</code> with Pyodide.</p> <p>Note</p> <p>When it comes code running on a web worker, due to the way browser work, no Proxy can survive a round trip to the main thread and back.</p> <p>In this scenario PyScript works differently and references callbacks via a unique id, rather than by their identity on the worker. When running on a web worker, PyScript automatically frees proxy object references, so you never need to use <code>create_proxy</code> when running code on a web worker.</p>"},{"location":"faq/#in-micropython","title":"In MicroPython","text":"<p>The proxy situation is definitely simpler in MicroPython. It just creates proxies automatically (so there is no need for a manual <code>create_proxy</code> step).</p> <p>This is because MicroPython doesn't (yet) have a <code>destroy()</code> method for proxies, rendering the use case of <code>create_proxy</code> redundant.</p> <p>Accordingly, the use of <code>create_proxy</code> in MicroPython is only needed for code portability purposes between Pyodide and MicroPython. When using <code>create_proxy</code> in MicroPython, it's just a pass-through function and doesn't actually do anything.</p> <p>All the examples that require <code>create_proxy</code> in Pyodide, don't need it in MicroPython:</p> Different MicroPython create_proxy contexts.<pre><code>from pyscript import window\n# This just works.\nwindow.setTimeout(print, 100, \"print\")\n# This also just works.\nwindow.setTimeout(lambda x: print(x), 100, \"lambda\")\ndef print_type(event):\nprint(event.type)\n# This just works too.\nwindow.addEventListener(\n\"some:event\",\nprint_type,\nffi.to_js({\"once\": True})\n)\n# And so does this.\nwindow.Object().no_create_function = lambda: print(\"ok\")\n</code></pre>"},{"location":"faq/#to_js","title":"to_js","text":"<p>Use of the <code>pyodide.ffi.to_js</code> function is described in the ffi page. But it's also useful to cover the when and why <code>to_js</code> is needed, if at all.</p>"},{"location":"faq/#background_1","title":"Background","text":"<p>Despite their apparent similarity, Python dictionaries and JavaScript object literals are very different primitives:</p> A Python dictionary.<pre><code>ref = {\"some\": \"thing\"}\n# Keys don't need quoting, but only when initialising a dict...\nref = dict(some=\"thing\")\n</code></pre> A JavaScript object literal.<pre><code>const ref = {\"some\": \"thing\"};\n// Keys don't need quoting, so this is as equally valid...\nconst ref = {some: \"thing\"};\n</code></pre> <p>In both worlds, accessing <code>ref[\"some\"]</code> would produce the same result: the string <code>\"thing\"</code>.</p> <p>However, in JavaScript <code>ref.some</code> (i.e. a dotted reference to the key) would also work to return the string <code>\"thing\"</code> (this is not the case in Python), while in Python <code>ref.get(\"some\")</code> achieves the same result (and this is not the case in JavaScript).</p> <p>Perhaps because of this, Pyodide chose to convert Python dictionaries to JavaScript Map objects that share a <code>.get</code> method with Python.</p> <p>Unfortunately, in idiomatic JavaScript and for the vast majority of APIs,  an object literal (rather than a <code>Map</code>) is used to represent key/value pairs. Feedback from our users indicates the dissonance of using a <code>Map</code> rather than the expected object literal to represent a Python <code>dict</code> is the source of a huge amount of frustration. Sadly, the APIs for <code>Map</code> and object literals are sufficiently different that one cannot be a drop in replacement for another.</p> <p>Pyodide have provided a way to override the default <code>Map</code> based behaviour, but this results some rather esoteric code:</p> Convert a dict to an object literal in Pyodide.<pre><code>import js\nfrom pyodide.ffi import to_js\njs.callback(\nto_js(\n{\"async\": False},\n# Transform the default Map into an object literal.\ndict_converter=js.Object.fromEntries\n)\n)\n</code></pre> <p>Info</p> <p>Thanks to a recent change in Pyodide, such <code>Map</code> instances are duck-typed to behave like object literals. Conversion may not be needed anymore, and <code>to_js</code> may just work without the need of the <code>dict_converter</code>. Please check.</p> <p>MicroPython's version of <code>to_js</code> takes the opposite approach (for many of the reasons stated above) and converts Python dictionaries to object literals instead of <code>Map</code> objects.</p> <p>As a result, the PyScript <code>pyscript.ffi.to_js</code> ALWAYS returns a JavaScript object literal by default when converting a Python dictionary no matter if you're using Pyodide or MicroPython as your interpreter. Furthermore, when using MicroPython, because things are closer to idiomatic JavaScript behaviour, you may not even need to use <code>to_js</code> unless you want to ensure cross-interpreter compatibility.</p>"},{"location":"faq/#caveat","title":"Caveat","text":"<p>Warning</p> <p>When using <code>pyscript.to_js</code>, the result is detached from the original Python dictionary.</p> <p>Any change to the JavaScript object will not be reflected in the original Python object. For the vast majority of use cases, this is a desirable trade-off. But it's important to note this detachment.</p> <p>If you're simply passing data around, <code>pyscript.ffi.to_js</code> will fulfil your requirements in a simple and idiomatic manner.</p>"},{"location":"license/","title":"Apache License","text":"<p>Version 2.0, January 2004 &lt;http://www.apache.org/licenses/&gt;</p>"},{"location":"license/#terms-and-conditions-for-use-reproduction-and-distribution","title":"Terms and Conditions for use, reproduction, and distribution","text":""},{"location":"license/#1-definitions","title":"1. Definitions","text":"<p>\u201cLicense\u201d shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.</p> <p>\u201cLicensor\u201d shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.</p> <p>\u201cLegal Entity\u201d shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \u201ccontrol\u201d means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\u201cYou\u201d (or \u201cYour\u201d) shall mean an individual or Legal Entity exercising permissions granted by this License.</p> <p>\u201cSource\u201d form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.</p> <p>\u201cObject\u201d form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.</p> <p>\u201cWork\u201d shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).</p> <p>\u201cDerivative Works\u201d shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.</p> <p>\u201cContribution\u201d shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \u201csubmitted\u201d means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \u201cNot a Contribution.\u201d</p> <p>\u201cContributor\u201d shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.</p>"},{"location":"license/#2-grant-of-copyright-license","title":"2. Grant of Copyright License","text":"<p>Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.</p>"},{"location":"license/#3-grant-of-patent-license","title":"3. Grant of Patent License","text":"<p>Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.</p>"},{"location":"license/#4-redistribution","title":"4. Redistribution","text":"<p>You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:</p> <ul> <li>(a) You must give any other recipients of the Work or Derivative Works a copy of this License; and</li> <li>(b) You must cause any modified files to carry prominent notices stating that You changed the files; and</li> <li>(c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and</li> <li>(d) If the Work includes a \u201cNOTICE\u201d text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.</li> </ul> <p>You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.</p>"},{"location":"license/#5-submission-of-contributions","title":"5. Submission of Contributions","text":"<p>Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.</p>"},{"location":"license/#6-trademarks","title":"6. Trademarks","text":"<p>This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.</p>"},{"location":"license/#7-disclaimer-of-warranty","title":"7. Disclaimer of Warranty","text":"<p>Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.</p>"},{"location":"license/#8-limitation-of-liability","title":"8. Limitation of Liability","text":"<p>In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.</p>"},{"location":"license/#9-accepting-warranty-or-additional-liability","title":"9. Accepting Warranty or Additional Liability","text":"<p>While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"license/#appendix-how-to-apply-the-apache-license-to-your-work","title":"APPENDIX: How to apply the Apache License to your work","text":"<p>To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets <code>[]</code> replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \u201cprinted page\u201d as the copyright notice for easier identification within third-party archives.</p> <pre><code>Copyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"user-guide/","title":"The PyScript User Guide","text":"<p>Info</p> <p>This guide provides technical guidance and exploration of the PyScript platform.</p> <p>While we endeavour to write clearly, some of the content in this user guide will not be suitable for beginners. We assume you already have Python or web development experience. If you're a beginner start with our beginner's guide.</p> <p>We welcome constructive feedback.</p> <p>Our docs have three aims:</p> <ol> <li>A clear overview of all things PyScript.</li> <li>Exploration of PyScript in substantial technical detail.</li> <li>Demonstration of the features of PyScript working together in    real-world example applications.</li> </ol> <p>Read this user guide in full: it is a short but comprehensive overview of the PyScript platform.</p> <p>Get involved! Join in the PyScript conversation on our discord server. There you'll find core developers, community contributors and a flourishing forum for those creating projects with PyScript. Should you wish to engage with the development of PyScript, you are welcome to contribute via  the project's GitHub organisation.</p> <p>Finally, the example projects referenced in our docs are all freely available and copiously commented on pyscript.com.</p> <p>Note</p> <p>Many of these examples come from contributors in our wonderful community. We love to recognise, share and celebrate the incredible work of folks in the PyScript community. If you believe you have a project that would make a good demonstration, please don't hesitate to get in touch.</p>"},{"location":"user-guide/architecture/","title":"Architecture, Lifecycle &amp; Interpreters","text":""},{"location":"user-guide/architecture/#core-concepts","title":"Core concepts","text":"<p>PyScript's architecture has three core concepts:</p> <ol> <li>A small, efficient and powerful kernel called    PolyScript is the foundation    upon which PyScript and plugins are built.</li> <li>A library called coincident    that simplifies and coordinates interactions with web workers.</li> <li>The PyScript stack inside    the browser is simple and clearly defined.</li> </ol>"},{"location":"user-guide/architecture/#polyscript","title":"PolyScript","text":"<p>PolyScript is the core of PyScript.</p> <p>Danger</p> <p>Unless you are an advanced user, you only need to know that PolyScript exists, and it can be safely ignored.</p> <p>PolyScript's purpose is to bootstrap the platform and provide all the necessary core capabilities. Setting aside PyScript for a moment, to use just PolyScript requires a <code>&lt;script&gt;</code> reference to it, along with a further <code>&lt;script&gt;</code> tag defining how to run your code.</p> Bootstrapping with just PolyScript<pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;!-- this is a way to automatically bootstrap polyscript --&gt;\n&lt;script type=\"module\" src=\"https://cdn.jsdelivr.net/npm/polyscript\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;!--\n            Run some Python code with the MicroPython interpreter, but without\n            the extra benefits provided by PyScript.\n        --&gt;\n&lt;script type=\"micropython\"&gt;\nfrom js import document\ndocument.body.textContent = 'polyscript'\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Warning</p> <p>PolyScript is not PyScript.</p> <p>PyScript enhances the available Python interpreters with convenient features, helper functions and easy-to-use yet powerful capabilities.</p> <p>These enhancements are missing from PolyScript.</p> <p>PolyScript's capabilities, upon which PyScript is built, can be summarised as:</p> <ul> <li>Evaluation of code via <code>&lt;script&gt;</code> tags.</li> <li>Handling   browser events   via code evaluated with an interpreter supported by PolyScript.</li> <li>A clear way to use workers   via the <code>XWorker</code> class and its related reference, <code>xworker</code>.</li> <li>Custom scripts to   enrich PolyScript's capabilities.</li> <li>A ready event   dispatched when an interpreter is ready and about to run code, and a   done event when an   interpreter has finished evaluating code.</li> <li>Hooks, called at clearly   defined moments in the page lifecycle, provide a means of calling user   defined functions to modify and enhance PolyScript's default behaviour.</li> <li>Multiple interpreters   (in addition to Pyodide and MicroPython, PolyScript works with R, Lua and   Ruby - although these are beyond the scope of this project).</li> </ul> <p>PolyScript may become important if you encounter problems with PyScript. You should investigate PolyScript if any of the following is true about your problem:</p> <ul> <li>The interpreter fails to load.</li> <li>There are errors about the interpreter starting.</li> <li>HTML events (e.g. <code>py-*</code> or <code>mpy-*</code>) are not triggered.</li> <li>An explicit feature of PolyScript is not reflected in PyScript.</li> </ul> <p>We encourage you to engage and ask questions about PolyScript on our discord server. But in summary, as a user of PyScript you should probably never encounter PolyScript. However, please be aware that specific features of bug fixes my happen in the PolyScript layer in order to then land in PyScript.</p>"},{"location":"user-guide/architecture/#coincident","title":"Coincident","text":"<p>Danger</p> <p>Unless you are an advanced user, you only need to know that coincident exists, and it can be safely ignored. As with PolyScript, we include these details only for those interested in the more fundamental aspects of PyScript.</p> <p>PolyScript uses the coincident library to seamlessly interact with web workers and coordinate interactions between the browser's main thread and such workers.</p> <p>Any <code>SharedArrayBuffer</code> issues are the responsibility of coincident and, to some extent, anything related to memory leaks.</p> <p>In a nutshell, this project is likely responsible for the following modes of failure:</p> <ul> <li>Failing to invoke something from a worker that refers to the main thread.</li> <li>A reproducible and cross platform (browser based) memory leak.</li> <li>Invoking a function with a specific argument from a worker that doesn't   produce the expected result.</li> </ul> <p>We hope all these scenarios are unlikely to happen within a PyScript project. They are all battle tested and covered with general purpose cross-environment testing before landing in PyScript. But, if you feel something is odd, leaking, or badly broken, please feel free to file an issue in the coincident project. As usual, there is never a silly question, so long as you provide a minimal reproducible example in your bug reports or query.</p>"},{"location":"user-guide/architecture/#the-stack","title":"The stack","text":"<p>The stack describes how the different building blocks inside a PyScript application relate to each other:</p> <p></p> <ul> <li>Everything happens inside the context of the browser (represented by the   black border). The browser tab for your PyScript app is your   sandboxed computing environment.</li> </ul> <p>Failure</p> <p>PyScript is simply Python running in the browser. Please remember:</p> <ul> <li>PyScript isn't running on a server hosted in the cloud.</li> <li>PyScript doesn't use the version of Python running natively on the user's   operating system.</li> <li>PyScript only runs IN THE BROWSER (and nowhere else).</li> </ul> <ul> <li>At the bottom of the stack are the Python interpreters compiled to WASM. They   evaluate your code and interact with the browser via the FFI.</li> <li>The PyScript layer makes it easy to use and configure the Python   interpreters. There are two parts to this:<ol> <li>The PolyScript kernel (see above), that bootstraps everything and    provides the core capabilities.</li> <li>PyScript and related plugins that sit atop PolyScript to give us an    easy-to-use Python platform in the browser.</li> </ol> </li> <li>Above the PyScript layer are either:<ol> <li>Application frameworks, modules and libraries written in Python that you    use to create useful applications.</li> <li>Your code (that's your responsibility).</li> </ol> </li> </ul>"},{"location":"user-guide/architecture/#lifecycle","title":"Lifecycle","text":"<p>If the architecture explains how components relate to each other, the lifecycle explains how things unfold. It's important to understand both: it will help you think about your own code and how it sits within PyScript.</p> <p>Here's how PyScript unfolds through time:</p> <ul> <li>The browser is directed to a URL. The response is HTML.</li> <li>When parsing the HTML response the browser encounters the <code>&lt;script&gt;</code>   tag that references PyScript. PyScript is loaded and evaluated as a   JavaScript module,   meaning it doesn't hold up the loading of the page and is only evaluated when   the HTML is fully parsed.</li> <li>The PyScript module does broadly six things:<ol> <li>Discover Python code referenced in the page.</li> <li>Evaluate any configuration on the page (either via    single <code>&lt;py-config&gt;</code> or <code>&lt;mpy-config&gt;</code> tags or the <code>config</code>    attribute of a <code>&lt;script&gt;</code>, <code>&lt;py-script&gt;</code> or <code>&lt;mpy-script&gt;</code> tag).</li> <li>Given the detected configuration, download the required interpreter.</li> <li>Setup the interpreter's environment. This includes any    plugins, packages, files or JavaScript modules     that need to be loaded.</li> <li>Make available various    builtin helper objects and functions to the    interpreter's environment (accessed via the <code>pyscript</code> module).</li> <li>Only then use the interpreter in the correctly configured environment to    evaluate the detected Python code.</li> </ol> </li> <li>When an interpreter is ready the <code>py:ready</code> or <code>mpy:ready</code> events are   dispatched, depending which interpreter you've specified (Pyodide or   MicroPython respectively).</li> <li>Finally, a <code>py:done</code> event is dispatched after every single script   referenced from the page has finished.</li> </ul> <p>In addition, various \"hooks\" are called at different moments in the lifecycle of PyScript. These can be used by plugin authors to modify or enhance the behaviour of PyScript. The hooks, and how to use them, are explored further in the section on plugins.</p> <p>Warning</p> <p>A web page's workers have completely separate environments to the main thread.</p> <p>It means configuration in the main thread can be different to that for an interpreter running on a worker. In fact, you can use different interpreters and configuration in each context (for instance, MicroPython on the main thread, and Pyodide on a worker).</p> <p>Think of workers as completely separate sub-processes inside your browser tab.</p>"},{"location":"user-guide/architecture/#interpreters","title":"Interpreters","text":"<p>Python is an interpreted language, and thus needs an interpreter to work.</p> <p>PyScript currently supports two versions of the Python interpreter that have been compiled to WASM: Pyodide and MicroPython. You should select which one to use depending on your use case and acceptable trade-offs.</p> <p>Info</p> <p>In future, and subject to progress, we hope to make available a third Pythonic option: SPy, a staticially typed version of Python compiled directly to WASM.</p> <p>Both interpreters make use of emscripten, a compiler toolchain (using LLVM), for emitting WASM assets for the browser. Emscripten also provides APIs so operating-system level features such as a sandboxed file system (not the user's local machine's filesystem), IO (<code>stdin</code>, <code>stdout</code>, <code>stderr</code> etc,) and networking are available within the context of a browser.</p> <p>Both Pyodide and MicroPython implement the same robust Python \u27fa JavaScript foreign function interface (FFI). This bridges the gap between the browser and Python worlds.</p>"},{"location":"user-guide/architecture/#pyodide","title":"Pyodide","text":"<p>Pyodide is a version of the standard CPython interpreter, patched to compile to WASM and work in the browser.</p> <p>It includes many useful features:</p> <ul> <li>The installation of pure Python packages from PyPI via   the micropip package   installer.</li> <li>An active, friendly and technically outstanding team of volunteer   contributors (some of whom have been supported by the PyScript project).</li> <li>Extensive official   documentation, and many   tutorials found online.</li> <li>Builds of Pyodide that include popular packages for data science like   Numpy, Scipy and   Pandas.</li> </ul> <p>Warning</p> <p>You may encounter an error message from <code>micropip</code> that explains it can't find a \"pure Python wheel\" for a package. Pyodide's documentation explains what to do in this situation.</p> <p>Briefly, some packages with C extensions have versions compiled for WASM and these can be installed with <code>micropip</code>. Packages containing C extensions that are not compiled for WASM cause the \"pure Python wheel\" error.</p> <p>There are plans afoot to make WASM a target in PyPI so packages with C extensions are automatically compiled to WASM.</p>"},{"location":"user-guide/architecture/#micropython","title":"MicroPython","text":"<p>MicroPython is a lean and efficient implementation of the Python 3 programming language that includes a small subset of the Python standard library and is optimised to run on microcontrollers and in constrained environments (like the browser). </p> <p>Everything needed to view a web page in a browser needs to be delivered over the network. The smaller the asset to be delivered can be, the better. MicroPython, when compressed for delivery to the browser, is only around 170k in size - smaller than many images found on the web.</p> <p>This makes MicroPython particularly suited to browsers running in a more constrained environment such as on a mobile or tablet based device. Browsing with these devices often uses (slower) mobile internet connections. Furthermore, because MicroPython is lean and efficient it still performs exceptionally well on these relatively underpowered devices.</p> <p>Thanks to collaboration between the MicroPython, Pyodide and PyScript projects, there is a foreign function interface for MicroPython. The MicroPython FFI deliberately copies the API of the FFI originally written for Pyodide - meaning it is relatively easy to migrate between the two supported interpreters via the <code>pyscript.ffi</code> namespace.</p>"},{"location":"user-guide/configuration/","title":"Configuration","text":"<p>The browser tab in which your PyScript based web page is displayed is a very secure sandboxed computing environment for running your Python code.</p> <p>This is also the case for web workers running Python. Despite being associated with a single web page, workers are completely separate from each other (except for some very limited and clearly defined means of interacting, which PyScript looks after for you).</p> <p>We need to tell PyScript how we want such Python environments to be configured. This works in the same way for both the main thread and for web workers. Such configuration ensures we get the expected resources ready before our Python code is evaluated (resources such as arbitrary data files and third party Python packages).</p>"},{"location":"user-guide/configuration/#toml-or-json","title":"TOML or JSON","text":"<p>Configuration can be expressed in two formats:</p> <ul> <li>TOML is the configuration file format preferred by   folks in the Python community.</li> <li>JSON is a data format most often used   by folks in the web community.</li> </ul> <p>Since PyScript is the marriage of Python and the web, and we respect the traditions of both technical cultures, we support both formats.</p> <p>However, because JSON is built into all browsers by default and TOML requires an additional download of a specialist parser before PyScript can work, the use of JSON is more efficient from a performance point of view.</p> <p>The following two configurations are equivalent, and simply tell PyScript to ensure the packages arrr and numberwang are installed from PyPI (the Python Packaging Index):</p> Configuration via TOML.<pre><code>packages = [\"arrr\", \"numberwang\" ]\n</code></pre> Configuration via JSON.<pre><code>{\n\"packages\": [\"arrr\", \"numberwang\"]\n}\n</code></pre>"},{"location":"user-guide/configuration/#file-or-inline","title":"File or inline","text":"<p>The recommended way to write configuration is via a separate file and then reference it from the tag used to specify the Python code:</p> Reference a configuration file<pre><code>&lt;script type=\"py\" src=\"main.py\" config=\"pyscript.toml\"&gt;&lt;/script&gt;\n</code></pre> <p>If you use JSON, you can make it the value of the <code>config</code> attribute:</p> JSON as the value of the config attribute.<pre><code>&lt;script type=\"py\" src=\"main.py\" config='{\"packages\":[\"arrr\", \"numberwang\"]}'&gt;&lt;/script&gt;\n</code></pre> <p>For historical and convenience reasons we still support the inline specification of configuration information for <code>py</code> and <code>mpy</code> type scripts via a single <code>&lt;py-config&gt;</code> or <code>&lt;mpy-config&gt;</code> tag in your HTML document:</p> Inline configuration via the &lt;py-config&gt; tag.<pre><code>&lt;py-config&gt;\n{\n    \"packages\": [\"arrr\", \"numberwang\" ]\n}\n&lt;/py-config&gt;\n</code></pre> <p>Warning</p> <p>Should you use <code>&lt;py-config&gt;</code> or <code>&lt;mpy-config&gt;</code>, there must be only one of these tags on the page per interpreter.</p> <p>Additionally, <code>&lt;py-config&gt;</code> only works for <code>py</code>/<code>mpy</code> type scripts and is not used with <code>py-game</code> or <code>py-editor</code>. For these use the config attribute method.</p> <p>Warning</p> <p>Starting from PyScript 2025.10.1 the config guards against incompatible or not available packages related to the current Pyodide version.</p> <p>There is an ongoing effort to make chosing packages in Pyodide way more helpful than it has ever been but right now be aware if a non existent package for a specific Pyodide version cannot be found an error will be thrown.</p>"},{"location":"user-guide/configuration/#options","title":"Options","text":"<p>There are five core options (<code>interpreter</code>, <code>files</code>, <code>packages</code>, <code>js_modules</code> and <code>sync_main_only</code>) and two experimental flags: (<code>experimental_create_proxy</code>) that can be used in the configuration of PyScript and (<code>experimental_remote_packages</code>) which allows remotely hosted packages. The user is also free to define arbitrary additional configuration options that plugins or an app may require for their own reasons.</p>"},{"location":"user-guide/configuration/#interpreter","title":"Interpreter","text":"<p>The <code>interpreter</code> option pins the Python interpreter to the version of the specified value. This is useful for testing (does my code work on a specific version of Pyodide?), or to ensure the precise combination of PyScript version and interpreter version are pinned to known values.</p> <p>The value of the <code>interpreter</code> option should be a valid version number for the Python interpreter you are configuring, or a fully qualified URL to a custom version of the interpreter.</p> <p>The following two examples are equivalent:</p> Specify the interpreter version in TOML.<pre><code>interpreter = \"0.29.0\"\n</code></pre> Specify the interpreter version in JSON.<pre><code>{\n\"interpreter\": \"0.29.0\"\n}\n</code></pre> <p>The following JSON fragment uses a fully qualified URL to point to the same version of Pyodide as specified in the previous examples:</p> Specify the interpreter via a fully qualified URL.<pre><code>{\n\"interpreter\": \"https://cdn.jsdelivr.net/pyodide/v0.29.0/full/pyodide.mjs\"\n}\n</code></pre>"},{"location":"user-guide/configuration/#files","title":"Files","text":"<p>The <code>files</code> option fetches arbitrary content from URLs onto the virtual filesystem available to Python, and emulated by the browser. Just map a valid URL to a destination filesystem path on the in-browser virtual filesystem. You can find out more in the section about PyScript and filesystems.</p> <p>The following JSON and TOML are equivalent:</p> Fetch files onto the filesystem with JSON.<pre><code>{\n\"files\": {\n\"https://example.com/data.csv\": \"./data.csv\",\n\"./code.py\": \"./subdir/code.py\"\n}\n}\n</code></pre> Fetch files onto the filesystem with TOML.<pre><code>[files]\n\"https://example.com/data.csv\" = \"./data.csv\"\n\"./code.py\" = \"./subdir/code.py\"\n</code></pre> <p>If you make the target an empty string, the final \"filename\" part of the source URL becomes the destination filename, in the root of the filesystem, to which the content is copied. As a result, the <code>data.csv</code> entry from the previous examples could be equivalently re-written as:</p> JSON implied filename in the root directory.<pre><code>{\n\"files\": {\n\"https://example.com/data.csv\": \"\",\n\"./code.py\": \"\"\n}\n}\n</code></pre> TOML implied filename in the root directory.<pre><code>[files]\n\"https://example.com/data.csv\" = \"\"\n\"./code.py\" = \"\"\n</code></pre> <p>If the source part of the configuration is either a <code>.zip</code> or <code>.tar.gz</code> file and its destination is a folder path followed by a star (e.g. <code>/*</code> or <code>./dest/*</code>), then PyScript will extract the referenced archive automatically into the target directory in the browser's built in file system.</p> <p>Warning</p> <p>PyScript expects all file destinations to be unique.</p> <p>If there is a duplication PyScript will raise an exception to help you find the problem.</p> <p>Warning</p> <p>Use destination URLs instead of CORS / redirect URLs.</p> <p>For example, <code>https://github.com/pyscript/ltk/raw/refs/heads/main/ltk/jquery.py</code> redirects to <code>https://raw.githubusercontent.com/pyscript/ltk/refs/heads/main/ltk/jquery.py</code>. Use the latter.</p> <p>Tip</p> <p>For most people, most of the time, the simple URL to filename mapping, described above, will be sufficient.</p> <p>Yet certain situations may require more flexibility. In which case, read on.</p> <p>Sometimes many resources are needed to be fetched from a single location and copied into the same directory on the file system. To aid readability and reduce repetition, the <code>files</code> option comes with a mini templating language that allows reusable placeholders to be defined between curly brackets (<code>{</code> and <code>}</code>). When these placeholders are encountered in the <code>files</code> configuration, their name is replaced with their associated value.</p> <p>Attention</p> <p>Valid placeholder names are always enclosed between curly brackets (<code>{</code> and <code>}</code>), like this: <code>{FROM}</code>, <code>{TO}</code> and <code>{DATA SOURCE}</code> (capitalized names help identify placeholders when reading code ~ although this isn't strictly necessary).</p> <p>Any number of placeholders can be defined and used anywhere within URLs and paths that map source to destination.</p> <p>The following JSON and TOML are equivalent:</p> Using the template language in JSON.<pre><code>{\n\"files\": {\n\"{DOMAIN}\": \"https://my-server.com\",\n\"{PATH}\": \"a/path\",\n\"{VERSION}\": \"1.2.3\",\n\"{FROM}\": \"{DOMAIN}/{PATH}/{VERSION}\",\n\"{TO}\": \"./my_module\",\n\"{FROM}/__init__.py\": \"{TO}/__init__.py\",\n\"{FROM}/foo.py\": \"{TO}/foo.py\",\n\"{FROM}/bar.py\": \"{TO}/bar.py\",\n\"{FROM}/baz.py\": \"{TO}/baz.py\",\n}\n}\n</code></pre> Using the template language in TOML.<pre><code>[files]\n\"{DOMAIN}\" = \"https://my-server.com\"\n\"{PATH}\" = \"a/path\"\n\"{VERSION}\" = \"1.2.3\"\n\"{FROM}\" = \"{DOMAIN}/{PATH}/{VERSION}\"\n\"{TO}\" = \"./my_module\"\n\"{FROM}/__init__.py\" = \"{TO}/__init__.py\"\n\"{FROM}/foo.py\" = \"{TO}/foo.py\"\n\"{FROM}/bar.py\" = \"{TO}/bar.py\"\n\"{FROM}/baz.py\" = \"{TO}/baz.py\"\n</code></pre> <p>The <code>{DOMAIN}</code>, <code>{PATH}</code>, and <code>{VERSION}</code> placeholders are used to create a further <code>{FROM}</code> placeholder. The <code>{TO}</code> placeholder is also defined to point to a common sub-directory on the file system. The final four entries use <code>{FROM}</code> and <code>{TO}</code> to copy over four files (<code>__init__.py</code>, <code>foo.py</code>, <code>bar.py</code> and <code>baz.py</code>) from the same source to a common destination directory.</p> <p>For convenience, if the destination is just a directory (it ends with <code>/</code>) then PyScript automatically uses the filename part of the source URL as the filename in the destination directory.</p> <p>For example, the end of the previous config file could be:</p> <pre><code>\"{TO}\" = \"./my_module/\"\n\"{FROM}/__init__.py\" = \"{TO}\"\n\"{FROM}/foo.py\" = \"{TO}\"\n\"{FROM}/bar.py\" = \"{TO}\"\n\"{FROM}/baz.py\" = \"{TO}\"\n</code></pre>"},{"location":"user-guide/configuration/#packages","title":"Packages","text":"<p>The <code>packages</code> option lists Python packages to be installed onto the Python path.</p> <p>Info</p> <p>Pyodide uses a utility called <code>micropip</code> to install packages from PyPI.</p> <p>Because <code>micropip</code> is a Pyodide-only feature, and MicroPython doesn't support code packaged on PyPI, the <code>packages</code> option only works with packages hosted on PyPI when using Pyodide.</p> <p>MicroPython's equivalent utility, <code>mip</code>, uses a separate repository of available packages called <code>micropython-lib</code>. When you use the <code>packages</code> option with MicroPython, it is this repository (not PyPI) that is used to find available packages. Many of the packages in <code>micropython-lib</code> are for microcontroller based activities and may not work with the web assembly port of MicroPython.</p> <p>If you need pure Python modules for MicroPython, you have two further options:</p> <ol> <li>Use the files option to manually copy the source code for a    package onto the file system.</li> <li>Use a URL referencing a MicroPython friendly package instead of PyPI    package name.</li> </ol> <p>The following two examples are equivalent:</p> A packages list in TOML.<pre><code>packages = [\"arrr\", \"numberwang\", \"snowballstemmer&gt;=2.2.0\" ]\n</code></pre> A packages list in JSON.<pre><code>{\n\"packages\": [\"arrr\", \"numberwang\", \"snowballstemmer&gt;=2.2.0\" ]\n}\n</code></pre> <p>When using Pyodide, the names in the list of <code>packages</code> can be any of the following valid forms:</p> <ul> <li>A name of a package on PyPI: <code>\"snowballstemmer\"</code></li> <li>A name for a package on PyPI with additional constraints:   <code>\"snowballstemmer&gt;=2.2.0\"</code></li> <li>An arbitrary URL to a Python package: <code>\"https://.../package.whl\"</code></li> <li>A file copied onto the browser based file system: <code>\"emfs://.../package.whl\"</code></li> </ul>"},{"location":"user-guide/configuration/#package-cache","title":"Package Cache","text":"<p>For performance reasons, PyScript caches packages so that a delay resulting from downloading the packages is only noticable on first load - after which, PyScript will fall back on packages previously downloaded and held in the browser's local cache.</p> <p>The behaviour of caching can be configured via the <code>packages_cache</code> setting. If this setting is not used, PyScript will cache packages. Otherwise, override PyScript's behaviour by setting <code>packages_cache</code> to one of these two values:</p> <ul> <li><code>never</code> - PyScript will not cache packages.</li> <li><code>passthrough</code> - this only works with Pyodide (see this wiki),   and will cause Pyodide to download packages in a parallel manner rather than   the default linear fashion. However, these packages will not be cached.</li> </ul>"},{"location":"user-guide/configuration/#plugins","title":"Plugins","text":"<p>The <code>plugins</code> option allows user to either augment, or exclude, the list of plugins imported out of the box from core during bootstrap.</p> <p>While augmenting requires some knowledge about core internals, excluding some plugin might be desired to avoid such plugin behavior and, in edge cases, reduce the amount of network requests to bootstrap PyScript.</p> <p>It is possible to check the list of plugins we offer by default, where each key is used as plugin name and could be also disabled using the <code>!pugin-name</code> convention, here an example:</p> Specify plugins in TOML<pre><code>plugins = [\"custom_plugin\", \"!error\"]\n</code></pre> Specify plugins in JSON<pre><code>{\n\"plugins\": [\"custom_plugin\", \"!error\"]\n}\n</code></pre> <p>Info</p> <p>The <code>\"!error\"</code> syntax is a way to turn off a plugin built into PyScript that is enabled by default.</p> <p>It is possible to turn off other plugins too using the very same convention.</p> <p>Warning</p> <p>Please note <code>plugins</code> are currently a core only feature. If you need any extra functionality out of the box files or js_modules are the current way to provide more features without needing to file a PR in core.</p> <p>This means that the current <code>plugins</code> proposal is meant to disable our own plugins but it has no usage to add 3rd party plugins right now.</p>"},{"location":"user-guide/configuration/#javascript-modules","title":"JavaScript modules","text":"<p>It's easy to import and use JavaScript modules in your Python code. This section of the docs examines the configuration needed to make this work. How to make use of JavaScript is dealt with elsewhere.</p> <p>We need to tell PyScript about the JavaScript modules you want to use. This is the purpose of the <code>js_modules</code> related configuration fields.</p> <p>There are two fields:</p> <ul> <li><code>js_modules.main</code> defines JavaScript modules loaded in the context of the   main thread of the browser. Helpfully, it is also possible to interact with   such modules from the context of workers. Sometimes such modules also   need CSS files to work, and these can also be specified.</li> <li><code>js_modules.worker</code> defines JavaScript modules loaded into the context of   the web worker. Such modules must not expect <code>document</code> or <code>window</code>   references (if this is the case, you must load them via <code>js_modules.main</code> and   use them from the worker). However, if the JavaScript module could work   without such references, then performance is better if defined on a worker.   Because CSS is meaningless in the context of a worker, it is not possible to   specify such files in a worker context.</li> </ul> <p>Once specified, your JavaScript modules will be available under the <code>pyscript.js_modules.*</code> namespace.</p> <p>To specify such modules, simply provide a list of source/module name pairs.</p> <p>For example, to use the excellent Leaflet JavaScript module for creating interactive maps you'd add the following lines:</p> JavaScript main thread modules defined in TOML.<pre><code>[js_modules.main]\n\"https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet-src.esm.js\" = \"leaflet\"\n\"https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet.css\" = \"leaflet\" # CSS\n</code></pre> JavaScript main thread modules defined in JSON.<pre><code>{\n\"js_modules\": {\n\"main\": {\n\"https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet-src.esm.js\": \"leaflet\",\n\"https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet.css\": \"leaflet\"\n}\n}\n}\n</code></pre> <p>Info</p> <p>Notice how the second line references the required CSS needed for the JavaScript module to work correctly.</p> <p>The CSS file MUST target the very same name as the JavaScript module to which it is related.</p> <p>Warning</p> <p>Since the Leaflet module expects to manipulate the DOM and have access to <code>document</code> and <code>window</code> references, it must only be added via the <code>js_modules.main</code> setting (as shown) and cannot be added in a worker context.</p> <p>At this point Python code running on either the main thread or in a worker will have access to the JavaScript module like this:</p> Making use of a JavaScript module from within Python.<pre><code>from pyscript.js_modules import leaflet as L\nmap = L.map(\"map\")\n# etc....\n</code></pre> <p>Some JavaScript modules (such as html-escaper) don't require access to the DOM and, for efficiency reasons, can be included in the worker context:</p> A JavaScript worker module defined in TOML.<pre><code>[js_modules.worker]\n\"https://cdn.jsdelivr.net/npm/html-escaper\" = \"html_escaper\"\n</code></pre> A JavaScript worker module defined in JSON.<pre><code>{\n\"js_modules\": {\n\"worker\": {\n\"https://cdn.jsdelivr.net/npm/html-escaper\": \"html_escaper\"\n}\n}\n}\n</code></pre> <p>However, <code>from pyscript.js_modules import html_escaper</code> would then only work within the context of Python code running on a worker.</p>"},{"location":"user-guide/configuration/#sync_main_only","title":"sync_main_only","text":"<p>Sometimes you just want to start an expensive computation on a web worker without the need for the worker to interact with the main thread. You're simply awaiting the result of a method exposed from a worker.</p> <p>This has the advantage of not requiring the use of <code>SharedArrayBuffer</code> and associated CORS related header configuration.</p> <p>If the <code>sync_main_only</code> flag is set, then interactions between the main thread and workers are limited to one way calls from the main thread to methods exposed by the workers.</p> Setting the sync_main_only flag in TOML.<pre><code>sync_main_only = true\n</code></pre> Setting the sync_main_only flag in JSON.<pre><code>{\n\"sync_main_only\": true\n}\n</code></pre> <p>If <code>sync_main_only</code> is set, the following caveats apply:</p> <ul> <li>It is not possible to manipulate the DOM or do anything meaningful on the   main thread from a worker. This is because Atomics cannot guarantee   sync-like locks between a worker and the main thread.</li> <li>Only a worker's <code>pyscript.sync</code> methods are exposed, and they can only be   awaited from the main thread.</li> <li>The worker can only <code>await</code> main thread references one after the other, so   developer experience is degraded when one needs to interact with the   main thread.</li> </ul>"},{"location":"user-guide/configuration/#experimental_create_proxy","title":"experimental_create_proxy","text":"<p>Knowing when to use the <code>pyscript.ffi.create_proxy</code> method when using Pyodide can be confusing at the best of times and full of technical \"magic\".</p> <p>This experimental flag, when set to <code>\"auto\"</code> will cause PyScript to try to automatically handle such situations, and should \"just work\".</p> Using the experimental_create_proxy flag in TOML.<pre><code>experimental_create_proxy = \"auto\"\n</code></pre> Using the experimental_create_proxy flag in JSON.<pre><code>{\n\"experimental_create_proxy\": \"auto\"\n}\n</code></pre> <p>Warning</p> <p>This feature is experimental and only needs to be used with Pyodide.</p> <p>Should you encounter problems (such as problematic memory leaks) when using this flag with Pyodide, please don't hesitate to raise an issue with a reproducable example, and we'll investigate.</p>"},{"location":"user-guide/configuration/#experimental_ffi_timeout","title":"experimental_ffi_timeout","text":"<p>When bootstrapping a worker, the worker is told to use a cache for round-trip operations (for example, <code>window.my_object.foo.bar.baz</code> causes a round-trip to the main thread for each dot <code>.</code> in this chain of references). By caching the dotted references performance can be improved by reducing the number of round trips PyScript makes.</p> <p>However, not everything can be cached (those APIs or objects with side-effects won't work; for example DOM element based APIs etc).</p> <p>The <code>experimental_ffi_timeout</code> setting defines the maximum lifetime of that cache. If it's less than 0 (the default), there is no cache whatsoever. Zero means to clean up the cache on the next iteration of the event loop. A positive number is the maximum number of milliseconds the cache will be kept alive.</p> <p>In this experimental phase, we suggest trying <code>0</code>, <code>30</code> or a value that won't likely bypass the browser rendering of 60fps. Of course, <code>1000</code> (i.e. a second) would be a fun, if greedy, experiment.</p>"},{"location":"user-guide/configuration/#experimental_remote_packages","title":"experimental_remote_packages","text":"<p>Specially designed to allow custom pure Python packages, it is possible to specify a remote <code>.toml</code> or <code>.json</code> configuration file within the list of packages:</p> Using the experimental_remote_packages flag in TOML.<pre><code>experimental_remote_packages = true\npackages = ['numpy', 'https://remote.host.com/my_package/v1/config.toml']\n</code></pre> <p>The remote config is basically a subset of any other PyScript config with the only exception that its <code>name</code> field must specify the package name, which will then be used to import such package via regular imports:</p> A remote config example<pre><code>name = \"my_package\"\n# a remote config can include packages, even remote ones\npackages = ['matplotlib']\n# files are resolved relatively to this config URL\n[files]\n\"./__init__.py\" = \"\"\n\"./sub/module.py\" = \"\"\n\"./main.py\" = \"\"\n</code></pre> <p>The bootstrap will take care of fetching and preparing the remote package so that all the code will need to do is: <code>from my_package import util</code>.</p>"},{"location":"user-guide/configuration/#debug","title":"debug","text":"<p>When using Pyodide, if the <code>debug</code> setting is set to <code>true</code>, then Pyodide will run in debug mode. See Pyodide's documentation for details of what this entails.</p>"},{"location":"user-guide/configuration/#custom","title":"Custom","text":"<p>Sometimes plugins or apps need bespoke configuration options.</p> <p>So long as you don't cause a name collision with the built-in option names then you are free to use any valid data structure that works with both TOML and JSON to express your configuration needs.</p> <p>Access the current configuration via <code>pyscript.config</code>, a Python <code>dict</code> representing the configuration:</p> Reading the current configuration.<pre><code>from pyscript import config\n# It's just a dict.\nprint(config.get(\"files\"))\n</code></pre> <p>Note</p> <p>Changing the <code>config</code> dictionary at runtime doesn't change the actual configuration.</p>"},{"location":"user-guide/dom/","title":"The DOM","text":"<p>The DOM (document object model) is a tree like data structure representing the web page displayed by the browser. PyScript interacts with the DOM to change the user interface and react to things happening in the browser.</p> <p>There are currently two ways to interact with the DOM:</p> <ol> <li>Through the foreign function interface (FFI) to interact with objects found    in the browser's <code>globalThis</code> or <code>document</code> objects.</li> <li>Through the <code>pyscript.web</code> module that acts as a Pythonic wrapper around    the FFI and comes as standard with PyScript.</li> </ol>"},{"location":"user-guide/dom/#ffi","title":"FFI","text":"<p>The foreign function interface (FFI) gives Python access to all the standard web capabilities and features, such as the browser's built-in web APIs.</p> <p>This is available via the <code>pyscript.window</code> module which is a proxy for the main thread's <code>globalThis</code> object, or <code>pyscript.document</code> which is a proxy for the website's <code>document</code> object in JavaScript:</p> Accessing the window and document objects in Python<pre><code>from pyscript import window, document\nmy_element = document.querySelector(\"#my-id\")\nmy_element.innerText = window.location.hostname\n</code></pre> <p>The FFI creates proxy objects in Python linked to actual objects in JavaScript.</p> <p>The proxy objects in your Python code look and behave like Python objects but have related JavaScript objects associated with them. It means the API defined in JavaScript remains the same in Python, so any browser based JavaScript APIs or third party JavaScript libraries that expose objects in the web page's <code>globalThis</code>, will have exactly the same API in Python as in JavaScript.</p> <p>The FFI automatically transforms Python and JavaScript objects into the equivalent in the other language. For example, Python's boolean <code>True</code> and <code>False</code> will become JavaScript's <code>true</code> and <code>false</code>, while a JavaScript array of strings and integers, <code>[\"hello\", 1, 2, 3]</code> becomes a Python list of the equivalent values: <code>[\"hello\", 1, 2, 3]</code>.</p> <p>Info</p> <p>Instantiating classes into objects is an interesting special case that the FFI expects you to handle.</p> <p>If you wish to instantiate a JavaScript class in your Python code, you need to call the class's <code>new</code> method:</p> <pre><code>from pyscript import window\nmy_obj = window.MyJavaScriptClass.new(\"some value\")\n</code></pre> <p>The underlying reason for this is simply JavaScript and Python do instantiation very differently. By explicitly calling the JavaScript class's <code>new</code> method PyScript both signals and honours this difference.</p> <p>More technical information about instantiating JavaScript classes can be found in the FAQ</p> <p>Should you require lower level API access to FFI features, you can find such builtin functions under the <code>pyscript.ffi</code> namespace in both Pyodide and MicroPython. The available functions are described in our section on the builtin API.</p> <p>Advanced users may wish to explore the technical details of the FFI.</p>"},{"location":"user-guide/dom/#pyscriptweb","title":"<code>pyscript.web</code>","text":"<p>Warning</p> <p>The <code>pyscript.web</code> module is currently a work in progress.</p> <p>We welcome feedback and suggestions.</p> <p>The <code>pyscript.web</code> module is an idiomatically Pythonic API for interacting with the DOM. It wraps the FFI in a way that is more familiar to Python developers and works natively with the Python language. Technical documentation for this module can be found in the API section.</p> <p>There are three core concepts to remember:</p> <ul> <li>Find elements on the page via   CSS selectors.   The <code>find</code> API uses exactly the same queries   as those used by native browser methods like <code>qurerySelector</code> or   <code>querySelectorAll</code>.</li> <li>Use classes in the <code>pyscript.web</code> namespace to create and organise   new elements on the web page.</li> <li>Collections of elements allow you to access and change attributes en-mass.   Such collections are returned from <code>find</code> queries and are also used for the   children   of an element.</li> </ul> <p>You have several options for accessing the content of the page, and these are all found in the <code>pyscript.web.page</code> object. The <code>html</code>, <code>head</code> and <code>body</code> attributes reference the page's top-level html, head and body. As a convenience the <code>page</code>'s <code>title</code> attribute can be used to get and set the web page's title (usually shown in the browser's tab). The <code>append</code> method is a shortcut for adding content to the page's <code>body</code>. Whereas, the <code>find</code> method is used to return collections of elements matching a CSS query. You may also shortcut <code>find</code> via a CSS query in square brackets. Finally, all elements have a <code>find</code> method that searches within their children for elements matching your CSS query.</p> <pre><code>from pyscript.web import page\n# Print all the child elements of the document's head.\nprint(page.head.children)\n# Find all the paragraphs in the DOM.\nparagraphs = page.find(\"p\")\n# Or use square brackets.\nparagraphs = page[\"p\"]\n</code></pre> <p>The object returned from a query, or used as a reference to an element's children is iterable:</p> <pre><code>from pyscript.web import page\n# Get all the paragraphs in the DOM.\nparagraphs = page[\"p\"]\n# Print the inner html of each paragraph.\nfor p in paragraphs:\nprint(p.html)\n</code></pre> <p>Alternatively, it is also indexable / sliceable:</p> <pre><code>from pyscript.web import page\n# Get an ElementCollection of all the paragraphs in the DOM\nparagraphs = page[\"p\"]\n# Only the final two paragraphs.\nfor p in paragraphs[-2:]:\nprint(p.html)\n</code></pre> <p>You have access to all the standard attributes related to HTML elements (for example, the <code>innerHTML</code> or <code>value</code>), along with a couple of convenient ways to interact with classes and CSS styles:</p> <ul> <li><code>classes</code> - the list of classes associated with the elements.</li> <li><code>style</code> - a dictionary like object for interacting with CSS style rules.</li> </ul> <p>For example, to continue the example above, <code>paragraphs.innerHTML</code> will return a list of all the values of the <code>innerHTML</code> attribute on each contained element. Alternatively, set an attribute for all elements contained in the collection like this: <code>paragraphs.style[\"background-color\"] = \"blue\"</code>.</p> <p>It's possible to create new elements to add to the page:</p> <pre><code>from pyscript.web import page, div, select, option, button, span, br \npage.append(\ndiv(\ndiv(\"Hello!\", classes=\"a-css-class\", id=\"hello\"),\nselect(\noption(\"apple\", value=1),\noption(\"pear\", value=2),\noption(\"orange\", value=3),\n),\ndiv(\nbutton(span(\"Hello! \"), span(\"World!\"), id=\"my-button\"),\nbr(),\nbutton(\"Click me!\"),\nclasses=[\"css-class1\", \"css-class2\"],\nstyle={\"background-color\": \"red\"}\n),\ndiv(\nchildren=[\nbutton(\nchildren=[\nspan(\"Hello! \"),\nspan(\"Again!\")\n],\nid=\"another-button\"\n),\nbr(),\nbutton(\"b\"),\n],\nclasses=[\"css-class1\", \"css-class2\"]\n)\n)\n)\n</code></pre> <p>This example demonstrates a declaritive way to add elements to the body of the page. Notice how the first (unnamed) arguments to an element are its children. The named arguments (such as <code>id</code>, <code>classes</code> and <code>style</code>) refer to attributes of the underlying HTML element. If you'd rather be explicit about the children of an element, you can always pass in a list of such elements as the named <code>children</code> argument (you see this in the final <code>div</code> in the example above).</p> <p>Of course, you can achieve similar results in an imperative style of programming:</p> <pre><code>from pyscript.web import page, div, p \nmy_div = div()\nmy_div.style[\"background-color\"] = \"red\"\nmy_div.classes.add(\"a-css-class\")\nmy_p = p()\nmy_p.content = \"This is a paragraph.\"\nmy_div.append(my_p)\n# etc...\n</code></pre> <p>It's also important to note that the <code>pyscript.when</code> decorator understands element references from <code>pyscript.web</code>:</p> <pre><code>from pyscript import when\nfrom pyscript.web import page \nbtn = page[\"#my-button\"]\n@when(\"click\", btn)\ndef my_button_click_handler(event):\nprint(\"The button has been clicked!\")\n</code></pre> <p>Should you wish direct access to the proxy object representing the underlying HTML element, each Python element has a <code>_dom_element</code> property for this purpose.</p> <p>Once again, the technical details of these classes are described in the built-in API documentation.</p>"},{"location":"user-guide/dom/#working-with-javascript","title":"Working with JavaScript","text":"<p>There are three ways in which JavaScript can get into a web page.</p> <ol> <li>As a global reference attached to the <code>window</code> object in the web page    because the code was referenced as the source of a <code>script</code> tag in your HTML    (the very old school way to do this).</li> <li>Using the Universal Module Definition (UMD),    an out-of-date and non-standard way to create JavaScript modules.</li> <li>As a standard    JavaScript Module    which is the modern, standards compliant way to define and use a JavaScript    module. If possible, this is the way you should do things.</li> </ol> <p>Sadly, this being the messy world of the web, methods 1 and 2 are still quite common, and so you need to know about them so you're able to discern and work around them. There's nothing WE can do about this situation, but we can suggest \"best practice\" ways to work around each situation.</p> <p>Remember, as mentioned elsewhere in our documentation, the standard way to get JavaScript modules into your PyScript Python context is to link a source standard JavaScript module to a destination name:</p> Reference a JavaScript module in the configuration.<pre><code>[js_modules.main]\n\"https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet-src.esm.js\" = \"leaflet\"\n</code></pre> <p>Then, reference the module via the destination name in your Python code, by importing it from the <code>pyscript.js_modules</code> namespace:</p> Import the JavaScript module into Python<pre><code>from pyscript.js_modules import leaflet as L\nmap = L.map(\"map\")\n# etc....\n</code></pre> <p>We'll deal with each of the potential JavaScript related situations in turn:</p>"},{"location":"user-guide/dom/#javascript-as-a-global-reference","title":"JavaScript as a global reference","text":"<p>In this situation, you have some JavaScript code that just globally defines \"stuff\" in the context of your web page via a <code>script</code> tag. Your HTML will contain something like this:</p> JavaScript as a global reference<pre><code>&lt;!doctype html&gt;\n&lt;!--\nThis JS utility escapes and unescapes HTML chars. It adds an \"html\" object to\nthe global context.\n--&gt;\n&lt;script src=\"https://cdn.jsdelivr.net/npm/html-escaper@3.0.3/index.js\"&gt;&lt;/script&gt;\n&lt;!--\nVanilla JS just to check the expected object is in the global context of the\nweb page.\n--&gt;\n&lt;script&gt;\nconsole.log(html);\n&lt;/script&gt;\n</code></pre> <p>When you find yourself in this situation, simply use the <code>window</code> object in your Python code (found in the <code>pyscript</code> namespace) to interact with the resulting JavaScript objects:</p> Python interaction with the JavaScript global reference<pre><code>from pyscript import window, document\n# The window object is the global context of your web page.\nhtml = window.html\n# Just use the object \"as usual\"...\n# e.g. show escaped HTML in the body: &amp;lt;&amp;gt;\ndocument.body.append(html.escape(\"&lt;&gt;\"))\n</code></pre> <p>You can find an example of this technique here:</p> <p>https://pyscript.com/@agiammarchi/floral-glade/v1</p>"},{"location":"user-guide/dom/#javascript-as-a-non-standard-umd-module","title":"JavaScript as a non-standard UMD module","text":"<p>Sadly, these sorts of non-standard JavaScript modules are still quite prevalent. But the good news is there are strategies you can use to help you get them to work properly.</p> <p>The non-standard UMD approach tries to check for <code>export</code> and <code>module</code> fields in the JavaScript module and, if it doesn\u2019t find them, falls back to treating the module in the same way as a global reference described above.</p> <p>If you find you have a UMD JavaScript module, there are services online to automagically convert it to the modern and standards compliant way to d o JavaScript modules. A common (and usually reliable) service is provided by https://esm.run/your-module-name, a service that provides an out of the box way to consume the module in the correct and standard manner:</p> Use esm.run to automatically convert a non-standard UMD module<pre><code>&lt;!doctype html&gt;\n&lt;script type=\"module\"&gt;\n// this utility escapes and unescape HTML chars\nimport { escape, unescape } from \"https://esm.run/html-escaper\";\n// esm.run returns a module       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nconsole.log(escape(\"&lt;&gt;\"));\n// log: \"&amp;lt;&amp;gt;\"\n&lt;/script&gt;\n</code></pre> <p>If a similar test works for the module you want to use, use the esm.run CDN service within the <code>py</code> or <code>mpy</code> configuration file as explained at the start of this section on JavaScript (i.e. you'll use it via the <code>pyscript.js_modules</code> namespace).</p> <p>If this doesn't work, assume the module is not updated nor migrated to a state that can be automatically translated by services like esm.run. You could try an alternative (more modern) JavaScript module to achieve you ends or (if it really must be this module), you can wrap it in a new JavaScript module that conforms to the modern standards.</p> <p>The following four files demonstrate this approach:</p> index.html - still grab the script so it appears as a global reference.<pre><code>&lt;!doctype html&gt;\n...\n&lt;!-- land the utility still globally as generic script --&gt;\n&lt;script src=\"https://cdn.jsdelivr.net/npm/html-escaper@3.0.3/index.js\"&gt;&lt;/script&gt;\n...\n</code></pre> wrapper.js - this grabs the JavaScript functionality from the global context and wraps it (exports it) in the modern standards compliant manner.<pre><code>// get all utilities needed from the global.\nconst { escape, unescape } = globalThis.html;\n// export utilities like a standards compliant module would do.\nexport { escape, unescape };\n</code></pre> pyscript.toml - configure your JS modules as before, but use your wrapper instead of the original module.<pre><code>[js_modules.main]\n# will simulate a standard JS module\n\"./wrapper.js\" = \"html_escaper\"\n</code></pre> main.py - just import the module as usual and make use of it.<pre><code>from pyscript import document\n# import the module either via\nfrom pyscript.js_modules import html_escaper\n# or via\nfrom pyscript.js_modules.html_escaper import escape, unescape\n# show on body: &amp;lt;&amp;gt;\ndocument.body.append(html.escape(\"&lt;&gt;\"))\n</code></pre> <p>You can see this approach in action here:</p> <p>https://pyscript.com/@agiammarchi/floral-glade/v2</p>"},{"location":"user-guide/dom/#a-standard-javascript-module","title":"A standard JavaScript module","text":"<p>This is both the easiest and best way to import any standard JS module into Python.</p> <p>You don't need to reference the script in your HTML, just define how the source JavaScript module maps into the <code>pyscript.js_modules</code> namespace in your configuration file, as explained above.</p> <p>That's it!</p> <p>Here is an example project that uses this approach:</p> <p>https://pyscript.com/@agiammarchi/floral-glade/v3</p>"},{"location":"user-guide/dom/#my-own-javascript-code","title":"My own JavaScript code","text":"<p>If you have your own JavaScript work, just remember to write it as a standard JavaScript module. Put simply, ensure you <code>export</code> the things you need to. For instance, in the following fragment of JavaScript, the two functions are exported from the module:</p> code.js - containing two functions exported as capabilities of the module.<pre><code>/*\nSome simple JavaScript functions for example purposes.\n*/\nexport function hello(name) {\nreturn \"Hello \" + name;\n}\nexport function fibonacci(n) {\nif (n == 1) return 0;\nif (n == 2) return 1;\nreturn fibonacci(n - 1) + fibonacci(n - 2);\n}\n</code></pre> <p>Next, just reference this module in the usual way in your TOML or JSON configuration file:</p> pyscript.toml - references the code.js module so it will appear as the code module in the pyscript.js_modules namespace.<pre><code>[js_modules.main]\n\"code.js\" = \"code\"\n</code></pre> <p>In your HTML, reference your Python script with this configuration file:</p> Reference the expected configuration file.<pre><code>&lt;script type=\"py\" src=\"./main.py\" config=\"./pyscript.toml\" terminal&gt;&lt;/script&gt;\n</code></pre> <p>Finally, just use your JavaScript module\u2019s exported functions inside PyScript:</p> Just call your bespoke JavaScript code from Python.<pre><code>from pyscript.js_modules import code\n# Just use the JS code from Python \"as usual\".\ngreeting = code.hello(\"Chris\")\nprint(greeting)\nresult = code.fibonacci(12)\nprint(result)\n</code></pre> <p>You can see this in action in the following example project:</p> <p>https://pyscript.com/@ntoll/howto-javascript/latest</p>"},{"location":"user-guide/editor/","title":"Python editor","text":"<p>The PyEditor is a core plugin.</p> <p>Warning</p> <p>Work on the Python editor is in its early stages. We have made it available in this version of PyScript to give the community an opportunity to play, experiment and provide feedback.</p> <p>Future versions of PyScript will include a more refined, robust and perhaps differently behaving version of the Python editor.</p> <p>If you specify the type of a <code>&lt;script&gt;</code> tag as either <code>py-editor</code> (for Pyodide) or <code>mpy-editor</code> (for MicroPython), the plugin creates a visual code editor, with code highlighting and a \"run\" button to execute the editable code contained therein in a non-blocking worker.</p> <p>Info</p> <p>Once clicked, the \"run\" button will show a spinner until the code is executed. This may not be visible if the code evaluation completed quickly.</p> <p>The interpreter is not loaded onto the page until the run button is clicked. By default each editor has its own independent instance of the specified interpreter:</p> Two editors, one with Pyodide, the other with MicroPython.<pre><code>&lt;script type=\"py-editor\"&gt;\nimport sys\nprint(sys.version)\n&lt;/script&gt;\n&lt;script type=\"mpy-editor\"&gt;\nimport sys\nprint(sys.version)\na = 42\nprint(a)\n&lt;/script&gt;\n</code></pre> <p>However, different editors can share the same interpreter if they share the same <code>env</code> attribute value.</p> Two editors sharing the same MicroPython environment.<pre><code>&lt;script type=\"mpy-editor\" env=\"shared\"&gt;\nif not 'a' in globals():\na = 1\nelse:\na += 1\nprint(a)\n&lt;/script&gt;\n&lt;script type=\"mpy-editor\" env=\"shared\"&gt;\n# doubled a\nprint(a * 2)\n&lt;/script&gt;\n</code></pre> <p>The outcome of these code fragments should look something like this:</p> <p></p> <p>Info</p> <p>Notice that the interpreter type, and optional environment name is shown at the top right above the Python editor.</p> <p>Hovering over the Python editor reveals the \"run\" button.</p>"},{"location":"user-guide/editor/#stop-evaluation","title":"Stop evaluation","text":"<p>Sometimes, for whatever reason, the fragment of code in the editor will never complete. Perhaps it's stuck in an infinite loop and you need to stop the evaluation of your code so you can fix the problem and start it again.</p> <p>When the code is running, hovering over the editor will reveal a stop button (where the run button was found). Click on it, confirm you want to stop your code, and then the code will stop and the editor will refresh so you can fix your code.</p> <p>It looks something like this:</p> <p></p>"},{"location":"user-guide/editor/#setup","title":"Setup","text":"<p>Sometimes you need to create a pre-baked Pythonic context for a shared environment used by an editor. This need is especially helpful in educational situations where boilerplate code can be run, with just the important salient code available in the editor.</p> <p>To achieve this end use the <code>setup</code> attribute within a <code>script</code> tag. The content of this editor will not be shown, but will bootstrap the referenced environment automatically before any following editor within the same environment is evaluated.</p> Bootstrapping an environment with `setup`<pre><code>&lt;script type=\"mpy-editor\" env=\"test_env\" setup&gt;\n# This code will not be visible, but will run before the next editor's code is\n# evaluated.\na = 1\n&lt;/script&gt;\n&lt;script type=\"mpy-editor\" env=\"test_env\"&gt;\n# Without the \"setup\" attribute, this editor is visible. Because it is using\n# the same env as the previous \"setup\" editor, the previous editor's code is\n# always evaluated first.\nprint(a)\n&lt;/script&gt;\n</code></pre> <p>Finally, the <code>target</code> attribute allows you to specify a node into which the editor will be rendered:</p> Specify a target for the Python editor.<pre><code>&lt;script type=\"mpy-editor\" target=\"editor\"&gt;\nimport sys\nprint(sys.version)\n&lt;/script&gt;\n&lt;div id=\"editor\"&gt;&lt;/div&gt; &lt;!-- will eventually contain the Python editor --&gt;\n</code></pre>"},{"location":"user-guide/editor/#editor-vs-terminal","title":"Editor VS Terminal","text":"<p>The editor and terminal are commonly used to embed interactive Python code into a website. However, there are differences between the two plugins, of which you should be aware.</p> <p>The main difference is that a <code>py-editor</code> or <code>mpy-editor</code> is an isolated environment (from the rest of PyScript that may be running on the page) and its code always runs in a web worker. We do this to prevent accidental blocking of the main thread that would freeze your browser's user interface.</p> <p>Because an editor is isolated from regular py or mpy scripts, one should not expect the same behavior regular PyScript elements follow, most notably:</p> <ul> <li>The editor's user interface is based on     CodeMirror and not on XTerm.js     as it is for the terminal.</li> <li>Code is evaluated all at once and asynchronously when the Run button is     pressed (not each line at a time, as in the terminal).</li> <li>The editor has listeners for <code>Ctrl-Enter</code> or <code>Cmd-Enter</code>, and     <code>Shift-Enter</code> to shortcut the execution of all the code. These shortcuts     make no sense in the terminal as each line is evaluated separately.</li> <li>There is a clear separation between the code and any resulting output.</li> <li>You may not use blocking calls (like <code>input</code>) with the editor, whereas     these will work if running the terminal via a worker.</li> <li>It's an editor! So simple or complex programs can be fully written without     running the code until ready. In the terminal, code is evaluated one line     at a time as it is typed in.</li> <li>There is no special reference to the underlying editor instance, while     there is both <code>script.terminal</code> or <code>__terminal__</code> in the terminal.</li> </ul>"},{"location":"user-guide/editor/#read-write-execute","title":"Read / Write / Execute","text":"<p>Sometimes you need to programatically read, write or execute code in an editor. Once PyScript has started, every py-editor/mpy-editor script tag gets a <code>code</code> accessor attached to it.</p> <pre><code>from pyscript import document\n# Grab the editor script reference.\neditor = document.querySelector('#editor')\n# Output the live content of the editor.\nprint(editor.code)\n# Update the live content of the editor.\neditor.code = \"\"\"\na = 1\nb = 2\nprint(a + b)\n\"\"\"\n# Evaluate the live code in the editor.\n# This could be any arbitrary code to evaluate in the editor's Python context.\neditor.process(editor.code)\n</code></pre>"},{"location":"user-guide/editor/#configuration","title":"Configuration","text":"<p>Unlike <code>&lt;script type=\"py\"&gt;</code> or <code>&lt;py-script&gt;</code> (and the <code>mpy</code> equivalents), a PyEditor is not influenced by the presence of <code>&lt;py-config&gt;</code> elements in the page: it requires an explicit <code>config=\"...\"</code> attribute.</p> <p>If a <code>setup</code> editor is present, that's the only PyEditor that needs a config. Any subsequent related editor will reuse the config parsed and bootstrapped for the <code>setup</code> editor.</p>"},{"location":"user-guide/editor/#run-via-keyboard","title":"Run via keyboard","text":"<p>Depending on your operating system, a combination of either <code>Ctrl-Enter</code>, <code>Cmd-Enter</code> or <code>Shift-Enter</code> will execute the code in the editor (no need to move the mouse to click the run button).</p>"},{"location":"user-guide/editor/#override-run","title":"Override run","text":"<p>Sometimes you just need to override the way the editor runs code.</p> <p>The editor's <code>handleEvent</code> can be overridden to achieve this:</p> Overriding execution via handleEvent.<pre><code>&lt;script type=\"mpy-editor\" id=\"foreign\"&gt;\nprint(6 * 7)\n&lt;/script&gt;\n&lt;script type=\"mpy\"&gt;\nfrom pyscript import document\ndef handle_event(event):\n# will log `print(6 * 7)`\nprint(event.code)\n# prevent default execution\nreturn False\n# Grab reference to the editor\nforeign = document.getElementById(\"foreign\")\n# Override handleEvent with your own customisation.\nforeign.handleEvent = handle_event\n&lt;/script&gt;\n</code></pre> <p>This live example shows how the editor can be used to execute code via a USB serial connection to a connected MicroPython microcontroller.</p>"},{"location":"user-guide/editor/#tab-behavior","title":"Tab behavior","text":"<p>We currently trap the <code>tab</code> key in a way that reflects what a regular code editor would do: the code is simply indented, rather than focus moving to another element.</p> <p>We are fully aware of the implications this might have around accessibility so we followed this detailed advice from Codemirror's documentation We have an escape hatch to move focus outside the editor. Press <code>esc</code> before <code>tab</code> to move focus to the next focusable element. Otherwise <code>tab</code> indents code.</p>"},{"location":"user-guide/editor/#still-missing","title":"Still missing","text":"<p>The PyEditor is currently under active development and refinement, so features may change (depending on user feedback). For instance, there is currently no way to stop or kill a web worker that has got into difficulty from the editor (hint: refreshing the page will reset things).</p>"},{"location":"user-guide/features/","title":"Features","text":"All the web <p>Pyscript gives you full access to the DOM and all     the web     APIs implemented by your browser.</p> <p>Thanks to the foreign     function interface (FFI), Python just works with all the browser has to     offer, including any third party JavaScript libraries that may be included     in the page.</p> <p>The FFI is bi-directional ~ it also enables JavaScript to access the     power of Python.</p> All of Python <p>PyScript brings you two Python interpreters:</p> <ol> <li>Pyodide - the original standard         CPython interpreter you know and love, but compiled to WebAssembly.         </li> <li>MicroPython - a lean and         efficient reimplementation of Python3 that includes a comprehensive         subset of the standard library, compiled to WebAssembly.</li> </ol> <p>Because it is just regular CPython, Pyodide puts Python's deep and     diverse ecosystem of libraries, frameworks     and modules at your disposal. No matter the area of computing endeavour,     there's probably a Python library to help. Got a favourite library in     Python? Now you can use it in the browser and share your work with just      a URL.</p> <p>MicroPython, because of its small size (170k) and speed, is especially     suited to running on more constrained browsers, such as those on mobile     or tablet devices. It includes a powerful sub-set of the Python standard     library and efficiently exposes the expressiveness of Python to the     browser.</p> <p>Both Python interpreters supported by PyScript implement the     same FFI to bridge the gap between the worlds of Python     and the browser.</p> AI and Data science built in Python is famous for its extraordinary usefulness in artificial     intelligence and data science. The Pyodide interpreter comes with many of     the libraries you need for this sort of work already baked in. Mobile friendly MicroPython <p>Thanks to MicroPython in PyScript, there is a compelling story for     Python on mobile.</p> <p>MicroPython is small and fast enough that your app will start quickly     on first load, and almost instantly (due to the cache) on subsequent     runs.</p> Parallel execution Thanks to a browser technology called     web workers     expensive and blocking computation can run somewhere other than the main     application thread controlling the user interface. When such work is done     on the main thread, the browser appears frozen; web workers ensure     expensive blocking computation happens elsewhere.     Think of workers as independent subprocesses in your web page. Rich and powerful plugins <p>PyScript has a small, efficient yet powerful core called     PolyScript. Most of     the functionality of PyScript is actually implemented through PolyScript's     plugin system.</p> <p>This approach ensures a clear separation of concerns: PolyScript     can focus on being small, efficient and powerful, whereas the PyScript     related plugins allow us to Pythonically build upon the solid foundations     of PolyScript.</p> <p>Because there is a plugin system, folks     independent of the PyScript core team have a way to create and     contribute to a rich ecosystem of plugins whose functionality reflects the     unique and diverse needs of PyScript's users.</p>"},{"location":"user-guide/ffi/","title":"PyScript FFI","text":"<p>The foreign function interface (FFI) gives Python access to JavaScript, and JavaScript access to Python. As a result PyScript is able to access all the standard APIs and capabilities provided by the browser.</p> <p>We provide a unified <code>pyscript.ffi</code> because Pyodide's FFI is only partially implemented in MicroPython and there are some fundamental differences. The <code>pyscript.ffi</code> namespace smooths out such differences into a uniform and consistent API.</p> <p>Our <code>pyscript.ffi</code> offers the following utilities:</p> <ul> <li><code>ffi.to_js(reference)</code> converts a Python object into its JavaScript   counterpart.</li> <li><code>ffi.create_proxy(def_or_lambda)</code> proxies a generic Python function into a   JavaScript one, without destroying its reference right away.</li> <li><code>ffi.is_none(reference)</code> to check if a specific value is either <code>None</code> or <code>JsNull</code>.</li> </ul> <p>Should you require access to Pyodide or MicroPython's specific version of the FFI you'll find them under the <code>pyodide.ffi</code> and <code>micropython.ffi</code> namespaces. Please refer to the documentation for those projects for further information.</p>"},{"location":"user-guide/ffi/#to_js","title":"to_js","text":"<p>In the Pyodide project, this utility converts Python dictionaries into JavaScript <code>Map</code> objects. Such <code>Map</code> objects reflect the <code>obj.get(field)</code> semantics native to Python's way of retrieving a value from a dictionary.</p> <p>Unfortunately, this default conversion breaks the vast majority of native and third party JavaScript APIs. This is because the convention in idiomatic JavaScript is to use an object for such key/value data structures (not a <code>Map</code> instance).</p> <p>A common complaint has been the repeated need to call <code>to_js</code> with the long winded argument <code>dict_converter=js.Object.fromEntries</code>. It turns out, most people most of the time simply want to map a Python <code>dict</code> to a JavaScript <code>object</code> (not a <code>Map</code>).</p> <p>Furthermore, in MicroPython the default Python <code>dict</code> conversion is to the idiomatic and sensible JavaScript <code>object</code>, making the need to specify a dictionary converter pointless.</p> <p>Therefore, if there is no reason to hold a Python reference in a JavaScript context (which is 99% of the time, for common usage of PyScript) then use the <code>pyscript.ffi.to_js</code> function, on both Pyodide and MicroPython, to always convert a Python <code>dict</code> to a JavaScript <code>object</code>.</p> to_js: pyodide.ffi VS pyscript.ffi<pre><code>&lt;!-- works on Pyodide (type py) only --&gt;\n&lt;script type=\"py\"&gt;\nfrom pyodide.ffi import to_js\n# default into JS new Map([[\"a\", 1], [\"b\", 2]])\nto_js({\"a\": 1, \"b\": 2})\n&lt;/script&gt;\n&lt;!-- works on both Pyodide and MicroPython --&gt;\n&lt;script type=\"py\"&gt;\nfrom pyscript.ffi import to_js\n# always default into JS {\"a\": 1, \"b\": 2}\nto_js({\"a\": 1, \"b\": 2})\n&lt;/script&gt;\n</code></pre> <p>Note</p> <p>It is still possible to specify a different <code>dict_converter</code> or use Pyodide specific features while converting Python references by simply overriding the explicit field for <code>dict_converter</code>.</p> <p>However, we cannot guarantee all fields and features provided by Pyodide will work in the same way on MicroPython.</p>"},{"location":"user-guide/ffi/#create_proxy","title":"create_proxy","text":"<p>In the Pyodide project, this function ensures that a Python callable associated with an event listener, won't be garbage collected immediately after the function is assigned to the event. Therefore, in Pyodide, if you do not wrap your Python function, it is immediately garbage collected after being associated with an event listener.</p> <p>This is so common a gotcha (see the FAQ for more on this) that the Pyodide project have already created many work-arounds to address this situation. For example, the <code>create_once_callable</code>, <code>pyodide.ffi.wrappers.add_event_listener</code> and <code>pyodide.ffi.set_timeout</code> are all methods whose goal is to automatically manage the lifetime of the passed in Python callback.</p> <p>Add to this situation methods connected to the JavaScript <code>Promise</code> object (<code>.then</code> and <code>.catch</code> callbacks that are implicitly handled to guarantee no leaks once executed) and things start to get confusing and overwhelming with many ways to achieve a common end result.</p> <p>Ultimately, user feedback suggests folks simply want to do something like this, as they write their Python code:</p> Define a callback without create_proxy.<pre><code>import js\nfrom pyscript import window\ndef callback(msg):\n\"\"\"\n    A Python callable that logs a message.\n    \"\"\"\nwindow.console.log(msg)\n# Use the callback without having to explicitly create_proxy.\njs.setTimeout(callback, 1000, 'success')\n</code></pre> <p>Therefore, PyScript provides an experimental configuration flag called <code>experimental_create_proxy = \"auto\"</code>. When set, you should never have to care about these technical details nor use the <code>create_proxy</code> method and all the JavaScript callback APIs should just work.</p> <p>Under the hood, the flag is strictly coupled with the JavaScript garbage collector that will eventually destroy all proxy objects created via the FinalizationRegistry built into the browser.</p> <p>This flag also won't affect MicroPython because it rarely needs a <code>create_proxy</code> at all when Python functions are passed to JavaScript event handlers. MicroPython automatically handles this situation. However, there might still be rare and niche cases in MicroPython where such a conversion might be needed.</p> <p>Hence, PyScript retains the <code>create_proxy</code> method, even though it does not change much in the MicroPython world, although it might be still needed with the Pyodide runtime is you don't use the <code>experimental_create_proxy = \"auto\"</code> flag.</p> <p>At a more fundamental level, MicroPython doesn't provide (yet) a way to explicitly destroy a proxy reference, whereas Pyodide still expects to explicitly invoke <code>proxy.destroy()</code> when the function is not needed.</p> <p>Warning</p> <p>In MicroPython proxies might leak due to the lack of a <code>destroy()</code> method.</p> <p>Happily, proxies are usually created explicitly for event listeners or other utilities that won't need to be destroyed in the future. So the lack of a <code>destroy()</code> method in MicroPython is not a problem in this specific, and most common, situation.</p> <p>Until we have a <code>destroy()</code> in MicroPython, we suggest testing the <code>experimental_create_proxy</code> flag with Pyodide so both runtimes handle possible leaks automatically.</p> <p>For completeness, the following examples illustrate the differences in behaviour between Pyodide and MicroPython:</p> A classic Pyodide gotcha VS MicroPython<pre><code>&lt;!-- Throws:\nUncaught Error: This borrowed proxy was automatically destroyed\nat the end of a function call. Try using create_proxy or create_once_callable.\n--&gt;\n&lt;script type=\"py\"&gt;\nimport js\njs.setTimeout(lambda x: print(x), 1000, \"fail\");\n&lt;/script&gt;\n&lt;!-- logs \"success\" after a second --&gt;\n&lt;script type=\"mpy\"&gt;\nimport js\njs.setTimeout(lambda x: print(x), 1000, \"success\");\n&lt;/script&gt;\n</code></pre> <p>To address the difference in Pyodide's behaviour, we can use the experimental flag:</p> experimental create_proxy<pre><code>&lt;py-config&gt;\n    experimental_create_proxy = \"auto\"\n&lt;/py-config&gt;\n&lt;!-- logs \"success\" after a second in both Pyodide and MicroPython --&gt;\n&lt;script type=\"py\"&gt;\nimport js\njs.setTimeout(lambda x: print(x), 1000, \"success\");\n&lt;/script&gt;\n</code></pre> <p>Alternatively, <code>create_proxy</code> via the <code>pyscript.ffi</code> in both interpreters, but only in Pyodide can we then destroy such proxy:</p> pyscript.ffi.create_proxy<pre><code>&lt;!-- success in both Pyodide and MicroPython --&gt;\n&lt;script type=\"py\"&gt;\nfrom pyscript.ffi import create_proxy\nimport js\ndef log(x):\ntry:\nproxy.destroy()\nexcept:\npass  # MicroPython\nprint(x)\nproxy = create_proxy(log)\njs.setTimeout(proxy, 1000, \"success\");\n&lt;/script&gt;\n</code></pre>"},{"location":"user-guide/ffi/#is_none","title":"is_none","text":"<p>Pyodide version <code>0.28</code> onwards has introduced a new nullish value that precisely represents JavaScript's <code>null</code> value.</p> <p>Previously, both JavaScript <code>null</code> and <code>undefined</code> would have been converted into Python's <code>None</code> but, alas, some APIs behave differently if a value is <code>undefined</code> or explicitly <code>null</code>.</p> <p>For example, in JSON, <code>null</code> would survive serialization while <code>undefined</code> would vanish. To preserve that distinction in Python, the conversion between JS and Python now has a new <code>pyodide.ffi.jsnull</code> as explained in the pyodide documentation.</p> <p>In general, there should be no surprises. But, especially when dealing with the DOM world, most utilities and methods return <code>null</code>.</p> <p>To simplify and smooth-out this distinction, we decided to introduce <code>is_null</code>, as demoed here:</p> pyscript.ffi.is_none<pre><code>&lt;!-- success in both Pyodide and MicroPython --&gt;\n&lt;script type=\"py\"&gt;\nfrom pyscript.ffi import is_none\nimport js\njs_undefined = js.undefined\njs_null = js.document.body.getAttribute(\"nope\")\nprint(js_undefined is None)     # True\nprint(js_null)                  # jsnull\nprint(js_null is None)          # False\n# JsNull is still a \"falsy\" value\nif (js_null):\nprint(\"this will not be shown\")\n# safely compared against both\nprint(is_none(js_undefined))    # True\nprint(is_none(js_none))         # True\n&lt;/script&gt;\n</code></pre> <p>Please note that in MicroPython the method works the same but, as we try to reach feature-parity among runtimes, it is suggested to use <code>is_none(ref)</code> even if, right now, there is no such distinction between <code>null</code> and <code>undefined</code> in MicroPython.</p>"},{"location":"user-guide/filesystem/","title":"PyScript and Filesystems","text":"<p>As you know, the filesystem is where you store files. For Python to work there needs to be a filesystem in which Python packages, modules and data for your apps can be found. When you <code>import</code> a library, or when you <code>open</code> a file, it is on the in-browser virtual filesystem that Python looks.</p> <p>However, things are not as they may seem.</p> <p>This section clarifies what PyScript means by a filesystem, and the way in which PyScript interacts with such a concept.</p>"},{"location":"user-guide/filesystem/#two-filesystems","title":"Two filesystems","text":"<p>PyScript interacts with two filesystems.</p> <ol> <li>The browser, thanks to    Emscripten,    provides a virtual in-memory filesystem. This has nothing to do with your    device's local filesystem, but is contained within the browser based    sandbox used by PyScript. The files    configuration API defines what is found on this filesystem.</li> <li>PyScript provides an easy to use API for accessing your device's local    filesystem. It requires permission from the user to mount a folder from the    local filesystem onto a directory in the browser's virtual filesystem. Think    of it as gate-keeping a bridge to the outside world of the device's local    filesystem.</li> </ol> <p>Danger</p> <p>Access to the device's local filesystem is only available in Chromium based browsers. The maximum capacity for files shared in this way is 4GB.</p> <p>Firefox and Safari do not support this capability (yet), and so it is not available to PyScript running in these browsers.</p>"},{"location":"user-guide/filesystem/#the-in-browser-filesystem","title":"The in-browser filesystem","text":"<p>The filesystem that both Pyodide and MicroPython use by default is the in-browser virtual filesystem. Opening files and importing modules takes place in relation to this sandboxed environment, configured via the files entry in your settings.</p> Filesystem configuration via TOML.<pre><code>[files]\n\"https://example.com/myfile.txt\": \"\"\n</code></pre> Just use the resulting file 'as usual'.<pre><code># Interacting with the virtual filesystem, \"as usual\".\nwith open(\"myfile.txt\", \"r\") as myfile:\nprint(myfile.read())\n</code></pre> <p>Currently, each time you re-load the page, the filesystem is recreated afresh, so any data stored by PyScript to this filesystem will be lost.</p> <p>Info</p> <p>In the future, we may make it possible to configure the in-browser virtual filesystem as persistent across re-loads.</p> <p>This article gives an excellent overview of the browser based virtual filesystem's implementation and architecture.</p> <p>The most important key concepts to remember are:</p> <ul> <li>The PyScript filesystem is contained within the browser's sandbox.</li> <li>Each instance of a Python interpreter used by PyScript runs in a separate   sandbox, and so does NOT share virtual filesystems.</li> <li>All Python related filesytem operations work as expected with this   filesystem.</li> <li>The virtual filesystem is configured via the   files entry in your settings.</li> <li>The virtual filesystem is (currently) NOT persistent between page re-loads. </li> <li>Currently, the filesystem has a maximum capacity of 4GB of data (something   over which we have no control).</li> </ul>"},{"location":"user-guide/filesystem/#the-devices-local-filesystem","title":"The device's local filesystem","text":"<p>Access to the device's local filesystem currently only works on Chromium based browsers.</p> <p>Your device (the laptop, mobile or tablet) that runs your browser has a filesystem provided by a hard drive. Thanks to the <code>pyscript.fs</code> namespace in our API, both MicroPython and Pyodide (CPython) gain access to this filesystem should the user of your code allow this to happen.</p> <p>This is a transient activation for the purposes of user activation of gated features. Put simply, before your code gains access to their local filesystem, an explicit agreement needs to be gathered from the user. Part of this process involves asking the user to select a target directory on their local filesystem, to which PyScript will be given access.</p> <p>The directory on their local filesystem, selected by the user, is then mounted to a given directory inside the browser's virtual filesystem. In this way a mapping is made between the sandboxed world of the browser, and the outside world of the user's filesystem.</p> <p>Your code will then be able to perform all the usual filesystem related operations provided by Python, within the mounted directory. However, such changes will NOT take effect on the local filesystem UNTIL your code explicitly calls the <code>sync</code> function. At this point, the state of the in-browser virtual filesystem and the user's local filesystem are synchronised.</p> <p>The following code demonstrates the simplest use case:</p> The core operations of the pyscript.fs API<pre><code>from pyscript import fs\n# Ask once for permission to mount any local folder\n# into the virtual filesystem handled by Pyodide/MicroPython.\n# The folder \"/local\" refers to the directory on the virtual\n# filesystem to which the user-selected directory will be\n# mounted.\nawait fs.mount(\"/local\")\n# ... DO FILE RELATED OPERATIONS HERE ...\n# If changes were made, ensure these are persisted to the local filesystem's\n# folder.\nawait fs.sync(\"/local\")\n# If needed to free RAM or that specific path, sync and unmount\nawait fs.unmount(\"/local\")\n</code></pre> <p>It is possible to use multiple different local directories with the same mount point. This is important if your application provides some generic functionality on data that might be in different local directories because while the nature of the data might be similar, the subject is not. For instance, you may have different models for a PyScript based LLM in different directories, and may wish to switch between them at runtime using different handlers (requiring their own transient action). In which case use the following technique:</p> Multiple local directories on the same mount point<pre><code># Mount a local folder specifying a different handler.\n# This requires a user explicit transient action (once).\nawait fs.mount(\"/local\", id=\"v1\")\n# ... operate on that folder ...\nawait fs.unmount(\"/local\")\n# Mount a local folder specifying a different handler.\n# This also requires a user explicit transient action (once).\nawait fs.mount(\"/local\", id=\"v2\")\n# ... operate on that folder ...\nawait fs.unmount(\"/local\")\n# Go back to the original handler or a previous one.\n# No transient action required now.\nawait fs.mount(\"/local\", id=\"v1\")\n# ... operate again on that folder ...\n</code></pre> <p>In addition to the mount <code>path</code> and handler <code>id</code>, the <code>fs.mount</code> function can take two further arguments:</p> <ul> <li><code>mode</code> (by default <code>\"readwrite\"</code>) indicates the sort of activity available to   the user. It can also be set to <code>read</code> for read-only access to the local   filesystem. This is a part of the   web-standards   for directory selection.</li> <li><code>root</code> - (by default, <code>\"\"</code>) is a hint to the browser for where to start   picking the path that should be mounted in Python. Valid values are:   <code>desktop</code>, <code>documents</code>, <code>downloads</code>, <code>music</code>, <code>pictures</code> or <code>videos</code> as per web standards.</li> </ul> <p>The <code>sync</code> and <code>unmount</code> functions only accept the mount <code>path</code> used in the browser's local filesystem.</p>"},{"location":"user-guide/first-steps/","title":"First steps","text":"<p>It's simple:</p> <ul> <li>tell your browser to use PyScript, then,</li> <li>tell PyScript how to run your Python code.</li> </ul> <p>That's it!</p> <p>For the browser to use PyScript, simply add a <code>&lt;script&gt;</code> tag, whose <code>src</code> attribute references a CDN url for <code>pyscript.core</code>, to your HTML document's <code>&lt;head&gt;</code>. We encourage you to add a reference to optional PyScript related CSS:</p> Reference PyScript in your HTML<pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;!-- Recommended meta tags --&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"&gt;\n&lt;!-- PyScript CSS --&gt;\n&lt;link rel=\"stylesheet\" href=\"https://pyscript.net/releases/2025.10.3/core.css\"&gt;\n&lt;!-- This script tag bootstraps PyScript --&gt;\n&lt;script type=\"module\" src=\"https://pyscript.net/releases/2025.10.3/core.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;!-- your code goes here... --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>There are two ways to tell PyScript how to find your code.</p> <ul> <li>With a standard HTML <code>&lt;script&gt;</code> tag whose <code>type</code> attribute is either <code>py</code>   (for Pyodide) or <code>mpy</code> (for MicroPython). This is the recommended way.</li> <li>Via the bespoke <code>&lt;py-script&gt;</code> (Pyodide) and <code>&lt;mpy-script&gt;</code> (MicroPython)   tags. Historically, <code>&lt;py-script&gt;</code> used to be the only way to reference your   code.</li> </ul> <p>These should be inserted into the <code>&lt;body&gt;</code> of your HTML document.</p> <p>In both cases either use the <code>src</code> attribute to reference a Python file containing your code, or inline your code between the opening and closing tags. We recommend you use the <code>src</code> attribute method, but retain the ability to include code between tags for convenience.</p> <p>Here's a <code>&lt;script&gt;</code> tag with a <code>src</code> attribute containing a URL pointing to a <code>main.py</code> Python file.</p> A &lt;script&gt; tag with a source file<pre><code>&lt;script type=\"mpy\" src=\"main.py\"&gt;&lt;/script&gt;\n</code></pre> <p>...and here's a <code>&lt;py-script&gt;</code> tag with inline Python code.</p> A &lt;py-script&gt; tag with inline code<pre><code>&lt;py-script&gt;\nimport sys\nfrom pyscript import display\n\ndisplay(sys.version)\n&lt;/py-script&gt;\n</code></pre> <p>The <code>&lt;script&gt;</code> and <code>&lt;py-script&gt;</code> / <code>&lt;mpy-script&gt;</code> tags may have the following attributes:</p> <ul> <li><code>src</code> - the content of the tag is ignored and the Python code in the   referenced file is evaluated instead. This is the recommended way to   reference your Python code.</li> <li><code>config</code> - your code will only be evaluated after the referenced   configuration has been parsed. Since configuration can be   JSON or a TOML file,   <code>config='{\"packages\":[\"numpy\"]}'</code> and <code>config=\"./config.json\"</code> or   <code>config=\"./config.toml\"</code> are all valid.</li> <li><code>async</code> - set this flag to <code>\"false\"</code> so your code won't run within a   top level await   (the default behaviour).</li> </ul> <p>Warning</p> <p>This behaviour changed in version 2024.8.2.</p> <p>PyScript now uses a  top level await by default.</p> <p>You used to have to include the <code>async</code> flag to enable this. Now, instead, use <code>async=\"false\"</code> to revert the behaviour back to the old default behaviour of synchronous evaluation.</p> <p>We made this change because many folks were <code>await</code>-ing functions and missing or not realising the need for the (old) <code>async</code> attribute. Hence the flip in behaviour.</p> <ul> <li><code>worker</code> - a flag to indicate your Python code is to be run on a   web worker instead of the \"main thread\" that looks after the user   interface.</li> <li><code>target</code> - the id or selector of the element where calls to   <code>display()</code> should write their values. </li> <li><code>terminal</code> - a traditional terminal is shown on the page.   As with conventional Python, <code>print</code> statements output here. If the   <code>worker</code> flag is set the terminal becomes interactive (e.g. use    the <code>input</code> statement to gather characters typed into the terminal by the   user).</li> <li><code>service-worker</code> - an optional attribute that allows you to slot in a custom   service worker   (such as <code>mini-coi.js</code>) to fix header related problems that limit the use   of web workers. This rather technical requirement is fully explained in   the section on web workers.</li> </ul> <p>Warning</p> <p>The <code>packages</code> setting used in the example configuration shown above is for Pyodide using PyPI.</p> <p>When using MicroPython, and because MicroPython doesn't support code packaged on PyPI, you should use a valid URL to a MicroPython friendly package.</p> <p>For more information please refer to the packages section of this user guide.</p> <p>Question</p> <p>Why do we recommend use of the <code>&lt;script&gt;</code> tag with a <code>src</code> attribute?</p> <p>Within the HTML standard, the <code>&lt;script&gt;</code> tag is used to embed executable code. Its use case completely aligns with our own, as does its default behaviour.</p> <p>By referencing a separate Python source file via the <code>src</code> attribute, your code is just a regular Python file your code editor will understand. Python code embedded within a <code>&lt;script&gt;</code> tag in an HTML file won't benefit from the advantages code editors bring: syntax highlighting, code analysis, language-based contextual awareness and perhaps even an AI co-pilot.</p> <p>Both the <code>&lt;py-script&gt;</code> and <code>&lt;mpy-script&gt;</code> tags with inline code are web components that are not built into the browser. While they are convenient, there is a performance cost to their use.</p> <p>Info</p> <p>The browser's tab displaying the website running PyScript is an isolated computing sandbox. Define the Python environment in which your code will run with configuration options (discussed later in this user guide).</p> <p>Tip</p> <p>If you want to run code on both the main thread and in a worker, be explicit and use separate tags.</p> <pre><code>&lt;script type=\"mpy\" src=\"main.py\"&gt;&lt;/script&gt;  &lt;!-- on the main thread --&gt;\n&lt;script type=\"py\" src=\"worker.py\" worker config=\"pyconfig.toml\"&gt;&lt;/script&gt; &lt;!-- on the worker --&gt;\n</code></pre> <p>Notice how different interpreters can be used with different configurations.</p>"},{"location":"user-guide/media/","title":"PyScript and Media Devices","text":"<p>For web applications to interact with cameras, microphones, and other media devices, there needs to be a way to access these hardware components through the browser. PyScript provides a media API that enables your Python code to interact with media devices directly from the browser environment.</p> <p>This section explains how PyScript interacts with media devices and how you can use these capabilities in your applications.</p>"},{"location":"user-guide/media/#media-device-access","title":"Media Device Access","text":"<p>PyScript interacts with media devices through the browser's MediaDevices API. This API provides access to connected media input devices like cameras and microphones, as well as output devices like speakers.</p> <p>When using PyScript's media API, it's important to understand:</p> <ol> <li>Media access requires explicit user permission. The browser will show a    permission dialog when your code attempts to access cameras or microphones.</li> <li>Media access is only available in secure contexts (HTTPS or localhost).</li> <li>All media interactions happen within the browser's sandbox, following the    browser's security policies.</li> </ol>"},{"location":"user-guide/media/#the-pyscriptmedia-api","title":"The <code>pyscript.media</code> API","text":"<p>PyScript provides a Pythonic interface to media devices through the <code>pyscript.media</code> namespace. This API includes two main components:</p> <ol> <li>The <code>Device</code> class - represents a media device and provides methods to    interact with it</li> <li>The <code>list_devices()</code> function - discovers available media devices</li> </ol>"},{"location":"user-guide/media/#listing-available-devices","title":"Listing Available Devices","text":"<p>To discover what media devices are available, use the <code>list_devices()</code> function:</p> <pre><code>from pyscript.media import list_devices\nasync def show_available_devices():\ndevices = await list_devices()\nfor device in devices:\nprint(f\"Device: {device.label}, Type: {device.kind}, ID: {device.id}\")\n# List all available devices\nshow_available_devices()\n</code></pre> <p>This function returns a list of <code>Device</code> objects, each representing a media input or output device. Note that the browser will typically request permission before providing this information.</p>"},{"location":"user-guide/media/#working-with-the-camera","title":"Working with the Camera","text":"<p>The most common use case is accessing the camera to display a video stream:</p> <pre><code>from pyscript import when\nfrom pyscript.media import Device\nfrom pyscript.web import page\nasync def start_camera():\n# Get a video stream (defaults to video only, no audio)\nstream = await Device.load(video=True)\n# Connect the stream to a video element in your HTML\nvideo_element = page[\"#camera\"][0]._dom_element\nvideo_element.srcObject = stream\nreturn stream\n# Start the camera\ncamera_stream = start_camera()\n</code></pre> <p>The <code>Device.load()</code> method is a convenient way to access media devices without first listing all available devices. You can specify options to control which camera is used:</p> <pre><code># Prefer the environment-facing camera (often the back camera on mobile)\nstream = await Device.load(video={\"facingMode\": \"environment\"})\n# Prefer the user-facing camera (often the front camera on mobile)\nstream = await Device.load(video={\"facingMode\": \"user\"})\n# Request specific resolution\nstream = await Device.load(video={\n\"width\": {\"ideal\": 1280},\n\"height\": {\"ideal\": 720}\n})\n</code></pre>"},{"location":"user-guide/media/#capturing-images-from-the-camera","title":"Capturing Images from the Camera","text":"<p>To capture a still image from the video stream:</p> <pre><code>def capture_image(video_element):\n# Get the video dimensions\nwidth = video_element.videoWidth\nheight = video_element.videoHeight\n# Create a canvas to capture the frame\ncanvas = document.createElement(\"canvas\")\ncanvas.width = width\ncanvas.height = height\n# Draw the current video frame to the canvas\nctx = canvas.getContext(\"2d\")\nctx.drawImage(video_element, 0, 0, width, height)\n# Get the image as a data URL\nimage_data = canvas.toDataURL(\"image/png\")\nreturn image_data\n</code></pre> <p>For applications that need to process images with libraries like OpenCV, you need to convert the image data to a format these libraries can work with:</p> <pre><code>import numpy as np\nimport cv2\ndef process_frame_with_opencv(video_element):\n# Get video dimensions\nwidth = video_element.videoWidth\nheight = video_element.videoHeight\n# Create a canvas and capture the frame\ncanvas = document.createElement(\"canvas\")\ncanvas.width = width\ncanvas.height = height\nctx = canvas.getContext(\"2d\")\nctx.drawImage(video_element, 0, 0, width, height)\n# Get the raw pixel data\nimage_data = ctx.getImageData(0, 0, width, height).data\n# Convert to numpy array for OpenCV\nframe = np.asarray(image_data, dtype=np.uint8).reshape((height, width, 4))\n# Convert from RGBA to BGR (OpenCV's default format)\nframe_bgr = cv2.cvtColor(frame, cv2.COLOR_RGBA2BGR)\n# Process the image with OpenCV\n# ...\nreturn frame_bgr\n</code></pre>"},{"location":"user-guide/media/#managing-camera-resources","title":"Managing Camera Resources","text":"<p>It's important to properly manage media resources, especially when your application no longer needs them. Cameras and microphones are shared resources, and failing to release them can impact other applications or cause unexpected behavior.</p>"},{"location":"user-guide/media/#stopping-the-camera","title":"Stopping the Camera","text":"<p>To stop the camera and release resources:</p> <pre><code>from pyscript.web import page\ndef stop_camera(stream):\n# Stop all tracks on the stream\nif stream:\ntracks = stream.getTracks()\nfor track in tracks:\ntrack.stop()\n# Clear the video element's source\nvideo_element = page[\"#camera\"][0]._dom_element\nif video_element:\nvideo_element.srcObject = None\n</code></pre>"},{"location":"user-guide/media/#switching-between-cameras","title":"Switching Between Cameras","text":"<p>For devices with multiple cameras, you can implement camera switching:</p> <pre><code>from pyscript.media import Device, list_devices\nfrom pyscript.web import page\nclass CameraManager:\ndef __init__(self):\nself.cameras = []\nself.current_index = 0\nself.active_stream = None\nself.video_element = page[\"#camera\"][0]._dom_element\nasync def initialize(self):\n# Get all video input devices\ndevices = await list_devices()\nself.cameras = [d for d in devices if d.kind == \"videoinput\"]\n# Start with the first camera\nif self.cameras:\nawait self.start_camera(self.cameras[0].id)\nasync def start_camera(self, device_id=None):\n# Stop any existing stream\nawait self.stop_camera()\n# Start a new stream\nvideo_options = (\n{\"deviceId\": {\"exact\": device_id}} if device_id \nelse {\"facingMode\": \"environment\"}\n)\nself.active_stream = await Device.load(video=video_options)\n# Connect to the video element\nif self.video_element:\nself.video_element.srcObject = self.active_stream\nasync def stop_camera(self):\nif self.active_stream:\ntracks = self.active_stream.getTracks()\nfor track in tracks:\ntrack.stop()\nself.active_stream = None\nif self.video_element:\nself.video_element.srcObject = None\nasync def switch_camera(self):\nif len(self.cameras) &lt;= 1:\nreturn\n# Move to the next camera\nself.current_index = (self.current_index + 1) % len(self.cameras)\nawait self.start_camera(self.cameras[self.current_index].id)\n</code></pre>"},{"location":"user-guide/media/#working-with-audio","title":"Working with Audio","text":"<p>In addition to video, the PyScript media API can access audio inputs:</p> <pre><code># Get access to the microphone (audio only)\naudio_stream = await Device.load(audio=True, video=False)\n# Get both audio and video\nav_stream = await Device.load(audio=True, video=True)\n</code></pre>"},{"location":"user-guide/media/#best-practices","title":"Best Practices","text":"<p>When working with media devices in PyScript, follow these best practices:</p>"},{"location":"user-guide/media/#permissions-and-user-experience","title":"Permissions and User Experience","text":"<ol> <li>Request permissions contextually:</li> <li>Only request camera/microphone access when needed</li> <li>Explain to users why you need access before requesting it</li> <li> <p>Provide fallback options when permissions are denied</p> </li> <li> <p>Clear user feedback:</p> </li> <li>Indicate when the camera is active</li> <li>Provide controls to pause/stop the camera</li> <li>Show loading states while the camera is initializing</li> </ol>"},{"location":"user-guide/media/#resource-management","title":"Resource Management","text":"<ol> <li>Always clean up resources:</li> <li>Stop media tracks when they're not needed</li> <li>Clear <code>srcObject</code> references from video elements</li> <li> <p>Be especially careful in single-page applications</p> </li> <li> <p>Handle errors gracefully:</p> </li> <li>Catch exceptions when requesting media access</li> <li>Provide meaningful error messages</li> <li>Offer alternatives when media access fails</li> </ol>"},{"location":"user-guide/media/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Match resolution to needs:</li> <li>Use lower resolutions when possible</li> <li>Consider mobile device limitations</li> <li> <p>Adjust video constraints based on the device</p> </li> <li> <p>Optimize image processing:</p> </li> <li>Process frames on demand rather than continuously</li> <li>Use efficient algorithms</li> <li>Consider downsampling for faster processing</li> </ol>"},{"location":"user-guide/media/#example-application-simple-camera-capture","title":"Example Application: Simple Camera Capture","text":"<p>Here's a simplified example that shows how to capture and display images from a camera:</p> <pre><code>from pyscript import when, window\nfrom pyscript.media import Device\nfrom pyscript.web import page\nclass CameraCapture:\ndef __init__(self):\n# Get UI elements\nself.video = page[\"#camera\"][0]\nself.video_element = self.video._dom_element\nself.capture_button = page[\"#capture-button\"]\nself.snapshot = page[\"#snapshot\"][0]\n# Start camera\nself.initialize_camera()\nasync def initialize_camera(self):\n# Prefer environment-facing camera on mobile devices\nstream = await Device.load(video={\"facingMode\": \"environment\"})\nself.video_element.srcObject = stream\ndef take_snapshot(self):\n\"\"\"Capture a frame from the camera and display it\"\"\"\n# Get video dimensions\nwidth = self.video_element.videoWidth\nheight = self.video_element.videoHeight\n# Create canvas and capture frame\ncanvas = window.document.createElement(\"canvas\")\ncanvas.width = width\ncanvas.height = height\n# Draw the current video frame to the canvas\nctx = canvas.getContext(\"2d\")\nctx.drawImage(self.video_element, 0, 0, width, height)\n# Convert the canvas to a data URL and display it\nimage_data_url = canvas.toDataURL(\"image/png\")\nself.snapshot.setAttribute(\"src\", image_data_url)\n# HTML structure needed:\n# &lt;video id=\"camera\" autoplay playsinline&gt;&lt;/video&gt;\n# &lt;button id=\"capture-button\"&gt;Take Photo&lt;/button&gt;\n# &lt;img id=\"snapshot\"&gt;\n# Usage:\n# camera = CameraCapture()\n# \n# @when(\"click\", \"#capture-button\")\n# def handle_capture(event):\n#     camera.take_snapshot()\n</code></pre> <p>This example demonstrates: - Initializing a camera with the PyScript media API - Accessing the camera stream and displaying it in a video element - Capturing a still image from the video stream when requested - Converting the captured frame to an image that can be displayed</p> <p>This simple pattern can serve as the foundation for various camera-based applications and can be extended with image processing libraries as needed for more complex use cases.</p>"},{"location":"user-guide/media/#conclusion","title":"Conclusion","text":"<p>The PyScript media API provides a powerful way to access and interact with cameras and microphones directly from Python code running in the browser. By following the patterns and practices outlined in this guide, you can build sophisticated media applications while maintaining good performance and user experience.</p> <p>Remember that media access is a sensitive permission that requires user consent and should be used responsibly. Always provide clear indications when media devices are active and ensure proper cleanup of resources when they're no longer needed.</p>"},{"location":"user-guide/offline/","title":"Use PyScript Offline","text":"<p>Sometimes you want to run PyScript applications offline.</p> <p>Both PyScript core and the interpreter used to run code need to be served with the application itself. The two requirements needed to create an offline version of PyScript are:</p> <ol> <li>Download and include PyScript core.</li> <li>Download and include the Python interpreters used in your application.</li> </ol>"},{"location":"user-guide/offline/#get-pyscript-core","title":"Get PyScript core","text":"<p>You have two choices:</p> <ol> <li>Build from source. Clone the repository, install dependencies, then      build and use the content found in the <code>./dist/</code> folder.</li> <li>Grab the npm package. For simplicity this is the method we currently      recommend as the easiest to get started.</li> </ol> <p>In the following instructions, we assume the existence of a folder called <code>pyscript-offline</code>. All the necessary files needed to use PyScript offline will eventually find their way in there.</p> <p>In your computer's command line shell, create the <code>pyscript-offline</code> folder like this:</p> <pre><code>mkdir -p pyscript-offline\n</code></pre> <p>Now change into the newly created directory:</p> <pre><code>cd pyscript-offline\n</code></pre>"},{"location":"user-guide/offline/#pyscipt-core-from-source","title":"PyScipt core from source","text":"<p>Build PyScript core by cloning the project repository and follow the instructions in our developer guide</p> <p>Once completed, copy the <code>dist</code> folder, that has been created by the build step, into your <code>pyscript-offline</code> folder.</p>"},{"location":"user-guide/offline/#pyscript-core-from-npm","title":"PyScript core from <code>npm</code>","text":"<p>Ensure you are in the <code>pyscript-offline</code> folder created earlier.</p> <p>Create a <code>package.json</code> file. Even an empty one with just <code>{}</code> as content will suffice. This is needed to make sure our folder will include the local <code>npm_modules</code> folder instead of placing assets elsewhere. Our aim is to ensure everything is in the same place locally.</p> <pre><code># only if there is no package.json, create one\necho '{}' &gt; ./package.json\n</code></pre> <p>Assuming you have npm installed on your computer, issue the following command in the <code>pyscript-offline</code> folder to install the PyScript core package.</p> <pre><code># install @pyscript/core\nnpm i @pyscript/core\n</code></pre> <p>Now the folder should contain a <code>node_module</code> folder in it, and we can copy the <code>dist</code> folder found within the <code>@pyscript/core</code> package wherever we like.</p> <pre><code># create a public folder to serve locally\nmkdir -p public\n\n# move @pyscript/core dist into such folder\ncp -R ./node_modules/@pyscript/core/dist ./public/pyscript\n</code></pre> <p>That's almost it!</p>"},{"location":"user-guide/offline/#set-up-your-application","title":"Set up your application","text":"<p>Simply create a <code>./public/index.html</code> file that loads the local PyScript:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;PyScript Offline&lt;/title&gt;\n&lt;script type=\"module\" src=\"/pyscript/core.js\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"/pyscript/core.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script type=\"mpy\"&gt;\nfrom pyscript import document\ndocument.body.append(\"Hello from PyScript\")\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Run this project directly (after being sure that <code>index.html</code> file is saved into the <code>public</code> folder):</p> <pre><code>python3 -m http.server -d ./public/\n</code></pre> <p>If you would like to test <code>worker</code> features, try instead:</p> <pre><code>npx mini-coi ./public/\n</code></pre>"},{"location":"user-guide/offline/#download-a-local-interpreter","title":"Download a local interpreter","text":"<p>PyScript officially supports MicroPython and Pyodide interpreters, so let's see how to get a local copy for each one of them.</p>"},{"location":"user-guide/offline/#local-micropython","title":"Local MicroPython","text":"<p>Similar to <code>@pyscript/core</code>, we can also install MicroPython from npm:</p> <pre><code>npm i @micropython/micropython-webassembly-pyscript\n</code></pre> <p>Our <code>node_modules</code> folder should contain a <code>@micropython</code> one and from there we can move relevant files into our <code>public</code> folder.</p> <p>Let's be sure we have a target for that:</p> <pre><code># create a folder in our public space\nmkdir -p ./public/micropython\n\n# copy related files into such folder\ncp ./node_modules/@micropython/micropython-webassembly-pyscript/micropython.* ./public/micropython/\n</code></pre> <p>The folder should contain at least both <code>micropython.mjs</code> and <code>micropython.wasm</code> files. These are the files to use locally via a dedicated config.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;PyScript Offline&lt;/title&gt;\n&lt;script type=\"module\" src=\"/pyscript/core.js\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"/pyscript/core.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;mpy-config&gt;\n    interpreter = \"/micropython/micropython.mjs\"\n  &lt;/mpy-config&gt;\n&lt;script type=\"mpy\"&gt;\nfrom pyscript import document\ndocument.body.append(\"Hello from PyScript\")\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"user-guide/offline/#local-pyodide","title":"Local Pyodide","text":"<p>Remember, Pyodide uses <code>micropip</code> to install third party packages. While the procedure for offline Pyodide is very similar to the one for MicroPython, if we want to use 3rd party packages we also need to have these available locally. We'll start simple and cover such packaging issues at the end.</p> <pre><code># locally install the pyodide module\nnpm i pyodide\n\n# create a folder in our public space\nmkdir -p ./public/pyodide\n\n# move all necessary files into that folder\ncp ./node_modules/pyodide/pyodide* ./public/pyodide/\ncp ./node_modules/pyodide/python_stdlib.zip ./public/pyodide/\n</code></pre> <p>Please note that the <code>pyodide-lock.json</code> file is needed, so please don't change that <code>cp</code> operation as all <code>pyodide*</code> files need to be moved.</p> <p>At this point, all we need to do is to change the configuration on our HTML page to use pyodide instead:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;PyScript Offline&lt;/title&gt;\n&lt;script type=\"module\" src=\"/pyscript/core.js\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"/pyscript/core.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;py-config&gt;\n    interpreter = \"/pyodide/pyodide.mjs\"\n  &lt;/py-config&gt;\n&lt;script type=\"py\"&gt;\nfrom pyscript import document\ndocument.body.append(\"Hello from PyScript\")\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"user-guide/offline/#wrap-up","title":"Wrap up","text":"<p>That's basically it!</p> <p>Disconnect from the internet, run the local server, and the page will still show that very same <code>Hello from PyScript</code> message.</p>"},{"location":"user-guide/offline/#local-pyodide-packages","title":"Local Pyodide packages","text":"<p>Finally, we need the ability to install Python packages from a local source when using Pyodide.</p> <p>Put simply, we use the packages bundle from pyodide releases.</p> <p>Warning</p> <p>This bundle is more than 200MB!</p> <p>It contains each package that is required by Pyodide, and Pyodide will only load packages when needed.</p> <p>Once downloaded and extracted (we're using version <code>0.26.2</code> in this example), we can simply copy the files and folders inside the <code>pyodide-0.26.2/pyodide/*</code> directory into our <code>./public/pyodide/*</code> folder.</p> <p>Feel free to either skip or replace the content, or even directly move the <code>pyodide</code> folder inside our <code>./public/</code> one.</p> <p>Now use any package available in via the Pyodide bundle.</p> <p>For example:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;PyScript Offline&lt;/title&gt;\n&lt;script type=\"module\" src=\"/pyscript/core.js\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"/pyscript/core.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;py-config&gt;\n    interpreter = \"/pyodide/pyodide.mjs\"\n    packages = [\"pandas\"]\n  &lt;/py-config&gt;\n&lt;script type=\"py\"&gt;\nimport pandas as pd\nx = pd.Series([1,2,3,4,5,6,7,8,9,10])\nfrom pyscript import document\ndocument.body.append(str([i**2 for i in x]))\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>We should now be able to read <code>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</code> on the page even if we disconnect from the Internet.</p> <p>That's it!</p>"},{"location":"user-guide/plugins/","title":"Plugins","text":"<p>PyScript offers a plugin API so anyone can extend its functionality and share their modifications.</p> <p>PyScript only supports plugins written in Javascript (although causing the evaluation of bespoke Python code can be a part of such plugins). The plugin's JavaScript code should be included on the web page via a <code>&lt;script type=\"module\"&gt;</code> tag before PyScript is included in the web page.</p> <p>The PyScript plugin API defines hooks that intercept named events in the lifecycle of a PyScript application, so you can modify how the platform behaves. The example at the bottom of this page demonstrates how this is done in code.</p>"},{"location":"user-guide/plugins/#lifecycle-events","title":"Lifecycle Events","text":"<p>PyScript emits events that capture the beginning or the end of specific stages in the application's life. No matter if code is running in the main thread or on a web worker, the exact same sequence of steps takes place:</p> <ul> <li>ready - the browser recognizes the PyScript <code>script</code> or tag, and the     associated Python interpreter is ready to work. A JavaScript callback can     be used to instrument the interpreter before anything else happens.</li> <li>before run - some Python code is about to be evaluated. A JavaScript     callback could setup a bespoke browser context, be that in the main thread     or a web worker. This is similar to a generic setup callback found in     test frameworks.</li> <li>code before run - sometimes a plugin needs Python code to be evaluated     before the code given to PyScript, in order to set up a Python context     for the referenced code. Such code is simply a string of Python evaluated     immediately before the code given to PyScript.</li> <li>At this point in the lifecycle the code referenced in the <code>script</code> or     other PyScript related tags is evaluated.</li> <li>code after run - sometimes a plugin needs Python code to be evaluated     after the code given to PyScript, in order to clean up or react to the     final state created by the referenced code. Such code is simply a string of     Python code evaluated immediately after the code given to PyScript.</li> <li>after run - all the Python code has been evaluated. A JavaScript     callback could clean up or react to the resulting browser context, be that     on the main thread or a web worker. This is similar to a generic teardown     callback found in test frameworks.</li> </ul> <p>PyScript's interpreters can run their code either synchronously or asynchronously (note, the default is asynchronously). No matter, the very same sequence is guaranteed to run in order in both cases, the only difference being the naming convention used to reference synchronous or asynchronous lifecycle hooks.</p>"},{"location":"user-guide/plugins/#hooks","title":"Hooks","text":"<p>Hooks are used to tell PyScript that your code wants to subscribe to specific lifecycle events. When such events happen, your code will be called by PyScript.</p> <p>The available hooks depend upon where your code is running: on the browser's (blocking) main thread or on a (non-blocking) web worker. These are defined via the <code>hooks.main</code> and <code>hooks.worker</code> namespaces in JavaScript.</p>"},{"location":"user-guide/plugins/#main-hooks","title":"Main Hooks","text":"<p>Callbacks registered via hooks on the main thread will usually receive a wrapper of the interpreter with its unique-to-that-interpreter utilities, along with a reference to the element on the page from where the code was derived.</p> <p>Please refer to the documentation for the interpreter you're using (Pyodide or MicroPython) to learn about its implementation details and the potential capabilities made available via the wrapper.</p> <p>Callbacks whose purpose is simply to run raw contextual Python code, don't receive interpreter or element arguments. </p> <p>This table lists all possible, yet optional, hooks a plugin can register on the main thread:</p> name example behavior onReady <code>onReady(wrap:Wrap, el:Element) {}</code> If defined, this hook is invoked before any other to signal that the interpreter is ready and code is going to be evaluated. This hook is in charge of eventually running Pythonic content in any way it is defined to do so. onBeforeRun <code>onBeforeRun(wrap:Wrap, el:Element) {}</code> If defined, it is invoked before to signal that an element's code is going to be evaluated. onBeforeRunAsync <code>onBeforeRunAsync(wrap:Wrap, el:Element) {}</code> Same as <code>onBeforeRun</code>, except for scripts that require <code>async</code> behaviour. codeBeforeRun <code>codeBeforeRun: () =&gt; 'print(\"before\")'</code> If defined, evaluate some Python code immediately before the element's code is evaluated. codeBeforeRunAsync <code>codeBeforeRunAsync: () =&gt; 'print(\"before\")'</code> Same as <code>codeBeforeRun,</code> except for scripts that require <code>async</code> behaviour. codeAfterRun <code>codeAfterRun: () =&gt; 'print(\"after\")'</code> If defined, evaluate come Python code immediately after the element's code has finished executing. codeAfterRunAsync <code>codeAfterRunAsync: () =&gt; 'print(\"after\")'</code> Same as <code>codeAfterRun</code>, except for scripts that require <code>async</code> behaviour. onAfterRun <code>onAfterRun(wrap:Wrap, el:Element) {}</code> If defined, invoked immediately after the element's code has been executed. onAfterRunAsync <code>onAfterRunAsync(wrap:Wrap, el:Element) {}</code> Same as <code>onAfterRun</code>, except for scripts that require <code>async</code> behaviour. onWorker <code>onWorker(wrap = null, xworker) {}</code> If defined, whenever a script or tag with a <code>worker</code> attribute is processed, this hook is triggered on the main thread.  This allows possible <code>xworker</code> features to be exposed before the code is evaluated on the web worker. The <code>wrap</code> reference is usually <code>null</code> unless an explicit <code>XWorker</code> call has been initialized manually and there is an interpreter on the main thread (very advanced use case). Please note, this is the only hook that doesn't exist in the worker counter list of hooks."},{"location":"user-guide/plugins/#worker-hooks","title":"Worker Hooks","text":"<p>When it comes to hooks on a web worker, callbacks cannot use any JavaScript outer scope references and must be completely self contained. This is because  callbacks must be serializable in order to work on web workers since they are actually communicated as strings via a postMessage to the worker's isolated environment.</p> <p>For example, this will work because all references are contained within the registered function:</p> <pre><code>import { hooks } from \"https://pyscript.net/releases/2025.10.3/core.js\";\nhooks.worker.onReady.add(() =&gt; {\n// NOT suggested, just an example!\n// This code simply defines a global `i` reference if it doesn't exist.\nif (!('i' in globalThis))\nglobalThis.i = 0;\nconsole.log(++i);\n});\n</code></pre> <p>However, due to the outer reference to the variable <code>i</code>, this will fail:</p> <pre><code>import { hooks } from \"https://pyscript.net/releases/2025.10.3/core.js\";\n// NO NO NO NO NO! \u2620\ufe0f\nlet i = 0;\nhooks.worker.onReady.add(() =&gt; {\n// The `i` in the outer-scope will cause an error if\n// this code executes in the worker because only the\n// body of this function gets stringified and re-evaluated\nconsole.log(++i);\n});\n</code></pre> <p>As the worker won't have an <code>element</code> related to it, since workers can be created procedurally, the second argument won't be a reference to an <code>element</code> but a reference to the related <code>xworker</code> object that is driving and coordinating things.</p> <p>The list of possible yet optional hooks a custom plugin can use with a web worker is exactly the same as for the main thread except for the absence of <code>onWorker</code> and the replacement of the second <code>element</code> argument with that of an <code>xworker</code>.</p>"},{"location":"user-guide/plugins/#example-plugin","title":"Example plugin","text":"<p>Here's a contrived example, written in JavaScript, that should be added to the web page via a <code>&lt;script type=\"module\"&gt;</code> tag before PyScript is included in the page.</p> log.js - a plugin that simply logs to the console.<pre><code>// import the hooks from PyScript first...\nimport { hooks } from \"https://pyscript.net/releases/2025.10.3/core.js\";\n// The `hooks.main` attribute defines plugins that run on the main thread.\nhooks.main.onReady.add((wrap, element) =&gt; {\nconsole.log(\"main\", \"onReady\");\nif (location.search === '?debug') {\nconsole.debug(\"main\", \"wrap\", wrap);\nconsole.debug(\"main\", \"element\", element);\n}\n});\nhooks.main.onBeforeRun.add(() =&gt; {\nconsole.log(\"main\", \"onBeforeRun\");\n});\nhooks.main.codeBeforeRun.add('print(\"main\", \"codeBeforeRun\")');\nhooks.main.codeAfterRun.add('print(\"main\", \"codeAfterRun\")');\nhooks.main.onAfterRun.add(() =&gt; {\nconsole.log(\"main\", \"onAfterRun\");\n});\n// The `hooks.worker` attribute defines plugins that run on workers.\nhooks.worker.onReady.add((wrap, xworker) =&gt; {\nconsole.log(\"worker\", \"onReady\");\nif (location.search === '?debug') {\nconsole.debug(\"worker\", \"wrap\", wrap);\nconsole.debug(\"worker\", \"xworker\", xworker);\n}\n});\nhooks.worker.onBeforeRun.add(() =&gt; {\nconsole.log(\"worker\", \"onBeforeRun\");\n});\nhooks.worker.codeBeforeRun.add('print(\"worker\", \"codeBeforeRun\")');\nhooks.worker.codeAfterRun.add('print(\"worker\", \"codeAfterRun\")');\nhooks.worker.onAfterRun.add(() =&gt; {\nconsole.log(\"worker\", \"onAfterRun\");\n});\n</code></pre> Include the plugin in the web page before including PyScript.<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;!-- JS plugins should be available before PyScript bootstraps --&gt;\n&lt;script type=\"module\" src=\"./log.js\"&gt;&lt;/script&gt;\n&lt;!-- PyScript --&gt;\n&lt;link rel=\"stylesheet\" href=\"https://pyscript.net/releases/2025.10.3/core.css\"&gt;\n&lt;script type=\"module\" src=\"https://pyscript.net/releases/2025.10.3/core.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script type=\"mpy\"&gt;\nprint(\"ACTUAL CODE\")\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"user-guide/pygame-ce/","title":"PyGame Support","text":"<p>Danger</p> <p>Support for PyGame-CE is experimental and its behaviour is likely to change as we get feedback and bug reports from the community.</p> <p>Please bear this in mind as you try PyGame-CE with PyScript, and all feedback, bug reports and constructive critique is welcome via discord or GitHub.</p> <p>PyGameCE is a Python library for building powerful games (so says their website). They also say, to get started you just need to <code>pip install pygame-ce</code>.</p> <p>Thanks to work in the upstream Pyodide project PyGame-CE is available in PyScript and to get started all you need to do is: <code>&lt;script type=\"py-game\" src=\"my_game.py\"&gt;&lt;/script&gt;</code> Now you don't even need to <code>pip install</code> the library! It comes with PyScript by default, and you can share your games via a URL!</p> <p>Info</p> <p>Please refer to PyGame-CE's extensive documentation for how to create a game. Some things may not work because we're running in a browser context, but play around and let us know how you get on.</p>"},{"location":"user-guide/pygame-ce/#getting-started","title":"Getting Started","text":"<p>Here are some notes on using PyGame-CE specifically in a browser context with pyscript versus running locally per PyGame-CE's documentation.</p> <ol> <li>You can use pyscript.com as mentioned in    Beginning PyScript for an easy starting    environment.</li> <li>Pyscript's PyGame-CE is under development, so make sure to use the latest    version by checking the <code>index.html</code> and latest version on this website. If    using pyscript.com, the latest version is not always    used in a new project.</li> <li>The game loop needs to allow the browser to run to update the canvas used as    the game's screen. In the simplest projects, the quickest way to do that is    to replace <code>clock.tick(fps)</code> with <code>await asyncio.sleep(1/fps)</code>, but there    are better ways (discussed later).</li> <li>If you have multiple Python source files or media such as images or sounds,    you need to use the config attribute to load the    files into the PyScript environment. The below example shows how to do this.</li> <li>The integrated version of Python and PyGame-CE may not be the latest. In the     browser's console when PyGame-CE starts you can see the versions, and for     example if 2.4.1 is included, you can't use a function marked in the     documentation as \"since 2.5\".</li> </ol>"},{"location":"user-guide/pygame-ce/#example","title":"Example","text":"<p>This is the example quickstart taken from the Python Pygame  Introduction on the  PyGame-CE website, modified only to add <code>await asyncio.sleep(1/60)</code> (and the  required <code>import asyncio</code>) to limit the game to roughly 60 fps.</p> <p>Note: since the <code>await</code> is not in an <code>async</code> function, it cannot run using Python on your local machine, but a solution is discussed later.</p> quickstart.py<pre><code>import asyncio\nimport sys, pygame\npygame.init()\nsize = width, height = 320, 240\nspeed = [2, 2]\nblack = 0, 0, 0\nscreen = pygame.display.set_mode(size)\nball = pygame.image.load(\"intro_ball.gif\")\nballrect = ball.get_rect()\nwhile True:\nfor event in pygame.event.get():\nif event.type == pygame.QUIT: sys.exit()\nballrect = ballrect.move(speed)\nif ballrect.left &lt; 0 or ballrect.right &gt; width:\nspeed[0] = -speed[0]\nif ballrect.top &lt; 0 or ballrect.bottom &gt; height:\nspeed[1] = -speed[1]\nscreen.fill(black)\nscreen.blit(ball, ballrect)\npygame.display.flip()\nawait asyncio.sleep(1/60)\n</code></pre> <p>To run this game with PyScript, use the following HTML file, ensuring a call to the Python program and a <code>&lt;canvas id=\"canvas\"&gt;</code> element where the graphics will be placed. Make sure to update the pyscript release to the latest version.</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;PyScript Pygame-CE Quickstart&lt;/title&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"&gt;\n&lt;link rel=\"stylesheet\" href=\"https://pyscript.net/releases/2025.10.3/core.css\"&gt;\n&lt;script type=\"module\" src=\"https://pyscript.net/releases/2025.10.3/core.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;canvas id=\"canvas\" style=\"image-rendering: pixelated\"&gt;&lt;/canvas&gt;\n&lt;script type=\"py-game\" src=\"quickstart.py\" config='pyscript.toml'&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Info</p> <p>The <code>style=\"image-rendering: pixelated</code> on the canvas preserves the pixelated look on high-DPI screens or when zoomed-in. Remove it to have a \"smoothed\" look.</p> <p>Lastly, you need to define the <code>pyscript.toml</code> file to expose any files that your game loads -- in this case, <code>intro_ball.gif</code> (download from pygame GitHub).</p> pyscript.toml<pre><code>[files]\n\"intro_ball.gif\" = \"\"\n</code></pre> <p>Now you only need to serve the 3 files to a browser. If using  pyscript.com you only need to ensure the content of the  files, click save then run and view the preview tab. Or, if you are on a machine  with Python installed you can do it from a command line running in the same  directory as the project:</p> <pre><code>python -m http.server -b 127.0.0.1 8000\n</code></pre> <p>This will start a website accessible only to your machine (<code>-b 127.0.0.1</code> limits  access only to \"localhost\" -- your own machine). After running this, you can  visit http://localhost:8000/ to run the game in your browser.</p> <p>Congratulations! Now you know the basics of updating games to run in PyScript. You can continue to develop your game in the typical PyGame-CE way.</p>"},{"location":"user-guide/pygame-ce/#running-locally","title":"Running Locally","text":"<p>Placing an <code>await</code> call in the main program script as in the example is not  technically valid Python as it should be in an <code>async</code> function. In the environment executed by PyScript, the code runs in an <code>async</code> context so this works; however, you will notice you cannot run the <code>quickstart.py</code> on your local machine with Python. To fix that, you need to add just a little more code:</p> <p>Place the entire game in a function called <code>run_game</code> so that function can be  declared as <code>async</code>, allowing it to use <code>await</code> in any environment. Import the  <code>asyncio</code> package and add the <code>try ... except</code> code at the end. Now when running  in the browser, <code>asyncio.create_task</code> is used, but when running locally  <code>asyncio.run</code> is used. Now you can develop and run locally but also support  publish to the web via PyScript.</p> <pre><code>import asyncio\nimport sys, pygame\nasync def run_game():\npygame.init()\n# Game init ...\nwhile True:\nfor event in pygame.event.get():\nif event.type == pygame.QUIT: sys.exit()\n# Game logic ...\nawait asyncio.sleep(1/60)\ntry:\nasyncio.get_running_loop() # succeeds if in async context\nasyncio.create_task(run_game())\nexcept RuntimeError:\nasyncio.run(run_game()) # start async context as we're not in one\n</code></pre> <p>Info</p> <p>In the web version, the <code>sys.exit()</code> was never used because the <code>QUIT</code> event is not generated, but in the local version, responding to the event is mandatory.</p>"},{"location":"user-guide/pygame-ce/#advanced-timing","title":"Advanced Timing","text":"<p>While the <code>await asyncio.sleep(1/60)</code> is a quick way to approximate 60 FPS, like all sleep-based timing methods in games this is not precise. Generating the frame itself takes time, so sleeping 1/60th of a second means total frame time is longer and actual FPS will be less than 60.</p> <p>A better way is to do this is to run your game at the same frame rate as the  display (usually 60, but can be 75, 100, 144, or higher on some displays). When  running in the browser, the proper way to do this is with the JavaScript API  called <code>requestAnimationFrame</code>. Using the FFI (foreign function interface)  capabilities of PyScript, we can request the browser's JavaScript runtime to  call the game. The main issue of this method is it requires work to separate the  game setup from the game's execution, which may require more advanced Python  code such as <code>global</code> or <code>class</code>. However, one benefit is that the <code>asyncio</code>  usages are gone.</p> <p>When running locally, you get the same effect from the <code>vsync=1</code> parameter on  <code>pygame.display.set_mode</code> as <code>pygame.display.flip()</code> will pause until the screen  has displayed the frame. In the web version, the <code>vsync=1</code> will do nothing,  <code>flip</code> will not block, leaving the browser itself to control the timing using  <code>requestAnimationFrame</code> by calling <code>run_one_frame</code> (via <code>on_animation_frame</code>)  each time the display updates.</p> <p>Additionally, since frame lengths will be different on each machine, we need to account for this by creating and using a <code>dt</code> (delta time) variable by using a <code>pygame.time.Clock</code>. We update the speed to be in pixels per second and multiply by <code>dt</code> (in seconds) to get the number of pixels to move.</p> <p>The code will look like this:</p> <pre><code>import sys, pygame\npygame.init()\nsize = width, height = 320, 240\nspeed = pygame.Vector2(150, 150) # use Vector2 so we can multiply with dt\nblack = 0, 0, 0\nscreen = pygame.display.set_mode(size, vsync=1) # Added vsync=1\nball = pygame.image.load(\"intro_ball.gif\")\nballrect = ball.get_rect()\nclock = pygame.time.Clock() # New clock defined\ndef run_one_frame():\nfor event in pygame.event.get():\nif event.type == pygame.QUIT: sys.exit()\n# in this 300 is for maximum frame rate only, in case vsync is not working\ndt = clock.tick(300) / 1000\nballrect.move_ip(speed * dt) # use move_ip to avoid the need for \"global\"\n# Remaining game code unchanged ...\npygame.display.flip()\n# PyScript-specific code to use requestAnimationFrame in browser\ntry:\nfrom pyscript import window\nfrom pyscript import ffi\n# Running in PyScript\ndef on_animation_frame(dt):\n# For consistency, we use dt from pygame's clock even in browser\nrun_one_frame()\nwindow.requestAnimationFrame(raf_proxy)\nraf_proxy = ffi.create_proxy(on_animation_frame)\non_animation_frame(0)\nexcept ImportError:\n# Local Execution\nwhile True:\nrun_one_frame()\n</code></pre> <p>A benefit of <code>vsync</code> / <code>requestAnimationFrame</code> method is that if the game is  running too slowly, frames will naturally be skipped. A drawback is that in the  case of skipped frames and different displays, <code>dt</code> will be different. This can cause problems depending on your game's physics code; the potential solutions  are not unique to the PyScript situation and can be found elsewhere online as an  exercise for the reader. For example, the above example on some machines the  ball will get \"stuck\" in the sides. In case of issues the <code>asyncio.sleep</code> method  without <code>dt</code> is easier to deal with for the beginning developer.</p>"},{"location":"user-guide/pygame-ce/#how-it-works","title":"How it works","text":"<p>When a <code>&lt;script type=\"py-game\"&gt;&lt;/script&gt;</code> element is found on the page a Pyodide instance is bootstrapped with the <code>pygame-ce</code> package already included. Differently from other scripts, <code>py-game</code> cannot currently work through a worker and it uses an optional target attribute to define the <code>&lt;canvas&gt;</code> element id that will be used to render the game. If no target attribute is defined, the script assumes there is a <code>&lt;canvas id=\"canvas\"&gt;</code> element already on the page.</p> <p>A config attribute can be specified to add extra packages or bring in additional files such as images and sounds but right now that's all it can do.</p> <p>Info</p> <p>Sometimes you need to gather text based user input when starting a game. The usual way to do this is via the builtin <code>input</code> function.</p> <p>Because PyGame-CE only runs on the main thread, the only way to block your code while it waits for user <code>input</code> is to use a JavaScript prompt instead of input typed in via a terminal. PyScript handles this automatically for you if you use the <code>input</code> function.</p> <p>This is an experiment, but:</p> <ul> <li>It is possible to use regular PyScript to load the pygame-ce package and use   all the other features. But there be dragons! This helper simply allows   multiple games on a page and forces game logic to run on the main thread to   reduce confusion around attributes and features when the <code>pygame-ce</code> package   is meant to be used. Put simply, we make it relatively safe and easy to use.</li> <li>The fact <code>pygame-ce</code> is the default \"game engine\" does not mean in the future   PyScript won't have other engines also available.</li> <li>Once again, as this is an experiment, we welcome any kind of feedback,   suggestions, hints on how to improve or reports of what's missing.</li> </ul> <p>Other than that, please go make and share wonderful games. We can't wait to see what you come up with.</p>"},{"location":"user-guide/running-offline/","title":"Running PyScript Offline","text":"<p>Although users will want to create and share PyScript apps on the internet, there are cases when user want to run PyScript applications offline, in an airgapped fashion. This means that both PyScript core and the interpreter used to run code need to be served with the application itself. In short, the 2 main explicit tasks needed to create an offline PyScript application are:</p> <ul> <li>download and include PyScript core (<code>core.js</code>)</li> <li>download and include the [Python] interpreters you want to use in your Application</li> </ul>"},{"location":"user-guide/running-offline/#downloading-and-including-pyscripts-corejs","title":"Downloading and Including PyScript's <code>core.js</code>","text":"<p>There are at least 2 ways to use PyScript offline:</p> <ul> <li>by cloning the repository, then building and installing dependencies and then run and then reach the <code>./dist/</code> folder</li> <li>by grabbing the npm package which for simplicity sake will be the method used here at least until we find a better place to pin our dist folder via our CDN and make the procedure even easier than it is now</li> </ul> <p>In the examples below, we'll assume we are creating a PyScript Application folder called <code>pyscript-offline</code> and we'll add all the necessary files to the folder. </p> <p>First of all, we are going to create a <code>pyscript-offline</code> folder as reference.</p> <pre><code>mkdir -p pyscript-offline\ncd pyscript-offline\n</code></pre>"},{"location":"user-guide/running-offline/#adding-core-by-cloning-the-repository","title":"Adding core by Cloning the Repository","text":"<p>You can build all the PyScript Core files by cloning the project repository and building them yourself. To do so, build the files by following the instructions in our developer guide</p> <p>Once you've run the <code>build</code> command, copy the <code>build</code> folder that has been created into your <code>pyscript-offline</code> folder.</p>"},{"location":"user-guide/running-offline/#adding-core-by-installing-pyscriptcore-locally","title":"Adding core by Installing <code>@pyscript/core</code> Locally","text":"<p>First of all, ensure you are in the folder you would like to test PyScirpt locally. In this case, the <code>pyscript-offline</code> folder we created earlier.</p> <p>Once within the folder, be sure there is a <code>package.json</code> file. Even an empty one with just <code>{}</code> as content would work. This is needed to be sure the folder will include locally the <code>npm_modules</code> folder instead of placing the package in the parent folder, if any.</p> <pre><code># only if there is no package.json, create one\necho '{}' &gt; ./package.json\n\n# install @pyscript/core\nnpm i @pyscript/core\n</code></pre> <p>At this point the folder should contain a <code>node_module</code> in it and we can actually copy its <code>dist</code> folder wherever we like.</p> <pre><code># create a public folder to serve locally\nmkdir -p public\n\n# move @pyscript/core dist into such folder\ncp -R ./node_modules/@pyscript/core/dist ./public/pyscript\n</code></pre>"},{"location":"user-guide/running-offline/#setting-up-your-application","title":"Setting up your application","text":"<p>Once you've added PyScript code following one of the methods above, that's almost it! We are half way through our goal but we can already create a <code>./public/index.html</code> file that loads the project:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;PyScript Offline&lt;/title&gt;\n&lt;script type=\"module\" src=\"/pyscript/core.js\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"/pyscript/core.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script type=\"mpy\"&gt;\nfrom pyscript import document\ndocument.body.append(\"Hello from PyScript\")\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>To run this project directly, after being sure that <code>index.html</code> file is saved into the <code>public</code> folder,  you can try:</p> <pre><code>python3 -m http.server -d ./public/\n</code></pre> <p>Alternatively, if you would like to test also <code>worker</code> features, you can try instead:</p> <pre><code>npx static-handler --coi ./public/\n</code></pre>"},{"location":"user-guide/running-offline/#downloading-and-setting-up-a-local-interpreter","title":"Downloading and Setting up a Local Interpreter","text":"<p>Good news! We are almost there. Now that we've:</p> <ul> <li>downloaded PyScript locally</li> <li>created the skeleton of an initial PyScript App</li> </ul> <p>we need to download and setup up an interpreter. PyScript officially supports MicroPython and Pyodide interpreters, so let's see how to do that for each one of them.</p>"},{"location":"user-guide/running-offline/#download-micropython-locally","title":"Download MicroPython locally","text":"<p>Similarly to what we did for <code>@pyscript/core</code>, we can also install MicroPython from npm:</p> <pre><code>npm i @micropython/micropython-webassembly-pyscript\n</code></pre> <p>Our <code>node_modules</code> folder now should contain a <code>@micropython</code> one and from there we can move relevant files into our <code>public</code> folder, but let's be sure we have a target for that:</p> <pre><code># create a folder in our public space\nmkdir -p ./public/micropython\n\n# copy related files into such folder\ncp ./node_modules/@micropython/micropython-webassembly-pyscript/micropython.* ./public/micropython/\n</code></pre> <p>That folder should contain at least both <code>micropython.mjs</code> and <code>micropython.wasm</code> files and these are the files we are going to use locally via our dedicated config.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;PyScript Offline&lt;/title&gt;\n&lt;script type=\"module\" src=\"/pyscript/core.js\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"/pyscript/core.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;mpy-config&gt;\n    interpreter = \"/micropython/micropython.mjs\"\n  &lt;/mpy-config&gt;\n&lt;script type=\"mpy\"&gt;\nfrom pyscript import document\ndocument.body.append(\"Hello from PyScript\")\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"user-guide/running-offline/#install-pyodide-locally","title":"Install Pyodide locally","text":"<p>Currently there is a difference between MicroPython and Pyodide: the former does not have (yet) a package manager while the latest does, it's called micropip.</p> <p>This is important to remember because while the procedure to have pyodide offline is very similar to the one we've just seen, if we want to use also 3rd party packages we also need to have these running locally ... but let's start simple:</p> <pre><code># install locally the pyodide module\nnpm i pyodide\n\n# create a folder in our public space\nmkdir -p ./public/pyodide\n\n# move all necessary files into that folder\ncp ./node_modules/pyodide/pyodide* ./public/pyodide/\ncp ./node_modules/pyodide/python_stdlib.zip ./public/pyodide/\n</code></pre> <p>Please note that also <code>pyodide-lock.json</code> file is needed so please don't change that <code>cp</code> operation as all <code>pyodide*</code> files need to be moved.</p> <p>At this point, all we need to do is to change our HTML page to use pyodide instead:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;PyScript Offline&lt;/title&gt;\n&lt;script type=\"module\" src=\"/pyscript/core.js\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"/pyscript/core.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;py-config&gt;\n    interpreter = \"/pyodide/pyodide.mjs\"\n  &lt;/py-config&gt;\n&lt;script type=\"py\"&gt;\nfrom pyscript import document\ndocument.body.append(\"Hello from PyScript\")\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"user-guide/running-offline/#wrapping-it-up","title":"Wrapping it up","text":"<p>We are basically done! If we try to disconnect from the internet but we still run our local server, the page will still show that very same Hello from PyScript message :partying_face:</p> <p>We can now drop internet, still keeping the local server running, and everything should be fine :partying_face: </p>"},{"location":"user-guide/running-offline/#local-pyodide-packages","title":"Local Pyodide Packages","text":"<p>There's one last thing that users are probably going to need: the ability to install Python packages when using Pyodide.</p> <p>In order to have also 3rd party packages available, we can use the bundle from pyodide releases that contains also packages.</p> <p>Please note this bundle is more than 200MB: it not downloaded all at once, it contains each package that is required and it loads only related packages when needed.</p> <p>Once downloaded and extracted, where in this case I am using <code>0.24.1</code> as reference bundle, we can literally copy and paste, or even move, all those files and folders inside the <code>pyodide-0.24.1/pyodide/*</code> directory into our <code>./public/pyodide/*</code> folder.</p> <p>As the bundle contains files already present, feel free to either skip or replace the content, or even directly move that pyodide folder inside our <code>./public/</code> one.</p> <p>Once it's done, we can now use any package we like that is available in pyodide. Let's see an example:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;PyScript Offline&lt;/title&gt;\n&lt;script type=\"module\" src=\"/pyscript/core.js\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"/pyscript/core.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;py-config&gt;\n    interpreter = \"/pyodide/pyodide.mjs\"\n    packages = [\"pandas\"]\n  &lt;/py-config&gt;\n&lt;script type=\"py\"&gt;\nimport pandas as pd\nx = pd.Series([1,2,3,4,5,6,7,8,9,10])\nfrom pyscript import document\ndocument.body.append(str([i**2 for i in x]))\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>If everything went fine, we should now be able to read <code>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</code> on the page even if we disconnect from the Internet.</p> <p>And that's all folks :wave: </p>"},{"location":"user-guide/terminal/","title":"Terminal","text":"<p>In conventional (non-browser based) Python, it is common to run scripts from the terminal, or to interact directly with the Python interpreter via the REPL. It's to the terminal that <code>print</code> writes characters (via <code>stdout</code>), and it's from the terminal that the <code>input</code> reads characters (via <code>stdin</code>).</p> <p>It usually looks something like this:</p> <p></p> <p>Because of the historic importance of the use of a terminal, PyScript makes one available in the browser (based upon XTerm.js). As mentioned earlier, PyScript's built-in terminal is activated with the <code>terminal</code> flag when using the <code>&lt;script&gt;</code>, <code>&lt;py-script&gt;</code> or <code>&lt;mpy-script&gt;</code> tags.</p> <p>Success</p> <p>As of the 2024.4.1 release, MicroPython works with the terminal.</p> <p>This is, perhaps, the simplest use case that allows data to be emitted to a read-only terminal:</p> <pre><code>&lt;script type=\"py\" terminal&gt;print(\"hello world\")&lt;/script&gt;\n</code></pre> <p>The end result will look like this (the rectangular box indicates the current position of the cursor):</p> <p></p> <p>Should you need an interactive terminal, for example because you use the <code>input</code> statement that requires the user to type things into the terminal, you must ensure your code is run on a worker:</p> <p><pre><code>&lt;script type=\"py\" terminal worker&gt;\nname = input(\"What is your name? \")\nprint(f\"Hello, {name}\")\n&lt;/script&gt;\n</code></pre> </p> <p>To use the interactive Python REPL in the terminal, use Python's code module like this:</p> <pre><code>import code\ncode.interact()\n</code></pre> <p>The end result should look something like this:</p> <p></p> <p>Finally, it is possible to dynamically pass Python code into the terminal. The trick is to get a reference to the terminal created by PyScript. Thankfully, this is very easy.</p> <p>Consider this fragment:</p> <pre><code>&lt;script id=\"my_script\" type=\"mpy\" terminal worker&gt;&lt;/script&gt;\n</code></pre> <p>Get a reference to the element, and just call the <code>process</code> method on that object:</p> <pre><code>const myterm = document.querySelector(\"#my_script\");\nawait myterm.process('print(\"Hello world!\")');\n</code></pre>"},{"location":"user-guide/terminal/#xterm-reference","title":"XTerm reference","text":"<p>Each terminal has a reference to the Terminal instance used to bootstrap the current terminal.</p> <p>On the JavaScript side, it's a <code>script.terminal</code> property while on the Python side, it's a <code>__terminal__</code> special reference that guarantees to provide the very same <code>script.terminal</code>:</p> How to reach the XTerm Terminal<pre><code>&lt;script id=\"py-terminal\" type=\"py\" terminal worker&gt;\nfrom pyscript import document, ffi\n# example: change default font-family\n__terminal__.options = ffi.to_js({\"fontFamily\": \"cursive\"})\nscript = document.getElementById(\"py-terminal\")\nprint(script.terminal == __terminal__)\n# prints True with the defined font\n&lt;/script&gt;\n</code></pre>"},{"location":"user-guide/terminal/#clear-the-terminal","title":"Clear the terminal","text":"<p>It's very simple to clear a PyTerminal:</p> Clearing the terminal<pre><code>&lt;script type=\"mpy\" terminal worker&gt;\nprint(\"before\")\n__terminal__.clear()\nprint(\"after\")\n# only \"after\" is on the terminal\n&lt;/script&gt;\n</code></pre>"},{"location":"user-guide/terminal/#resize-the-terminal","title":"Resize the terminal","text":"<p>The terminal takes up a fair amount of room onscreen. It can be resized to use less. Here it is 10 lines high. Resizing the terminal in python<pre><code>if '__terminal__' in locals():  # has a terminal been created\n__terminal__.resize(60, 10)  # (width, height)\n</code></pre></p>"},{"location":"user-guide/terminal/#terminal-colors","title":"Terminal colors","text":"<p>Colors and most special characters work so you can make the text bold or turn it green. You could even use a control character to <code>print('\\033[2J')</code> and clear the terminal, instead of using the exposed <code>clear()</code> method:</p> Terminal colors<pre><code>&lt;script type=\"mpy\" terminal worker&gt;\nprint(\"This is \\033[1mbold\\033[0m\")\nprint(\"This is \\033[32mgreen\\033[0m\")\nprint(\"This is \\033[1m\\033[35mbold and purple\\033[0m\")\n&lt;/script&gt;\n</code></pre>"},{"location":"user-guide/terminal/#terminal-addons","title":"Terminal addons","text":"<p>It's possible use XTerm.js addons:</p> Terminal addons<pre><code>&lt;py-config&gt;\n    [js_modules.main]\n    \"https://cdn.jsdelivr.net/npm/@xterm/addon-web-links/+esm\" = \"weblinks\"\n&lt;/py-config&gt;\n&lt;script type=\"py\" terminal&gt;\nfrom pyscript import js_modules\naddon = js_modules.weblinks.WebLinksAddon.new()\n__terminal__.loadAddon(addon)\nprint(\"Check out https://pyscript.net/\")\n&lt;/script&gt;\n</code></pre> <p>By default we enable the <code>WebLinksAddon</code> addon (so URLs displayed in the terminal automatically become links). Behind the scenes is the example code shown above, and this approach will work for any other addon you may wish to use.</p>"},{"location":"user-guide/terminal/#micropython","title":"MicroPython","text":"<p>MicroPython has a very complete REPL already built into it.</p> <ul> <li>All <code>Ctrl+X</code> strokes are handled, including paste mode and kill switches.</li> <li>History works out of the box. Access this via the up and down arrows to     view your command history.</li> <li>Tab completion works like a charm. Use the <code>tab</code> key to see available     variables or objects in <code>globals</code>.</li> <li>Copy and paste is much improved. This is true for a single terminal entry,     or a     paste mode     enabled variant.</li> </ul> <p>As a bonus, the MicroPython terminal works on both the main thread and in web workers, with the following caveats:</p> <ul> <li>Main thread:<ul> <li>Calls to the blocking <code>input</code> function are delegated to the native browser   based   prompt   utility.</li> <li>There are no guards against blocking code (e.g. <code>while True:</code> loops).   Such blocking code could freeze your page.</li> </ul> </li> <li>Web worker:<ul> <li>Conventional support for the <code>input</code> function, without blocking the main   thread.</li> <li>Blocking code (e.g. <code>while True:</code> loops) does not block the main thread   and your page will remain responsive.</li> </ul> </li> </ul> <p>We encourage the usage of <code>worker</code> attribute to bootstrap a MicroPython terminal. But now you have an option to run the terminal in the main thread. Just remember not to block!</p>"},{"location":"user-guide/what/","title":"What is PyScript?","text":"<p>PyScript is an open source platform for Python in the browser.</p> <p>PyScript brings together two of the most vibrant technical ecosystems on the planet. If the web and Python had a baby, you'd get PyScript.</p> <p>PyScript works because modern browsers support WebAssembly (abbreviated to WASM) - an instruction set for a virtual machine with an open specification and near native performance. PyScript takes versions of the Python interpreter compiled to WASM, and makes them easy to use inside the browser.</p> <p>At the core of PyScript is a philosophy of digital empowerment. The web is the world's most ubiquitous computing platform, mature and familiar to billions of people. Python is one of the world's most popular programming languages: it is easy to teach and learn, used in a plethora of existing domains (such as data science, games, embedded systems, artificial intelligence, finance, physics  and film production - to name but a few), and the Python ecosystem contains a huge number of popular and powerful libraries to address its many uses.</p> <p>PyScript brings together the ubiquity, familiarity and accessibility of the web with the power, depth and expressiveness of Python. It means PyScript isn't just for programming experts but, as we like to say, for the 99% of the rest of the planet who use computers.</p>"},{"location":"user-guide/workers/","title":"Workers","text":"<p>Workers run code that won't block the \"main thread\" controlling the user interface. If you block the main thread, your web page becomes annoyingly unresponsive. You should never block the main thread.</p> <p>Happily, PyScript makes it very easy to use workers and uses a feature recently added to web standards called Atomics. You don't need to know about Atomics to use web workers, but it's useful to know that the underlying coincident library uses it under the hood.</p> <p>Info</p> <p>Sometimes you only need to <code>await</code> in the main thread on a method in a worker when neither <code>window</code> nor <code>document</code> are referenced in the code running on the worker.</p> <p>In these cases, you don't need any special header or service worker as long as the method exposed from the worker returns a serializable result.</p>"},{"location":"user-guide/workers/#http-headers","title":"HTTP headers","text":"<p>To use the <code>window</code> and <code>document</code> objects from within a worker (i.e. use synchronous Atomics) you must ensure your web server enables the following headers (this is the default behavior for pyscript.com):</p> <pre><code>Access-Control-Allow-Origin: *\nCross-Origin-Opener-Policy: same-origin\nCross-Origin-Embedder-Policy: require-corp\nCross-Origin-Resource-Policy: cross-origin\n</code></pre> <p>If you're unable to configure your server's headers, you have two options:</p> <ol> <li>Use the mini-coi project    to enforce headers.</li> <li>Use the <code>service-worker</code> attribute with the <code>script</code> element.</li> </ol>"},{"location":"user-guide/workers/#option-1-mini-coi","title":"Option 1: mini-coi","text":"<p>For performance reasons, this is the preferred option so Atomics works at native speed.</p> <p>The simplest way to use mini-coi is to copy the mini-coi.js file content and save it in the root of your website (i.e. <code>/</code>), and reference it as the first child tag in the <code>&lt;head&gt;</code> of your HTML documents:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;script src=\"/mini-coi.js\"&gt;&lt;/script&gt;\n&lt;!-- etc --&gt;\n&lt;/head&gt;\n&lt;!-- etc --&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"user-guide/workers/#option-2-service-worker-attribute","title":"Option 2: <code>service-worker</code> attribute","text":"<p>This allows you to slot in a custom service worker to handle requirements for synchronous operations.</p> <p>Each <code>&lt;script type=\"m/py\"&gt;</code> or <code>&lt;m/py-script&gt;</code> may optionally have a <code>service-worker</code> attribute pointing to a locally served file (the same way <code>mini-coi.js</code> needs to be served).</p> <p>Such file needs to orchestrate coincident POST requests so that:</p> <ul> <li>you can copy and paste the   coincident Service Worker   into your local project and point at that via the <code>service-worker</code> attribute.   This will not change the original behavior of your project, it will not   interfere with all default or pre-defined headers your application uses   already but it will   fallback to a (slower but working) synchronous operation   that allows both <code>window</code> and <code>document</code> access in your worker logic.</li> <li>you can import   coincident listeners   in your project and at least add the <code>fetc</code> one before your listeners.   It will automatically stop propagation when a request is meant to be handled   so that the rest of your logic will not be affected or change by any mean.</li> </ul> <pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;!-- PyScript link and script --&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script type=\"py\" service-worker=\"./sw.js\" worker&gt;\nfrom pyscript import window, document\ndocument.body.append(\"Hello PyScript!\")\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Warning</p> <p>Using coincident as the fallback for synchronous operations via Atomics should be the last solution to consider. It is inevitably slower than using native Atomics.</p> <p>If you must use <code>service-worker</code> attribute, always reduce the amount of synchronous operations by caching references from the main thread.</p> <pre><code># \u274c THIS IS UNNECESSARILY SLOWER\nfrom pyscript import document\n# add a data-test=\"not ideal attribute\"\ndocument.body.dataset.test = \"not ideal\"\n# read a data-test attribute\nprint(document.body.dataset.test)\n# - - - - - - - - - - - - - - - - - - - - -\n# \u2714\ufe0f THIS IS FINE\nfrom pyscript import document\n# if needed elsewhere, reach it once\nbody = document.body\ndataset = body.dataset\n# add a data-test=\"not ideal attribute\"\ndataset.test = \"not ideal\"\n# read a data-test attribute\nprint(dataset.test)\n</code></pre> <p>In latter example the number of operations has been reduced from six to just four. The rule of thumb is: if you ever need a DOM reference more than once, cache it. \ud83d\udc4d</p>"},{"location":"user-guide/workers/#start-working","title":"Start working","text":"<p>To start your code in a worker, simply ensure the <code>&lt;script&gt;</code>, <code>&lt;py-script&gt;</code> or <code>&lt;mpy-script&gt;</code> tag pointing to the code you want to run has a <code>worker</code> attribute flag:</p> Evaluating code in a worker<pre><code>&lt;script type=\"py\" src=\"./my-worker-code.py\" worker&gt;&lt;/script&gt;\n</code></pre> <p>You may also want to add a <code>name</code> attribute to the tag, so you can use <code>pyscript.workers</code> in the main thread to retrieve a reference to the worker:</p> <pre><code>&lt;script type=\"py\" src=\"./my-worker-code.py\" worker name=\"my-worker\"&gt;&lt;/script&gt;\n</code></pre> <pre><code>from pyscript import workers\nmy_worker = await workers[\"my-worker\"]\n</code></pre> <p>Alternatively, to launch a worker from within Python running on the main thread use the pyscript.PyWorker class and you must reference both the target Python script and interpreter type:</p> Launch a worker from within Python<pre><code>from pyscript import PyWorker\n# The type MUST be given and can be either `micropython` or `pyodide`\nmy_worker = PyWorker(\"my-worker-code.py\", type=\"micropython\")\n</code></pre>"},{"location":"user-guide/workers/#worker-interactions","title":"Worker interactions","text":"<p>Code running in the worker needs to be able to interact with code running in the main thread and perhaps have access to the web page. This is achieved via some helpful builtin APIs.</p> <p>Note</p> <p>For ease of use, the worker related functionality in PyScript is a simpler presentation of more sophisticated and powerful behaviour available via PolyScript.</p> <p>If you are a confident advanced user, please consult the XWorker related documentation from the PolyScript project for how to make use of these features.</p> <p>To synchronise serializable data between the worker and the main thread use the <code>sync</code> function in the worker to reference a function registered on the main thread:</p> Python code running on the main thread.<pre><code>from pyscript import PyWorker\ndef hello(name=\"world\"):\nreturn(f\"Hello, {name}\")\n# Create the worker.\nworker = PyWorker(\"./worker.py\", type=\"micropython\")\n# Register the hello function as callable from the worker.\nworker.sync.hello = hello\n</code></pre> Python code in the resulting worker.<pre><code>from pyscript import sync, window\ngreeting = sync.hello(\"PyScript\")\nwindow.console.log(greeting)\n</code></pre> <p>Alternatively, for the main thread to call functions in a worker, specify the functions in a <code>__export__</code> list:</p> Python code on the worker.<pre><code>import sys\ndef version():\nreturn sys.version\n# Define what to export to the main thread.\n__export__ = [\"version\", ]\n</code></pre> <p>Then ensure you have a reference to the worker in the main thread (for instance, by using the <code>pyscript.workers</code>):</p> Creating a named worker in the web page.<pre><code>&lt;script type=\"py\" src=\"./my-worker-code.py\" worker name=\"my-worker\"&gt;&lt;/script&gt;\n</code></pre> Referencing and using the worker from the main thread.<pre><code>from pyscript import workers\nmy_worker = await workers[\"my-worker\"]\nprint(await my_worker.version())\n</code></pre> <p>The values passed between the main thread and the worker must be serializable. Try the example given above via this project on PyScript.com.</p> <p>No matter if your code is running on the main thread or in a web worker, both the <code>pyscript.window</code> (representing the main thread's global window context) and <code>pyscript.document</code> (representing the web page's document object) will be available and work in the same way. As a result, a worker can reach into the DOM and access some <code>window</code> based APIs.</p> <p>Warning</p> <p>Access to the <code>window</code> and <code>document</code> objects is a powerful feature. Please remember that:</p> <ul> <li>Arguments to and the results from such calls, when used in a worker,   must be serializable, otherwise they won't work.</li> <li>If you manipulate the DOM via the <code>document</code> object, and other workers or   code on the main thread does so too, they may interfere with each other   and produce unforeseen problematic results. Remember, with great power   comes great responsibility... and we've given you a bazooka (so please   remember not to shoot yourself in the foot with it).</li> </ul>"},{"location":"user-guide/workers/#common-use-case","title":"Common Use Case","text":"<p>While it is possible to start a MicroPython or Pyodide worker from either MicroPython or Pyodide running on the main thread, the most common use case we have encountered is MicroPython on the main thread starting a Pyodide worker.</p> <p>Here's how:</p> <p>index.html Evaluate main.py via MicroPython on the main thread<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"&gt;\n&lt;!-- PyScript CSS --&gt;\n&lt;link rel=\"stylesheet\" href=\"https://pyscript.net/releases/2025.10.3/core.css\"&gt;\n&lt;!-- This script tag bootstraps PyScript --&gt;\n&lt;script type=\"module\" src=\"https://pyscript.net/releases/2025.10.3/core.js\"&gt;&lt;/script&gt;\n&lt;title&gt;PyWorker - mpy bootstrapping pyodide example&lt;/title&gt;\n&lt;script type=\"mpy\" src=\"main.py\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;/html&gt;\n</code></pre></p> <p>main.py MicroPython's main.py: bootstrapping a Pyodide worker.<pre><code>from pyscript import PyWorker, document\n# Bootstrap the Pyodide worker, with optional config too.\n# The worker is:\n#   * Owned by this script, no JS or Pyodide code in the same page can access\n#     it.\n#   * It allows pre-sync methods to be exposed.\n#   * It has a ready Promise to await for when Pyodide is ready in the worker. \n#   * It allows the use of post-sync (methods exposed by Pyodide in the\n#     worker).\nworker = PyWorker(\"worker.py\", type=\"pyodide\")\n# Expose a utility that can be immediately invoked in the worker. \nworker.sync.greetings = lambda: print(\"Pyodide bootstrapped\")\nprint(\"before ready\")\n# Await until Pyodide has completed its bootstrap, and is ready.\nawait worker.ready\nprint(\"after ready\")\n# Await any exposed methods exposed via Pyodide in the worker.\nresult = await worker.sync.heavy_computation()\nprint(result)\n# Show the result at the end of the body.\ndocument.body.append(result)\n# Free memory and get rid of everything in the worker.\nworker.terminate()\n</code></pre></p> <p>worker.py The worker.py script runs in the Pyodide worker.<pre><code>from pyscript import sync\n# Use any methods from main.py on the main thread.\nsync.greetings()\n# Expose any methods meant to be used from main.\nsync.heavy_computation = lambda: 6 * 7\n</code></pre></p> <p>Save these files in a <code>tmp</code> folder, ensure your headers (just use <code>npx mini-coi ./tmp</code> to serve via localhost) then see the following outcome in the browser's devtools. </p> <pre><code>before ready\nPyodide bootstrapped\nafter ready\n42\n</code></pre>"}]}